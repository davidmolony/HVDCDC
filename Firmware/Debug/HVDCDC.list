
HVDCDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fec  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004138  08004138  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004138  08004138  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  0800414c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800414c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d749  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e1  00000000  00000000  0002d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156e5  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2f9  00000000  00000000  00046aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a501  00000000  00000000  00055da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e02a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003128  00000000  00000000  000e02f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800408c 	.word	0x0800408c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800408c 	.word	0x0800408c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb8c 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f82c 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e8 	bl	80005f8 <MX_GPIO_Init>
    MX_DMA_Init();
 8000228:	f000 f9d0 	bl	80005cc <MX_DMA_Init>
    MX_ADC1_Init();
 800022c:	f000 f880 	bl	8000330 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000230:	f000 f912 	bl	8000458 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0x58>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fcc4 	bl	8001bc4 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	; 0x64
 800023e:	f000 fc01 	bl	8000a44 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 4);
 8000242:	490c      	ldr	r1, [pc, #48]	; (8000274 <main+0x5c>)
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x58>)
 8000246:	2204      	movs	r2, #4
 8000248:	0018      	movs	r0, r3
 800024a:	f000 ff2b 	bl	80010a4 <HAL_ADC_Start_DMA>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <main+0x60>)
 8000250:	2100      	movs	r1, #0
 8000252:	0018      	movs	r0, r3
 8000254:	f003 f826 	bl	80032a4 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x60>)
 800025a:	2100      	movs	r1, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f003 fd25 	bl	8003cac <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <main+0x60>)
 8000264:	210c      	movs	r1, #12
 8000266:	0018      	movs	r0, r3
 8000268:	f003 f81c 	bl	80032a4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	e7fe      	b.n	800026c <main+0x54>
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000028 	.word	0x20000028
 8000274:	20000134 	.word	0x20000134
 8000278:	200000e8 	.word	0x200000e8

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b093      	sub	sp, #76	; 0x4c
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2414      	movs	r4, #20
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f003 fef5 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f003 feee 	bl	800407c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f002 f9a5 	bl	80025f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2202      	movs	r2, #2
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2240      	movs	r2, #64	; 0x40
 80002c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2202      	movs	r2, #2
 80002d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2200      	movs	r2, #0
 80002d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2208      	movs	r2, #8
 80002dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0292      	lsls	r2, r2, #10
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0592      	lsls	r2, r2, #22
 80002ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 f9bf 	bl	8002674 <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f993 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2207      	movs	r2, #7
 8000302:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2202      	movs	r2, #2
 8000308:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	0018      	movs	r0, r3
 800031c:	f002 fcba 	bl	8002c94 <HAL_RCC_ClockConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000324:	f000 f97e 	bl	8000624 <Error_Handler>
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b013      	add	sp, #76	; 0x4c
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	0018      	movs	r0, r3
 800033a:	230c      	movs	r3, #12
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f003 fe9c 	bl	800407c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000344:	4b3f      	ldr	r3, [pc, #252]	; (8000444 <MX_ADC1_Init+0x114>)
 8000346:	4a40      	ldr	r2, [pc, #256]	; (8000448 <MX_ADC1_Init+0x118>)
 8000348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800034a:	4b3e      	ldr	r3, [pc, #248]	; (8000444 <MX_ADC1_Init+0x114>)
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	05d2      	lsls	r2, r2, #23
 8000350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000352:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <MX_ADC1_Init+0x114>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b3a      	ldr	r3, [pc, #232]	; (8000444 <MX_ADC1_Init+0x114>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800035e:	4b39      	ldr	r3, [pc, #228]	; (8000444 <MX_ADC1_Init+0x114>)
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	0392      	lsls	r2, r2, #14
 8000364:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000366:	4b37      	ldr	r3, [pc, #220]	; (8000444 <MX_ADC1_Init+0x114>)
 8000368:	2208      	movs	r2, #8
 800036a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036c:	4b35      	ldr	r3, [pc, #212]	; (8000444 <MX_ADC1_Init+0x114>)
 800036e:	2200      	movs	r2, #0
 8000370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000372:	4b34      	ldr	r3, [pc, #208]	; (8000444 <MX_ADC1_Init+0x114>)
 8000374:	2200      	movs	r2, #0
 8000376:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000378:	4b32      	ldr	r3, [pc, #200]	; (8000444 <MX_ADC1_Init+0x114>)
 800037a:	2200      	movs	r2, #0
 800037c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800037e:	4b31      	ldr	r3, [pc, #196]	; (8000444 <MX_ADC1_Init+0x114>)
 8000380:	2204      	movs	r2, #4
 8000382:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000384:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <MX_ADC1_Init+0x114>)
 8000386:	2220      	movs	r2, #32
 8000388:	2100      	movs	r1, #0
 800038a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 800038c:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <MX_ADC1_Init+0x114>)
 800038e:	2288      	movs	r2, #136	; 0x88
 8000390:	00d2      	lsls	r2, r2, #3
 8000392:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <MX_ADC1_Init+0x114>)
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	00d2      	lsls	r2, r2, #3
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800039c:	4b29      	ldr	r3, [pc, #164]	; (8000444 <MX_ADC1_Init+0x114>)
 800039e:	222c      	movs	r2, #44	; 0x2c
 80003a0:	2101      	movs	r1, #1
 80003a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <MX_ADC1_Init+0x114>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_ADC1_Init+0x114>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_ADC1_Init+0x114>)
 80003b2:	2203      	movs	r2, #3
 80003b4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_ADC1_Init+0x114>)
 80003b8:	223c      	movs	r2, #60	; 0x3c
 80003ba:	2100      	movs	r1, #0
 80003bc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_ADC1_Init+0x114>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <MX_ADC1_Init+0x114>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fcc4 	bl	8000d54 <HAL_ADC_Init>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80003d0:	f000 f928 	bl	8000624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4a1d      	ldr	r2, [pc, #116]	; (800044c <MX_ADC1_Init+0x11c>)
 80003d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2204      	movs	r2, #4
 80003de:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	1d3a      	adds	r2, r7, #4
 80003e8:	4b16      	ldr	r3, [pc, #88]	; (8000444 <MX_ADC1_Init+0x114>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 f81f 	bl	8001430 <HAL_ADC_ConfigChannel>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80003f6:	f000 f915 	bl	8000624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <MX_ADC1_Init+0x120>)
 80003fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2208      	movs	r2, #8
 8000404:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_ADC1_Init+0x114>)
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f001 f80f 	bl	8001430 <HAL_ADC_ConfigChannel>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000416:	f000 f905 	bl	8000624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <MX_ADC1_Init+0x124>)
 800041e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	220c      	movs	r2, #12
 8000424:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_ADC1_Init+0x114>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f000 ffff 	bl	8001430 <HAL_ADC_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000436:	f000 f8f5 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b004      	add	sp, #16
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000028 	.word	0x20000028
 8000448:	40012400 	.word	0x40012400
 800044c:	04000002 	.word	0x04000002
 8000450:	08000004 	.word	0x08000004
 8000454:	b0001000 	.word	0xb0001000

08000458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b098      	sub	sp, #96	; 0x60
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045e:	2354      	movs	r3, #84	; 0x54
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	0018      	movs	r0, r3
 8000464:	230c      	movs	r3, #12
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f003 fe07 	bl	800407c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800046e:	2338      	movs	r3, #56	; 0x38
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	0018      	movs	r0, r3
 8000474:	231c      	movs	r3, #28
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fdff 	bl	800407c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	2334      	movs	r3, #52	; 0x34
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fdf8 	bl	800407c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800048c:	4b4d      	ldr	r3, [pc, #308]	; (80005c4 <MX_TIM1_Init+0x16c>)
 800048e:	4a4e      	ldr	r2, [pc, #312]	; (80005c8 <MX_TIM1_Init+0x170>)
 8000490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000492:	4b4c      	ldr	r3, [pc, #304]	; (80005c4 <MX_TIM1_Init+0x16c>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000498:	4b4a      	ldr	r3, [pc, #296]	; (80005c4 <MX_TIM1_Init+0x16c>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 640;
 800049e:	4b49      	ldr	r3, [pc, #292]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80004a0:	22a0      	movs	r2, #160	; 0xa0
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004ac:	4b45      	ldr	r3, [pc, #276]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b2:	4b44      	ldr	r3, [pc, #272]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004b8:	4b42      	ldr	r3, [pc, #264]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 fe9a 	bl	80031f4 <HAL_TIM_PWM_Init>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80004c4:	f000 f8ae 	bl	8000624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80004c8:	2154      	movs	r1, #84	; 0x54
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2270      	movs	r2, #112	; 0x70
 80004ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004dc:	187a      	adds	r2, r7, r1
 80004de:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f003 fc7a 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004ec:	f000 f89a 	bl	8000624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f0:	2138      	movs	r1, #56	; 0x38
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2260      	movs	r2, #96	; 0x60
 80004f6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800051c:	1879      	adds	r1, r7, r1
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_TIM1_Init+0x16c>)
 8000520:	2200      	movs	r2, #0
 8000522:	0018      	movs	r0, r3
 8000524:	f002 ff96 	bl	8003454 <HAL_TIM_PWM_ConfigChannel>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800052c:	f000 f87a 	bl	8000624 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000530:	2138      	movs	r1, #56	; 0x38
 8000532:	187b      	adds	r3, r7, r1
 8000534:	22fa      	movs	r2, #250	; 0xfa
 8000536:	0052      	lsls	r2, r2, #1
 8000538:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800053a:	1879      	adds	r1, r7, r1
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_TIM1_Init+0x16c>)
 800053e:	220c      	movs	r2, #12
 8000540:	0018      	movs	r0, r3
 8000542:	f002 ff87 	bl	8003454 <HAL_TIM_PWM_ConfigChannel>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800054a:	f000 f86b 	bl	8000624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 25;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2219      	movs	r2, #25
 8000564:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0192      	lsls	r2, r2, #6
 8000572:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	0492      	lsls	r2, r2, #18
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005a0:	1d3a      	adds	r2, r7, #4
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f003 fc7a 	bl	8003ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80005b0:	f000 f838 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <MX_TIM1_Init+0x16c>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 f92c 	bl	8000814 <HAL_TIM_MspPostInit>

}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b018      	add	sp, #96	; 0x60
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000e8 	.word	0x200000e8
 80005c8:	40012c00 	.word	0x40012c00

080005cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_DMA_Init+0x28>)
 80005d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_DMA_Init+0x28>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	639a      	str	r2, [r3, #56]	; 0x38
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_DMA_Init+0x28>)
 80005e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_GPIO_Init+0x28>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_GPIO_Init+0x28>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MX_GPIO_Init+0x28>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40021000 	.word	0x40021000

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x44>)
 8000638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_MspInit+0x44>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x44>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x44>)
 8000650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_MspInit+0x44>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0549      	lsls	r1, r1, #21
 8000658:	430a      	orrs	r2, r1
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_MspInit+0x44>)
 800065e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	055b      	lsls	r3, r3, #21
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b095      	sub	sp, #84	; 0x54
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	233c      	movs	r3, #60	; 0x3c
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	0018      	movs	r0, r3
 8000686:	2314      	movs	r3, #20
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f003 fcf6 	bl	800407c <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000690:	2414      	movs	r4, #20
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	2318      	movs	r3, #24
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 fcee 	bl	800407c <memset>
  if(hadc->Instance==ADC1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a47      	ldr	r2, [pc, #284]	; (80007c4 <HAL_ADC_MspInit+0x14c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d000      	beq.n	80006ac <HAL_ADC_MspInit+0x34>
 80006aa:	e086      	b.n	80007ba <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	01d2      	lsls	r2, r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	f002 fc73 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80006c6:	f7ff ffad 	bl	8000624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ca:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <HAL_ADC_MspInit+0x150>)
 80006cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ce:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <HAL_ADC_MspInit+0x150>)
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0349      	lsls	r1, r1, #13
 80006d4:	430a      	orrs	r2, r1
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
 80006d8:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <HAL_ADC_MspInit+0x150>)
 80006da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	035b      	lsls	r3, r3, #13
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <HAL_ADC_MspInit+0x150>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ea:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <HAL_ADC_MspInit+0x150>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <HAL_ADC_MspInit+0x150>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006fe:	213c      	movs	r1, #60	; 0x3c
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2207      	movs	r2, #7
 8000704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2203      	movs	r2, #3
 800070a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	187a      	adds	r2, r7, r1
 8000714:	23a0      	movs	r3, #160	; 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fe06 	bl	800232c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000722:	4a2b      	ldr	r2, [pc, #172]	; (80007d0 <HAL_ADC_MspInit+0x158>)
 8000724:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000728:	2205      	movs	r2, #5
 800072a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <HAL_ADC_MspInit+0x154>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <HAL_ADC_MspInit+0x154>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	00d2      	lsls	r2, r2, #3
 800074c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000750:	2220      	movs	r2, #32
 8000752:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_ADC_MspInit+0x154>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_ADC_MspInit+0x154>)
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fc05 	bl	8001f6c <HAL_DMA_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8000766:	f7ff ff5d 	bl	8000624 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800076a:	212c      	movs	r1, #44	; 0x2c
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
    pSyncConfig.SyncEnable = DISABLE;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	721a      	strb	r2, [r3, #8]
    pSyncConfig.EventEnable = ENABLE;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2201      	movs	r2, #1
 8000782:	725a      	strb	r2, [r3, #9]
    pSyncConfig.RequestNumber = 1;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	60da      	str	r2, [r3, #12]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 800078a:	187a      	adds	r2, r7, r1
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_ADC_MspInit+0x154>)
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fd8b 	bl	80022ac <HAL_DMAEx_ConfigMuxSync>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 800079a:	f7ff ff43 	bl	8000624 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_ADC_MspInit+0x154>)
 80007a2:	651a      	str	r2, [r3, #80]	; 0x50
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_ADC_MspInit+0x154>)
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f001 fbaa 	bl	8001f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f001 fbbc 	bl	8001f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b015      	add	sp, #84	; 0x54
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40012400 	.word	0x40012400
 80007c8:	40021000 	.word	0x40021000
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40020008 	.word	0x40020008

080007d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_TIM_PWM_MspInit+0x38>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d10d      	bne.n	8000802 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_TIM_PWM_MspInit+0x3c>)
 80007e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_TIM_PWM_MspInit+0x3c>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0109      	lsls	r1, r1, #4
 80007f0:	430a      	orrs	r2, r1
 80007f2:	641a      	str	r2, [r3, #64]	; 0x40
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_TIM_PWM_MspInit+0x3c>)
 80007f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40012c00 	.word	0x40012c00
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	240c      	movs	r4, #12
 800081e:	193b      	adds	r3, r7, r4
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f003 fc28 	bl	800407c <memset>
  if(htim->Instance==TIM1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a15      	ldr	r2, [pc, #84]	; (8000888 <HAL_TIM_MspPostInit+0x74>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d123      	bne.n	800087e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_TIM_MspPostInit+0x78>)
 8000838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_TIM_MspPostInit+0x78>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_TIM_MspPostInit+0x78>)
 8000844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	22c0      	movs	r2, #192	; 0xc0
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2202      	movs	r2, #2
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2202      	movs	r2, #2
 800086e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	187a      	adds	r2, r7, r1
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fd57 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b009      	add	sp, #36	; 0x24
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40012c00 	.word	0x40012c00
 800088c:	40021000 	.word	0x40021000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f8aa 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <ADC1_IRQHandler+0x14>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fc7a 	bl	80011c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000028 	.word	0x20000028

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e8:	f7ff fff6 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	; (8000924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	; (8000930 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000912:	f003 fb8f 	bl	8004034 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000916:	f7ff fc7f 	bl	8000218 <main>

0800091a <LoopForever>:

LoopForever:
  b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000928:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 800092c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000930:	20000140 	.word	0x20000140

08000934 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08000938 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_Init+0x3c>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Init+0x3c>)
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	0049      	lsls	r1, r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f810 	bl	8000978 <HAL_InitTick>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d003      	beq.n	8000964 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe64 	bl	8000630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_InitTick+0x88>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d02b      	beq.n	80009e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_InitTick+0x8c>)
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_InitTick+0x88>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	0019      	movs	r1, r3
 800099a:	23fa      	movs	r3, #250	; 0xfa
 800099c:	0098      	lsls	r0, r3, #2
 800099e:	f7ff fbaf 	bl	8000100 <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	0019      	movs	r1, r3
 80009a6:	0020      	movs	r0, r4
 80009a8:	f7ff fbaa 	bl	8000100 <__udivsi3>
 80009ac:	0003      	movs	r3, r0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 facf 	bl	8001f52 <HAL_SYSTICK_Config>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d112      	bne.n	80009de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d80a      	bhi.n	80009d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2301      	movs	r3, #1
 80009c2:	425b      	negs	r3, r3
 80009c4:	2200      	movs	r2, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fa9e 	bl	8001f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_InitTick+0x90>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	e00d      	b.n	80009f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	230f      	movs	r3, #15
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e008      	b.n	80009f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009de:	230f      	movs	r3, #15
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e003      	b.n	80009f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	230f      	movs	r3, #15
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b005      	add	sp, #20
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	2000013c 	.word	0x2000013c

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	2000013c 	.word	0x2000013c

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff0 	bl	8000a30 <HAL_GetTick>
 8000a50:	0003      	movs	r3, r0
 8000a52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	001a      	movs	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	f7ff ffe0 	bl	8000a30 <HAL_GetTick>
 8000a70:	0002      	movs	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000008 	.word	0x20000008

08000a8c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	fe3fffff 	.word	0xfe3fffff

08000ab4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	23e0      	movs	r3, #224	; 0xe0
 8000ac2:	045b      	lsls	r3, r3, #17
 8000ac4:	4013      	ands	r3, r2
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}

08000ace <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	2107      	movs	r1, #7
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	000a      	movs	r2, r1
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	401a      	ands	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2104      	movs	r1, #4
 8000af2:	400b      	ands	r3, r1
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	4099      	lsls	r1, r3
 8000af8:	000b      	movs	r3, r1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b004      	add	sp, #16
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	2104      	movs	r1, #4
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	4091      	lsls	r1, r2
 8000b20:	000a      	movs	r2, r1
 8000b22:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2104      	movs	r1, #4
 8000b28:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000b2a:	40da      	lsrs	r2, r3
 8000b2c:	0013      	movs	r3, r2
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	23c0      	movs	r3, #192	; 0xc0
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4013      	ands	r3, r2
 8000b48:	d101      	bne.n	8000b4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	211f      	movs	r1, #31
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	210f      	movs	r1, #15
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	0e9b      	lsrs	r3, r3, #26
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	4019      	ands	r1, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	201f      	movs	r0, #31
 8000b84:	4003      	ands	r3, r0
 8000b86:	4099      	lsls	r1, r3
 8000b88:	000b      	movs	r3, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b004      	add	sp, #16
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	035b      	lsls	r3, r3, #13
 8000baa:	0b5b      	lsrs	r3, r3, #13
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	0352      	lsls	r2, r2, #13
 8000bcc:	0b52      	lsrs	r2, r2, #13
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4013      	ands	r3, r2
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	0212      	lsls	r2, r2, #8
 8000c0c:	43d2      	mvns	r2, r2
 8000c0e:	401a      	ands	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	400b      	ands	r3, r1
 8000c18:	4904      	ldr	r1, [pc, #16]	; (8000c2c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	07ffff00 	.word	0x07ffff00

08000c30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <LL_ADC_EnableInternalRegulator+0x24>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	0552      	lsls	r2, r2, #21
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	6fffffe8 	.word	0x6fffffe8

08000c58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	055b      	lsls	r3, r3, #21
 8000c68:	401a      	ands	r2, r3
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	055b      	lsls	r3, r3, #21
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d101      	bne.n	8000c76 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <LL_ADC_Enable+0x20>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	7fffffe8 	.word	0x7fffffe8

08000ca4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <LL_ADC_Disable+0x20>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	7fffffe8 	.word	0x7fffffe8

08000cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <LL_ADC_IsEnabled+0x18>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <LL_ADC_IsEnabled+0x1a>
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d101      	bne.n	8000d02 <LL_ADC_IsDisableOngoing+0x18>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <LL_ADC_IsDisableOngoing+0x1a>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <LL_ADC_REG_StartConversion+0x20>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	7fffffe8 	.word	0x7fffffe8

08000d30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d101      	bne.n	8000d48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5c:	231f      	movs	r3, #31
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e17f      	b.n	800107a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10a      	bne.n	8000d98 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fc77 	bl	8000678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2254      	movs	r2, #84	; 0x54
 8000d94:	2100      	movs	r1, #0
 8000d96:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ff5b 	bl	8000c58 <LL_ADC_IsInternalRegulatorEnabled>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff ff40 	bl	8000c30 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000db0:	4bb4      	ldr	r3, [pc, #720]	; (8001084 <HAL_ADC_Init+0x330>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	49b4      	ldr	r1, [pc, #720]	; (8001088 <HAL_ADC_Init+0x334>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff f9a2 	bl	8000100 <__udivsi3>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dc4:	e002      	b.n	8000dcc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f9      	bne.n	8000dc6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ff3e 	bl	8000c58 <LL_ADC_IsInternalRegulatorEnabled>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d10f      	bne.n	8000e00 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	2210      	movs	r2, #16
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df0:	2201      	movs	r2, #1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000df8:	231f      	movs	r3, #31
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff93 	bl	8000d30 <LL_ADC_REG_IsConversionOngoing>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	2210      	movs	r2, #16
 8000e14:	4013      	ands	r3, r2
 8000e16:	d000      	beq.n	8000e1a <HAL_ADC_Init+0xc6>
 8000e18:	e122      	b.n	8001060 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d000      	beq.n	8000e22 <HAL_ADC_Init+0xce>
 8000e20:	e11e      	b.n	8001060 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a99      	ldr	r2, [pc, #612]	; (800108c <HAL_ADC_Init+0x338>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff46 	bl	8000cc8 <LL_ADC_IsEnabled>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d000      	beq.n	8000e42 <HAL_ADC_Init+0xee>
 8000e40:	e0ad      	b.n	8000f9e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7e1b      	ldrb	r3, [r3, #24]
 8000e4a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e4c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7e5b      	ldrb	r3, [r3, #25]
 8000e52:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e54:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e9b      	ldrb	r3, [r3, #26]
 8000e5a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e5c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_ADC_Init+0x118>
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	015b      	lsls	r3, r3, #5
 8000e6a:	e000      	b.n	8000e6e <HAL_ADC_Init+0x11a>
 8000e6c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e6e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e74:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da04      	bge.n	8000e88 <HAL_ADC_Init+0x134>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	085b      	lsrs	r3, r3, #1
 8000e86:	e001      	b.n	8000e8c <HAL_ADC_Init+0x138>
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000e8c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	212c      	movs	r1, #44	; 0x2c
 8000e92:	5c5b      	ldrb	r3, [r3, r1]
 8000e94:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e96:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	5c9b      	ldrb	r3, [r3, r2]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d115      	bne.n	8000ed4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7e9b      	ldrb	r3, [r3, #26]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0252      	lsls	r2, r2, #9
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	e00b      	b.n	8000ed4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ecc:	2201      	movs	r2, #1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00a      	beq.n	8000ef2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee0:	23e0      	movs	r3, #224	; 0xe0
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000eea:	4313      	orrs	r3, r2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_ADC_Init+0x33c>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	0019      	movs	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	0f9b      	lsrs	r3, r3, #30
 8000f0e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f14:	4313      	orrs	r3, r2
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	223c      	movs	r2, #60	; 0x3c
 8000f20:	5c9b      	ldrb	r3, [r3, r2]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d111      	bne.n	8000f4a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	0f9b      	lsrs	r3, r3, #30
 8000f2c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f32:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f38:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f3e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	2201      	movs	r2, #1
 8000f46:	4313      	orrs	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_ADC_Init+0x340>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	061b      	lsls	r3, r3, #24
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d018      	beq.n	8000f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d012      	beq.n	8000f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	061b      	lsls	r3, r3, #24
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d00c      	beq.n	8000f9e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f84:	4b44      	ldr	r3, [pc, #272]	; (8001098 <HAL_ADC_Init+0x344>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a44      	ldr	r2, [pc, #272]	; (800109c <HAL_ADC_Init+0x348>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	23f0      	movs	r3, #240	; 0xf0
 8000f94:	039b      	lsls	r3, r3, #14
 8000f96:	401a      	ands	r2, r3
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <HAL_ADC_Init+0x344>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f7ff fd90 	bl	8000ace <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb6:	493a      	ldr	r1, [pc, #232]	; (80010a0 <HAL_ADC_Init+0x34c>)
 8000fb8:	001a      	movs	r2, r3
 8000fba:	f7ff fd88 	bl	8000ace <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	4249      	negs	r1, r1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8000fd8:	e018      	b.n	800100c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	039b      	lsls	r3, r3, #14
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d112      	bne.n	800100c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	221c      	movs	r2, #28
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0011      	movs	r1, r2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2100      	movs	r1, #0
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff fd78 	bl	8000b08 <LL_ADC_GetSamplingTimeCommonChannels>
 8001018:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800101e:	429a      	cmp	r2, r3
 8001020:	d10b      	bne.n	800103a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	2203      	movs	r2, #3
 800102e:	4393      	bics	r3, r2
 8001030:	2201      	movs	r2, #1
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001038:	e01c      	b.n	8001074 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	2212      	movs	r2, #18
 8001040:	4393      	bics	r3, r2
 8001042:	2210      	movs	r2, #16
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104e:	2201      	movs	r2, #1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001056:	231f      	movs	r3, #31
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800105e:	e009      	b.n	8001074 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	2210      	movs	r2, #16
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800106c:	231f      	movs	r3, #31
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001074:	231f      	movs	r3, #31
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b008      	add	sp, #32
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000000 	.word	0x20000000
 8001088:	00030d40 	.word	0x00030d40
 800108c:	fffffefd 	.word	0xfffffefd
 8001090:	fffe0201 	.word	0xfffe0201
 8001094:	1ffffc02 	.word	0x1ffffc02
 8001098:	40012708 	.word	0x40012708
 800109c:	ffc3ffff 	.word	0xffc3ffff
 80010a0:	07ffff04 	.word	0x07ffff04

080010a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fe3b 	bl	8000d30 <LL_ADC_REG_IsConversionOngoing>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d16c      	bne.n	8001198 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2254      	movs	r2, #84	; 0x54
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_ADC_Start_DMA+0x28>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e06c      	b.n	80011a6 <HAL_ADC_Start_DMA+0x102>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2254      	movs	r2, #84	; 0x54
 80010d0:	2101      	movs	r1, #1
 80010d2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	d113      	bne.n	8001108 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff fdef 	bl	8000cc8 <LL_ADC_IsEnabled>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d004      	beq.n	80010f8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff fdd6 	bl	8000ca4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2101      	movs	r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001108:	2517      	movs	r5, #23
 800110a:	197c      	adds	r4, r7, r5
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fb66 	bl	80017e0 <ADC_Enable>
 8001114:	0003      	movs	r3, r0
 8001116:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001118:	002c      	movs	r4, r5
 800111a:	193b      	adds	r3, r7, r4
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d13e      	bne.n	80011a0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <HAL_ADC_Start_DMA+0x10c>)
 8001128:	4013      	ands	r3, r2
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_ADC_Start_DMA+0x110>)
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_ADC_Start_DMA+0x114>)
 8001148:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_ADC_Start_DMA+0x118>)
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	221c      	movs	r2, #28
 8001158:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2254      	movs	r2, #84	; 0x54
 800115e:	2100      	movs	r1, #0
 8001160:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2110      	movs	r1, #16
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3340      	adds	r3, #64	; 0x40
 800117c:	0019      	movs	r1, r3
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	193c      	adds	r4, r7, r4
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f000 ff7c 	bl	8002080 <HAL_DMA_Start_IT>
 8001188:	0003      	movs	r3, r0
 800118a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fdbb 	bl	8000d0c <LL_ADC_REG_StartConversion>
 8001196:	e003      	b.n	80011a0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001198:	2317      	movs	r3, #23
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80011a0:	2317      	movs	r3, #23
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b006      	add	sp, #24
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	fffff0fe 	.word	0xfffff0fe
 80011b4:	080019a9 	.word	0x080019a9
 80011b8:	08001a71 	.word	0x08001a71
 80011bc:	08001a8f 	.word	0x08001a8f

080011c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d017      	beq.n	8001214 <HAL_ADC_IRQHandler+0x54>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d013      	beq.n	8001214 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	2210      	movs	r2, #16
 80011f2:	4013      	ands	r3, r2
 80011f4:	d106      	bne.n	8001204 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fdc2 	bl	8001d90 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2202      	movs	r2, #2
 8001212:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2204      	movs	r2, #4
 8001218:	4013      	ands	r3, r2
 800121a:	d003      	beq.n	8001224 <HAL_ADC_IRQHandler+0x64>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2204      	movs	r2, #4
 8001220:	4013      	ands	r3, r2
 8001222:	d107      	bne.n	8001234 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2208      	movs	r2, #8
 8001228:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800122a:	d04d      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2208      	movs	r2, #8
 8001230:	4013      	ands	r3, r2
 8001232:	d049      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	2210      	movs	r2, #16
 800123a:	4013      	ands	r3, r2
 800123c:	d106      	bne.n	800124c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fc70 	bl	8000b36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d02e      	beq.n	80012b8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7e9b      	ldrb	r3, [r3, #26]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d12a      	bne.n	80012b8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	2b08      	cmp	r3, #8
 800126e:	d123      	bne.n	80012b8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff fd5b 	bl	8000d30 <LL_ADC_REG_IsConversionOngoing>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d110      	bne.n	80012a0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	210c      	movs	r1, #12
 800128a:	438a      	bics	r2, r1
 800128c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_ADC_IRQHandler+0x22c>)
 8001294:	4013      	ands	r3, r2
 8001296:	2201      	movs	r2, #1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	659a      	str	r2, [r3, #88]	; 0x58
 800129e:	e00b      	b.n	80012b8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	2220      	movs	r2, #32
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	2201      	movs	r2, #1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f898 	bl	80013f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	220c      	movs	r2, #12
 80012c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	4013      	ands	r3, r2
 80012ce:	d012      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x136>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	4013      	ands	r3, r2
 80012d6:	d00e      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	0252      	lsls	r2, r2, #9
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 f891 	bl	8001410 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d014      	beq.n	800132a <HAL_ADC_IRQHandler+0x16a>
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4013      	ands	r3, r2
 8001308:	d00f      	beq.n	800132a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	0292      	lsls	r2, r2, #10
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fd28 	bl	8001d70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0052      	lsls	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d014      	beq.n	800135e <HAL_ADC_IRQHandler+0x19e>
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d00f      	beq.n	800135e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	02d2      	lsls	r2, r2, #11
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fd16 	bl	8001d80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2210      	movs	r2, #16
 8001362:	4013      	ands	r3, r2
 8001364:	d02b      	beq.n	80013be <HAL_ADC_IRQHandler+0x1fe>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2210      	movs	r2, #16
 800136a:	4013      	ands	r3, r2
 800136c:	d027      	beq.n	80013be <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e008      	b.n	800138e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fc2c 	bl	8000bde <LL_ADC_REG_GetDMATransfer>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d110      	bne.n	80013b6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2202      	movs	r2, #2
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 f835 	bl	8001420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2210      	movs	r2, #16
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	019b      	lsls	r3, r3, #6
 80013c4:	4013      	ands	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x224>
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	019b      	lsls	r3, r3, #6
 80013ce:	4013      	ands	r3, r2
 80013d0:	d008      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 fce3 	bl	8001da0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	0192      	lsls	r2, r2, #6
 80013e2:	601a      	str	r2, [r3, #0]
  }
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b006      	add	sp, #24
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	fffffefe 	.word	0xfffffefe

080013f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143a:	2317      	movs	r3, #23
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2254      	movs	r2, #84	; 0x54
 800144a:	5c9b      	ldrb	r3, [r3, r2]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x24>
 8001450:	2302      	movs	r3, #2
 8001452:	e1c0      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x3a6>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2254      	movs	r2, #84	; 0x54
 8001458:	2101      	movs	r1, #1
 800145a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fc65 	bl	8000d30 <LL_ADC_REG_IsConversionOngoing>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d000      	beq.n	800146c <HAL_ADC_ConfigChannel+0x3c>
 800146a:	e1a3      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d100      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x46>
 8001474:	e143      	b.n	80016fe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	429a      	cmp	r2, r3
 8001480:	d004      	beq.n	800148c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001486:	4ac1      	ldr	r2, [pc, #772]	; (800178c <HAL_ADC_ConfigChannel+0x35c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d108      	bne.n	800149e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0019      	movs	r1, r3
 8001496:	0010      	movs	r0, r2
 8001498:	f7ff fb7e 	bl	8000b98 <LL_ADC_REG_SetSequencerChAdd>
 800149c:	e0c9      	b.n	8001632 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	211f      	movs	r1, #31
 80014a8:	400b      	ands	r3, r1
 80014aa:	210f      	movs	r1, #15
 80014ac:	4099      	lsls	r1, r3
 80014ae:	000b      	movs	r3, r1
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4013      	ands	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	035b      	lsls	r3, r3, #13
 80014bc:	0b5b      	lsrs	r3, r3, #13
 80014be:	d105      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x9c>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0e9b      	lsrs	r3, r3, #26
 80014c6:	221f      	movs	r2, #31
 80014c8:	4013      	ands	r3, r2
 80014ca:	e098      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	d000      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0xa8>
 80014d6:	e091      	b.n	80015fc <HAL_ADC_ConfigChannel+0x1cc>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d000      	beq.n	80014e4 <HAL_ADC_ConfigChannel+0xb4>
 80014e2:	e089      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x1c8>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	d000      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0xc0>
 80014ee:	e081      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x1c4>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2208      	movs	r2, #8
 80014f6:	4013      	ands	r3, r2
 80014f8:	d000      	beq.n	80014fc <HAL_ADC_ConfigChannel+0xcc>
 80014fa:	e079      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x1c0>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2210      	movs	r2, #16
 8001502:	4013      	ands	r3, r2
 8001504:	d000      	beq.n	8001508 <HAL_ADC_ConfigChannel+0xd8>
 8001506:	e071      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1bc>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2220      	movs	r2, #32
 800150e:	4013      	ands	r3, r2
 8001510:	d000      	beq.n	8001514 <HAL_ADC_ConfigChannel+0xe4>
 8001512:	e069      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1b8>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	4013      	ands	r3, r2
 800151c:	d000      	beq.n	8001520 <HAL_ADC_ConfigChannel+0xf0>
 800151e:	e061      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x1b4>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	4013      	ands	r3, r2
 8001528:	d000      	beq.n	800152c <HAL_ADC_ConfigChannel+0xfc>
 800152a:	e059      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1b0>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4013      	ands	r3, r2
 8001536:	d151      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1ac>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d149      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1a8>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4013      	ands	r3, r2
 800154e:	d141      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1a4>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4013      	ands	r3, r2
 800155a:	d139      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1a0>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	015b      	lsls	r3, r3, #5
 8001564:	4013      	ands	r3, r2
 8001566:	d131      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x19c>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	4013      	ands	r3, r2
 8001572:	d129      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x198>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	01db      	lsls	r3, r3, #7
 800157c:	4013      	ands	r3, r2
 800157e:	d121      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x194>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	4013      	ands	r3, r2
 800158a:	d119      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x190>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4013      	ands	r3, r2
 8001596:	d111      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x18c>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x188>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	02db      	lsls	r3, r3, #11
 80015ac:	4013      	ands	r3, r2
 80015ae:	d001      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x184>
 80015b0:	2312      	movs	r3, #18
 80015b2:	e024      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e022      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015b8:	2311      	movs	r3, #17
 80015ba:	e020      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015bc:	2310      	movs	r3, #16
 80015be:	e01e      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015c0:	230f      	movs	r3, #15
 80015c2:	e01c      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015c4:	230e      	movs	r3, #14
 80015c6:	e01a      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015c8:	230d      	movs	r3, #13
 80015ca:	e018      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015cc:	230c      	movs	r3, #12
 80015ce:	e016      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015d0:	230b      	movs	r3, #11
 80015d2:	e014      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015d4:	230a      	movs	r3, #10
 80015d6:	e012      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015d8:	2309      	movs	r3, #9
 80015da:	e010      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015dc:	2308      	movs	r3, #8
 80015de:	e00e      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015e0:	2307      	movs	r3, #7
 80015e2:	e00c      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015e4:	2306      	movs	r3, #6
 80015e6:	e00a      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	2305      	movs	r3, #5
 80015ea:	e008      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e006      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015f0:	2303      	movs	r3, #3
 80015f2:	e004      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ce>
 80015fc:	2300      	movs	r3, #0
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	6852      	ldr	r2, [r2, #4]
 8001602:	201f      	movs	r0, #31
 8001604:	4002      	ands	r2, r0
 8001606:	4093      	lsls	r3, r2
 8001608:	000a      	movs	r2, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	d808      	bhi.n	8001632 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	001a      	movs	r2, r3
 800162e:	f7ff fa93 	bl	8000b58 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	001a      	movs	r2, r3
 8001640:	f7ff fada 	bl	8000bf8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db00      	blt.n	800164e <HAL_ADC_ConfigChannel+0x21e>
 800164c:	e0bc      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800164e:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fa2f 	bl	8000ab4 <LL_ADC_GetCommonPathInternalCh>
 8001656:	0003      	movs	r3, r0
 8001658:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a4d      	ldr	r2, [pc, #308]	; (8001794 <HAL_ADC_ConfigChannel+0x364>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d122      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800166c:	d11d      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0412      	lsls	r2, r2, #16
 8001674:	4313      	orrs	r3, r2
 8001676:	4a46      	ldr	r2, [pc, #280]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 8001678:	0019      	movs	r1, r3
 800167a:	0010      	movs	r0, r2
 800167c:	f7ff fa06 	bl	8000a8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_ADC_ConfigChannel+0x368>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4945      	ldr	r1, [pc, #276]	; (800179c <HAL_ADC_ConfigChannel+0x36c>)
 8001686:	0018      	movs	r0, r3
 8001688:	f7fe fd3a 	bl	8000100 <__udivsi3>
 800168c:	0003      	movs	r3, r0
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	0013      	movs	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	189b      	adds	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800169a:	e002      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3b01      	subs	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f9      	bne.n	800169c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a8:	e08e      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <HAL_ADC_ConfigChannel+0x370>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d10e      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	045b      	lsls	r3, r3, #17
 80016ba:	4013      	ands	r3, r2
 80016bc:	d109      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0452      	lsls	r2, r2, #17
 80016c4:	4313      	orrs	r3, r2
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 80016c8:	0019      	movs	r1, r3
 80016ca:	0010      	movs	r0, r2
 80016cc:	f7ff f9de 	bl	8000a8c <LL_ADC_SetCommonPathInternalCh>
 80016d0:	e07a      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <HAL_ADC_ConfigChannel+0x374>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d000      	beq.n	80016de <HAL_ADC_ConfigChannel+0x2ae>
 80016dc:	e074      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	03db      	lsls	r3, r3, #15
 80016e4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016e6:	d000      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x2ba>
 80016e8:	e06e      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	03d2      	lsls	r2, r2, #15
 80016f0:	4313      	orrs	r3, r2
 80016f2:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 80016f4:	0019      	movs	r1, r3
 80016f6:	0010      	movs	r0, r2
 80016f8:	f7ff f9c8 	bl	8000a8c <LL_ADC_SetCommonPathInternalCh>
 80016fc:	e064      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	429a      	cmp	r2, r3
 8001708:	d004      	beq.n	8001714 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800170e:	4a1f      	ldr	r2, [pc, #124]	; (800178c <HAL_ADC_ConfigChannel+0x35c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d107      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0019      	movs	r1, r3
 800171e:	0010      	movs	r0, r2
 8001720:	f7ff fa4b 	bl	8000bba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da4d      	bge.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff f9c0 	bl	8000ab4 <LL_ADC_GetCommonPathInternalCh>
 8001734:	0003      	movs	r3, r0
 8001736:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_ADC_ConfigChannel+0x364>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d108      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_ADC_ConfigChannel+0x378>)
 8001746:	4013      	ands	r3, r2
 8001748:	4a11      	ldr	r2, [pc, #68]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 800174a:	0019      	movs	r1, r3
 800174c:	0010      	movs	r0, r2
 800174e:	f7ff f99d 	bl	8000a8c <LL_ADC_SetCommonPathInternalCh>
 8001752:	e039      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_ADC_ConfigChannel+0x370>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d108      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_ADC_ConfigChannel+0x37c>)
 8001762:	4013      	ands	r3, r2
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f7ff f98f 	bl	8000a8c <LL_ADC_SetCommonPathInternalCh>
 800176e:	e02b      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_ADC_ConfigChannel+0x374>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d126      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_ADC_ConfigChannel+0x380>)
 800177e:	4013      	ands	r3, r2
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <HAL_ADC_ConfigChannel+0x360>)
 8001782:	0019      	movs	r1, r3
 8001784:	0010      	movs	r0, r2
 8001786:	f7ff f981 	bl	8000a8c <LL_ADC_SetCommonPathInternalCh>
 800178a:	e01d      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x398>
 800178c:	80000004 	.word	0x80000004
 8001790:	40012708 	.word	0x40012708
 8001794:	b0001000 	.word	0xb0001000
 8001798:	20000000 	.word	0x20000000
 800179c:	00030d40 	.word	0x00030d40
 80017a0:	b8004000 	.word	0xb8004000
 80017a4:	b4002000 	.word	0xb4002000
 80017a8:	ff7fffff 	.word	0xff7fffff
 80017ac:	feffffff 	.word	0xfeffffff
 80017b0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	2220      	movs	r2, #32
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017c0:	2317      	movs	r3, #23
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2254      	movs	r2, #84	; 0x54
 80017cc:	2100      	movs	r1, #0
 80017ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017d0:	2317      	movs	r3, #23
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b006      	add	sp, #24
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)

080017e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff fa69 	bl	8000cc8 <LL_ADC_IsEnabled>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d000      	beq.n	80017fc <ADC_Enable+0x1c>
 80017fa:	e069      	b.n	80018d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4a36      	ldr	r2, [pc, #216]	; (80018dc <ADC_Enable+0xfc>)
 8001804:	4013      	ands	r3, r2
 8001806:	d00d      	beq.n	8001824 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	2210      	movs	r2, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2201      	movs	r2, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e056      	b.n	80018d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff fa29 	bl	8000c80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <ADC_Enable+0x100>)
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff f93f 	bl	8000ab4 <LL_ADC_GetCommonPathInternalCh>
 8001836:	0002      	movs	r2, r0
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	4013      	ands	r3, r2
 800183e:	d00f      	beq.n	8001860 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <ADC_Enable+0x104>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4928      	ldr	r1, [pc, #160]	; (80018e8 <ADC_Enable+0x108>)
 8001846:	0018      	movs	r0, r3
 8001848:	f7fe fc5a 	bl	8000100 <__udivsi3>
 800184c:	0003      	movs	r3, r0
 800184e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001850:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001852:	e002      	b.n	800185a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	3b01      	subs	r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7e5b      	ldrb	r3, [r3, #25]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d033      	beq.n	80018d0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001868:	f7ff f8e2 	bl	8000a30 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001870:	e027      	b.n	80018c2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff fa26 	bl	8000cc8 <LL_ADC_IsEnabled>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d104      	bne.n	800188a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff f9fb 	bl	8000c80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800188a:	f7ff f8d1 	bl	8000a30 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d914      	bls.n	80018c2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d00d      	beq.n	80018c2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	2210      	movs	r2, #16
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2201      	movs	r2, #1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e007      	b.n	80018d2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d1d0      	bne.n	8001872 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	80000017 	.word	0x80000017
 80018e0:	40012708 	.word	0x40012708
 80018e4:	20000000 	.word	0x20000000
 80018e8:	00030d40 	.word	0x00030d40

080018ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff f9f6 	bl	8000cea <LL_ADC_IsDisableOngoing>
 80018fe:	0003      	movs	r3, r0
 8001900:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0018      	movs	r0, r3
 8001908:	f7ff f9de 	bl	8000cc8 <LL_ADC_IsEnabled>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d046      	beq.n	800199e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d143      	bne.n	800199e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2205      	movs	r2, #5
 800191e:	4013      	ands	r3, r2
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10d      	bne.n	8001940 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff f9bb 	bl	8000ca4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2203      	movs	r2, #3
 8001934:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001936:	f7ff f87b 	bl	8000a30 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800193e:	e028      	b.n	8001992 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	2210      	movs	r2, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2201      	movs	r2, #1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e021      	b.n	80019a0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800195c:	f7ff f868 	bl	8000a30 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d913      	bls.n	8001992 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	d00d      	beq.n	8001992 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	2210      	movs	r2, #16
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2201      	movs	r2, #1
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e006      	b.n	80019a0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	d1de      	bne.n	800195c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	2250      	movs	r2, #80	; 0x50
 80019bc:	4013      	ands	r3, r2
 80019be:	d141      	bne.n	8001a44 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7ff f8af 	bl	8000b36 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d02e      	beq.n	8001a3a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	7e9b      	ldrb	r3, [r3, #26]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d12a      	bne.n	8001a3a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2208      	movs	r2, #8
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d123      	bne.n	8001a3a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff f99a 	bl	8000d30 <LL_ADC_REG_IsConversionOngoing>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d110      	bne.n	8001a22 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	210c      	movs	r1, #12
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <ADC_DMAConvCplt+0xc4>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	2201      	movs	r2, #1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a20:	e00b      	b.n	8001a3a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	2220      	movs	r2, #32
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2201      	movs	r2, #1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fcd7 	bl	80013f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a42:	e00f      	b.n	8001a64 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fce5 	bl	8001420 <HAL_ADC_ErrorCallback>
}
 8001a56:	e005      	b.n	8001a64 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	0010      	movs	r0, r2
 8001a62:	4798      	blx	r3
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b004      	add	sp, #16
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	fffffefe 	.word	0xfffffefe

08001a70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff fcbd 	bl	8001400 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2204      	movs	r2, #4
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff fcb2 	bl	8001420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <LL_ADC_SetCalibrationFactor>:
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	22b4      	movs	r2, #180	; 0xb4
 8001ad2:	589b      	ldr	r3, [r3, r2]
 8001ad4:	227f      	movs	r2, #127	; 0x7f
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	001a      	movs	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	21b4      	movs	r1, #180	; 0xb4
 8001ae2:	505a      	str	r2, [r3, r1]
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <LL_ADC_GetCalibrationFactor>:
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	22b4      	movs	r2, #180	; 0xb4
 8001af8:	589b      	ldr	r3, [r3, r2]
 8001afa:	227f      	movs	r2, #127	; 0x7f
 8001afc:	4013      	ands	r3, r2
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <LL_ADC_Enable>:
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <LL_ADC_Enable+0x20>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	2201      	movs	r2, #1
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	7fffffe8 	.word	0x7fffffe8

08001b2c <LL_ADC_Disable>:
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <LL_ADC_Disable+0x20>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b002      	add	sp, #8
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	7fffffe8 	.word	0x7fffffe8

08001b50 <LL_ADC_IsEnabled>:
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <LL_ADC_IsEnabled+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_ADC_IsEnabled+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <LL_ADC_StartCalibration>:
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <LL_ADC_StartCalibration+0x24>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	0612      	lsls	r2, r2, #24
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	7fffffe8 	.word	0x7fffffe8

08001b9c <LL_ADC_IsCalibrationOnGoing>:
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	0fdb      	lsrs	r3, r3, #31
 8001baa:	07da      	lsls	r2, r3, #31
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2254      	movs	r2, #84	; 0x54
 8001bd8:	5c9b      	ldrb	r3, [r3, r2]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e0ba      	b.n	8001d58 <HAL_ADCEx_Calibration_Start+0x194>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2254      	movs	r2, #84	; 0x54
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001bea:	2317      	movs	r3, #23
 8001bec:	18fc      	adds	r4, r7, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fe7b 	bl	80018ec <ADC_Disable>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ffa6 	bl	8001b50 <LL_ADC_IsEnabled>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d000      	beq.n	8001c0a <HAL_ADCEx_Calibration_Start+0x46>
 8001c08:	e099      	b.n	8001d3e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a54      	ldr	r2, [pc, #336]	; (8001d60 <HAL_ADCEx_Calibration_Start+0x19c>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	2202      	movs	r2, #2
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a50      	ldr	r2, [pc, #320]	; (8001d64 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	e02d      	b.n	8001c98 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff ff97 	bl	8001b74 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c46:	e014      	b.n	8001c72 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <HAL_ADCEx_Calibration_Start+0x1a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d90d      	bls.n	8001c72 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	2212      	movs	r2, #18
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	2210      	movs	r2, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2254      	movs	r2, #84	; 0x54
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e072      	b.n	8001d58 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff ff90 	bl	8001b9c <LL_ADC_IsCalibrationOnGoing>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d1e3      	bne.n	8001c48 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <LL_ADC_GetCalibrationFactor>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9ce      	bls.n	8001c3c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001c9e:	69f9      	ldr	r1, [r7, #28]
 8001ca0:	69b8      	ldr	r0, [r7, #24]
 8001ca2:	f7fe fa2d 	bl	8000100 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7ff ff2a 	bl	8001b08 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ff01 	bl	8001ac4 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff ff30 	bl	8001b2c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ccc:	f7fe feb0 	bl	8000a30 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001cd4:	e01b      	b.n	8001d0e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cd6:	f7fe feab 	bl	8000a30 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d914      	bls.n	8001d0e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <LL_ADC_IsEnabled>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d00d      	beq.n	8001d0e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e024      	b.n	8001d58 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff ff1c 	bl	8001b50 <LL_ADC_IsEnabled>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d1dc      	bne.n	8001cd6 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	2203      	movs	r2, #3
 8001d32:	4393      	bics	r3, r2
 8001d34:	2201      	movs	r2, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d3c:	e005      	b.n	8001d4a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	2210      	movs	r2, #16
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2254      	movs	r2, #84	; 0x54
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d52:	2317      	movs	r3, #23
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b009      	add	sp, #36	; 0x24
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	fffffefd 	.word	0xfffffefd
 8001d64:	00008003 	.word	0x00008003
 8001d68:	ffff7ffc 	.word	0xffff7ffc
 8001d6c:	0002f1ff 	.word	0x0002f1ff

08001d70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	0002      	movs	r2, r0
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc2:	d809      	bhi.n	8001dd8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	001a      	movs	r2, r3
 8001dca:	231f      	movs	r3, #31
 8001dcc:	401a      	ands	r2, r3
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_EnableIRQ+0x30>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4091      	lsls	r1, r2
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	0002      	movs	r2, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b7f      	cmp	r3, #127	; 0x7f
 8001df8:	d828      	bhi.n	8001e4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <__NVIC_SetPriority+0xd4>)
 8001dfc:	1dfb      	adds	r3, r7, #7
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	33c0      	adds	r3, #192	; 0xc0
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	589b      	ldr	r3, [r3, r2]
 8001e0a:	1dfa      	adds	r2, r7, #7
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	0011      	movs	r1, r2
 8001e10:	2203      	movs	r2, #3
 8001e12:	400a      	ands	r2, r1
 8001e14:	00d2      	lsls	r2, r2, #3
 8001e16:	21ff      	movs	r1, #255	; 0xff
 8001e18:	4091      	lsls	r1, r2
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	43d2      	mvns	r2, r2
 8001e1e:	401a      	ands	r2, r3
 8001e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	22ff      	movs	r2, #255	; 0xff
 8001e28:	401a      	ands	r2, r3
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	2303      	movs	r3, #3
 8001e32:	4003      	ands	r3, r0
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e38:	481f      	ldr	r0, [pc, #124]	; (8001eb8 <__NVIC_SetPriority+0xd4>)
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	430a      	orrs	r2, r1
 8001e44:	33c0      	adds	r3, #192	; 0xc0
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e4a:	e031      	b.n	8001eb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <__NVIC_SetPriority+0xd8>)
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	0019      	movs	r1, r3
 8001e54:	230f      	movs	r3, #15
 8001e56:	400b      	ands	r3, r1
 8001e58:	3b08      	subs	r3, #8
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	18d3      	adds	r3, r2, r3
 8001e62:	3304      	adds	r3, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1dfa      	adds	r2, r7, #7
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	400a      	ands	r2, r1
 8001e70:	00d2      	lsls	r2, r2, #3
 8001e72:	21ff      	movs	r1, #255	; 0xff
 8001e74:	4091      	lsls	r1, r2
 8001e76:	000a      	movs	r2, r1
 8001e78:	43d2      	mvns	r2, r2
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	019b      	lsls	r3, r3, #6
 8001e82:	22ff      	movs	r2, #255	; 0xff
 8001e84:	401a      	ands	r2, r3
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	4003      	ands	r3, r0
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e94:	4809      	ldr	r0, [pc, #36]	; (8001ebc <__NVIC_SetPriority+0xd8>)
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	001c      	movs	r4, r3
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	4023      	ands	r3, r4
 8001ea0:	3b08      	subs	r3, #8
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	18c3      	adds	r3, r0, r3
 8001eac:	3304      	adds	r3, #4
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b003      	add	sp, #12
 8001eb6:	bd90      	pop	{r4, r7, pc}
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1e5a      	subs	r2, r3, #1
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	045b      	lsls	r3, r3, #17
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d301      	bcc.n	8001ed8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e010      	b.n	8001efa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <SysTick_Config+0x44>)
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	3a01      	subs	r2, #1
 8001ede:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff ff7c 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x44>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x44>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b002      	add	sp, #8
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	210f      	movs	r1, #15
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	1c02      	adds	r2, r0, #0
 8001f18:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	0011      	movs	r1, r2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	0002      	movs	r2, r0
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3e:	1dfb      	adds	r3, r7, #7
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b25b      	sxtb	r3, r3
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff ff33 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff ffaf 	bl	8001ec0 <SysTick_Config>
 8001f62:	0003      	movs	r3, r0
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e077      	b.n	800206e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_DMA_Init+0x10c>)
 8001f84:	4694      	mov	ip, r2
 8001f86:	4463      	add	r3, ip
 8001f88:	2114      	movs	r1, #20
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7fe f8b8 	bl	8000100 <__udivsi3>
 8001f90:	0003      	movs	r3, r0
 8001f92:	009a      	lsls	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2225      	movs	r2, #37	; 0x25
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4934      	ldr	r1, [pc, #208]	; (800207c <HAL_DMA_Init+0x110>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 f90f 	bl	800220c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	01db      	lsls	r3, r3, #7
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d102      	bne.n	8002000 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	213f      	movs	r1, #63	; 0x3f
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002016:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d011      	beq.n	8002044 <HAL_DMA_Init+0xd8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d80d      	bhi.n	8002044 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 f91a 	bl	8002264 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e008      	b.n	8002056 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2225      	movs	r2, #37	; 0x25
 8002060:	2101      	movs	r1, #1
 8002062:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	; 0x24
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	bffdfff8 	.word	0xbffdfff8
 800207c:	ffff800f 	.word	0xffff800f

08002080 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2317      	movs	r3, #23
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2224      	movs	r2, #36	; 0x24
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_DMA_Start_IT+0x24>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e06f      	b.n	8002184 <HAL_DMA_Start_IT+0x104>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2225      	movs	r2, #37	; 0x25
 80020b0:	5c9b      	ldrb	r3, [r3, r2]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d157      	bne.n	8002168 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2225      	movs	r2, #37	; 0x25
 80020bc:	2102      	movs	r1, #2
 80020be:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	438a      	bics	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f855 	bl	800218c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	210e      	movs	r1, #14
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00f      	b.n	800211c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2104      	movs	r1, #4
 8002108:	438a      	bics	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	210a      	movs	r1, #10
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	4013      	ands	r3, r2
 8002128:	d008      	beq.n	800213c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0049      	lsls	r1, r1, #1
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0049      	lsls	r1, r1, #1
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e00a      	b.n	800217e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2224      	movs	r2, #36	; 0x24
 8002172:	2100      	movs	r1, #0
 8002174:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002176:	2317      	movs	r3, #23
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}

0800218c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021b4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <DMA_SetConfig+0x7c>)
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	221c      	movs	r2, #28
 80021c0:	4013      	ands	r3, r2
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <DMA_SetConfig+0x7c>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d108      	bne.n	80021ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021ec:	e007      	b.n	80021fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	60da      	str	r2, [r3, #12]
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b004      	add	sp, #16
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	40020000 	.word	0x40020000

0800220c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800221c:	4694      	mov	ip, r2
 800221e:	4463      	add	r3, ip
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	001a      	movs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	001a      	movs	r2, r3
 800222e:	23ff      	movs	r3, #255	; 0xff
 8002230:	4013      	ands	r3, r2
 8002232:	3b08      	subs	r3, #8
 8002234:	2114      	movs	r1, #20
 8002236:	0018      	movs	r0, r3
 8002238:	f7fd ff62 	bl	8000100 <__udivsi3>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002244:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	221f      	movs	r2, #31
 800224a:	4013      	ands	r3, r2
 800224c:	2201      	movs	r2, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	10008200 	.word	0x10008200
 8002260:	40020880 	.word	0x40020880

08002264 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	223f      	movs	r2, #63	; 0x3f
 8002272:	4013      	ands	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800227a:	4694      	mov	ip, r2
 800227c:	4463      	add	r3, ip
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	001a      	movs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800228a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3b01      	subs	r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	4013      	ands	r3, r2
 8002294:	2201      	movs	r2, #1
 8002296:	409a      	lsls	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b004      	add	sp, #16
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	1000823f 	.word	0x1000823f
 80022a8:	40020940 	.word	0x40020940

080022ac <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2225      	movs	r2, #37	; 0x25
 80022ba:	5c9b      	ldrb	r3, [r3, r2]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12c      	bne.n	800231c <HAL_DMAEx_ConfigMuxSync+0x70>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2224      	movs	r2, #36	; 0x24
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_DMAEx_ConfigMuxSync+0x24>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e029      	b.n	8002324 <HAL_DMAEx_ConfigMuxSync+0x78>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	; 0x24
 80022d4:	2101      	movs	r1, #1
 80022d6:	5499      	strb	r1, [r3, r2]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	223f      	movs	r2, #63	; 0x3f
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	04db      	lsls	r3, r3, #19
 80022f0:	431a      	orrs	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7a1b      	ldrb	r3, [r3, #8]
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	431a      	orrs	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	7a5b      	ldrb	r3, [r3, #9]
 8002304:	025b      	lsls	r3, r3, #9
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e003      	b.n	8002324 <HAL_DMAEx_ConfigMuxSync+0x78>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
  }
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233a:	e147      	b.n	80025cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4091      	lsls	r1, r2
 8002346:	000a      	movs	r2, r1
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d100      	bne.n	8002354 <HAL_GPIO_Init+0x28>
 8002352:	e138      	b.n	80025c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2203      	movs	r2, #3
 800235a:	4013      	ands	r3, r2
 800235c:	2b01      	cmp	r3, #1
 800235e:	d005      	beq.n	800236c <HAL_GPIO_Init+0x40>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	2b02      	cmp	r3, #2
 800236a:	d130      	bne.n	80023ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	409a      	lsls	r2, r3
 800237a:	0013      	movs	r3, r2
 800237c:	43da      	mvns	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	0013      	movs	r3, r2
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a2:	2201      	movs	r2, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	2201      	movs	r2, #1
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d017      	beq.n	800240a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2203      	movs	r2, #3
 8002410:	4013      	ands	r3, r2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d123      	bne.n	800245e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	58d3      	ldr	r3, [r2, r3]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2207      	movs	r2, #7
 8002428:	4013      	ands	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	43da      	mvns	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2107      	movs	r1, #7
 8002442:	400b      	ands	r3, r1
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	409a      	lsls	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	6939      	ldr	r1, [r7, #16]
 800245c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	401a      	ands	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	23c0      	movs	r3, #192	; 0xc0
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	4013      	ands	r3, r2
 800249c:	d100      	bne.n	80024a0 <HAL_GPIO_Init+0x174>
 800249e:	e092      	b.n	80025c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024a0:	4a50      	ldr	r2, [pc, #320]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3318      	adds	r3, #24
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	589b      	ldr	r3, [r3, r2]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4013      	ands	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	220f      	movs	r2, #15
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	43da      	mvns	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	23a0      	movs	r3, #160	; 0xa0
 80024c8:	05db      	lsls	r3, r3, #23
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x1ca>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_GPIO_Init+0x2bc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x1c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a44      	ldr	r2, [pc, #272]	; (80025ec <HAL_GPIO_Init+0x2c0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x1c2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a43      	ldr	r2, [pc, #268]	; (80025f0 <HAL_GPIO_Init+0x2c4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x1be>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x1cc>
 80024ea:	2305      	movs	r3, #5
 80024ec:	e004      	b.n	80024f8 <HAL_GPIO_Init+0x1cc>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x1cc>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x1cc>
 80024f6:	2300      	movs	r3, #0
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	2103      	movs	r1, #3
 80024fc:	400a      	ands	r2, r1
 80024fe:	00d2      	lsls	r2, r2, #3
 8002500:	4093      	lsls	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002508:	4936      	ldr	r1, [pc, #216]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3318      	adds	r3, #24
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	035b      	lsls	r3, r3, #13
 800252e:	4013      	ands	r3, r2
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43da      	mvns	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	039b      	lsls	r3, r3, #14
 8002558:	4013      	ands	r3, r2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 800256c:	2384      	movs	r3, #132	; 0x84
 800256e:	58d3      	ldr	r3, [r2, r3]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43da      	mvns	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	4013      	ands	r3, r2
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002590:	4914      	ldr	r1, [pc, #80]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 8002592:	2284      	movs	r2, #132	; 0x84
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	58d3      	ldr	r3, [r2, r3]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	025b      	lsls	r3, r3, #9
 80025b2:	4013      	ands	r3, r2
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025be:	4909      	ldr	r1, [pc, #36]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	40da      	lsrs	r2, r3
 80025d4:	1e13      	subs	r3, r2, #0
 80025d6:	d000      	beq.n	80025da <HAL_GPIO_Init+0x2ae>
 80025d8:	e6b0      	b.n	800233c <HAL_GPIO_Init+0x10>
  }
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b006      	add	sp, #24
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021800 	.word	0x40021800
 80025e8:	50000400 	.word	0x50000400
 80025ec:	50000800 	.word	0x50000800
 80025f0:	50000c00 	.word	0x50000c00

080025f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d11f      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	0013      	movs	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	189b      	adds	r3, r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002626:	0018      	movs	r0, r3
 8002628:	f7fd fd6a 	bl	8000100 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002632:	e008      	b.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3b01      	subs	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e001      	b.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e009      	b.n	800265a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	401a      	ands	r2, r3
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	429a      	cmp	r2, r3
 8002656:	d0ed      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40007000 	.word	0x40007000
 8002668:	fffff9ff 	.word	0xfffff9ff
 800266c:	20000000 	.word	0x20000000
 8002670:	000f4240 	.word	0x000f4240

08002674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e2f3      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCC_OscConfig+0x1e>
 8002690:	e07c      	b.n	800278c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4bc3      	ldr	r3, [pc, #780]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2238      	movs	r2, #56	; 0x38
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	4bc0      	ldr	r3, [pc, #768]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2203      	movs	r2, #3
 80026a2:	4013      	ands	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3e>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4bb9      	ldr	r3, [pc, #740]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	4013      	ands	r3, r2
 80026c2:	d062      	beq.n	800278a <HAL_RCC_OscConfig+0x116>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d15e      	bne.n	800278a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e2ce      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	429a      	cmp	r2, r3
 80026da:	d107      	bne.n	80026ec <HAL_RCC_OscConfig+0x78>
 80026dc:	4bb0      	ldr	r3, [pc, #704]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4baf      	ldr	r3, [pc, #700]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0249      	lsls	r1, r1, #9
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e020      	b.n	800272e <HAL_RCC_OscConfig+0xba>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	23a0      	movs	r3, #160	; 0xa0
 80026f2:	02db      	lsls	r3, r3, #11
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d10e      	bne.n	8002716 <HAL_RCC_OscConfig+0xa2>
 80026f8:	4ba9      	ldr	r3, [pc, #676]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4ba8      	ldr	r3, [pc, #672]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	02c9      	lsls	r1, r1, #11
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	4ba6      	ldr	r3, [pc, #664]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4ba5      	ldr	r3, [pc, #660]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0249      	lsls	r1, r1, #9
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e00b      	b.n	800272e <HAL_RCC_OscConfig+0xba>
 8002716:	4ba2      	ldr	r3, [pc, #648]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4ba1      	ldr	r3, [pc, #644]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800271c:	49a1      	ldr	r1, [pc, #644]	; (80029a4 <HAL_RCC_OscConfig+0x330>)
 800271e:	400a      	ands	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b9f      	ldr	r3, [pc, #636]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002728:	499f      	ldr	r1, [pc, #636]	; (80029a8 <HAL_RCC_OscConfig+0x334>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe f97b 	bl	8000a30 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe f976 	bl	8000a30 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e28d      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	4b93      	ldr	r3, [pc, #588]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xcc>
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe f966 	bl	8000a30 <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276a:	f7fe f961 	bl	8000a30 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e278      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277c:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	4013      	ands	r3, r2
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0xf6>
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d100      	bne.n	8002798 <HAL_RCC_OscConfig+0x124>
 8002796:	e099      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002798:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2238      	movs	r2, #56	; 0x38
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a2:	4b7f      	ldr	r3, [pc, #508]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2203      	movs	r2, #3
 80027a8:	4013      	ands	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_OscConfig+0x144>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d002      	beq.n	80027be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d135      	bne.n	800282a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4013      	ands	r3, r2
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x162>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e24b      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4a74      	ldr	r2, [pc, #464]	; (80029ac <HAL_RCC_OscConfig+0x338>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027f2:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x33c>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002806:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	2207      	movs	r2, #7
 800280e:	4013      	ands	r3, r2
 8002810:	4a68      	ldr	r2, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x340>)
 8002812:	40da      	lsrs	r2, r3
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x344>)
 8002816:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x348>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe f8ab 	bl	8000978 <HAL_InitTick>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d051      	beq.n	80028ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e221      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d030      	beq.n	8002894 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5e      	ldr	r2, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x33c>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002842:	430a      	orrs	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002846:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	0049      	lsls	r1, r1, #1
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe f8ec 	bl	8000a30 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe f8e7 	bl	8000a30 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1fe      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4013      	ands	r3, r2
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x338>)
 8002882:	4013      	ands	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	021a      	lsls	r2, r3, #8
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e01b      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800289a:	4949      	ldr	r1, [pc, #292]	; (80029c0 <HAL_RCC_OscConfig+0x34c>)
 800289c:	400a      	ands	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe f8c6 	bl	8000a30 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe f8c1 	bl	8000a30 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1d8      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028bc:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4013      	ands	r3, r2
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x236>
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	d047      	beq.n	8002966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028d6:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2238      	movs	r2, #56	; 0x38
 80028dc:	4013      	ands	r3, r2
 80028de:	2b18      	cmp	r3, #24
 80028e0:	d10a      	bne.n	80028f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 80028e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d03c      	beq.n	8002966 <HAL_RCC_OscConfig+0x2f2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d138      	bne.n	8002966 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e1ba      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d019      	beq.n	8002934 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe f890 	bl	8000a30 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002916:	f7fe f88b 	bl	8000a30 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1a2      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800292a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292c:	2202      	movs	r2, #2
 800292e:	4013      	ands	r3, r2
 8002930:	d0f1      	beq.n	8002916 <HAL_RCC_OscConfig+0x2a2>
 8002932:	e018      	b.n	8002966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800293a:	2101      	movs	r1, #1
 800293c:	438a      	bics	r2, r1
 800293e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe f876 	bl	8000a30 <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe f871 	bl	8000a30 <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e188      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	2202      	movs	r2, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d1f1      	bne.n	800294a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	d100      	bne.n	8002972 <HAL_RCC_OscConfig+0x2fe>
 8002970:	e0c6      	b.n	8002b00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	231f      	movs	r3, #31
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2238      	movs	r2, #56	; 0x38
 8002980:	4013      	ands	r3, r2
 8002982:	2b20      	cmp	r3, #32
 8002984:	d11e      	bne.n	80029c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_OscConfig+0x32c>)
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d100      	bne.n	8002992 <HAL_RCC_OscConfig+0x31e>
 8002990:	e0b6      	b.n	8002b00 <HAL_RCC_OscConfig+0x48c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d000      	beq.n	800299c <HAL_RCC_OscConfig+0x328>
 800299a:	e0b1      	b.n	8002b00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e166      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	fffeffff 	.word	0xfffeffff
 80029a8:	fffbffff 	.word	0xfffbffff
 80029ac:	ffff80ff 	.word	0xffff80ff
 80029b0:	ffffc7ff 	.word	0xffffc7ff
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004
 80029c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c4:	4bac      	ldr	r3, [pc, #688]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 80029c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	055b      	lsls	r3, r3, #21
 80029cc:	4013      	ands	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x360>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x362>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4ba7      	ldr	r3, [pc, #668]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 80029dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029de:	4ba6      	ldr	r3, [pc, #664]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	0549      	lsls	r1, r1, #21
 80029e4:	430a      	orrs	r2, r1
 80029e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e8:	4ba3      	ldr	r3, [pc, #652]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 80029ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	055b      	lsls	r3, r3, #21
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029f6:	231f      	movs	r3, #31
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fe:	4b9f      	ldr	r3, [pc, #636]	; (8002c7c <HAL_RCC_OscConfig+0x608>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d11a      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0a:	4b9c      	ldr	r3, [pc, #624]	; (8002c7c <HAL_RCC_OscConfig+0x608>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b9b      	ldr	r3, [pc, #620]	; (8002c7c <HAL_RCC_OscConfig+0x608>)
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	0049      	lsls	r1, r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a18:	f7fe f80a 	bl	8000a30 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe f805 	bl	8000a30 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e11c      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a34:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <HAL_RCC_OscConfig+0x608>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3e2>
 8002a48:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x41c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x404>
 8002a5e:	4b86      	ldr	r3, [pc, #536]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a62:	4b85      	ldr	r3, [pc, #532]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a64:	2104      	movs	r1, #4
 8002a66:	430a      	orrs	r2, r1
 8002a68:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a6a:	4b83      	ldr	r3, [pc, #524]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a6e:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x41c>
 8002a78:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	438a      	bics	r2, r1
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a84:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d014      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fd ffca 	bl	8000a30 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa0:	e009      	b.n	8002ab6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fd ffc5 	bl	8000a30 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	4a74      	ldr	r2, [pc, #464]	; (8002c80 <HAL_RCC_OscConfig+0x60c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0db      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x42e>
 8002ac0:	e013      	b.n	8002aea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fd ffb5 	bl	8000a30 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aca:	e009      	b.n	8002ae0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fd ffb0 	bl	8000a30 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	4a6a      	ldr	r2, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x60c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0c6      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae0:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b60      	ldr	r3, [pc, #384]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af8:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002afa:	4962      	ldr	r1, [pc, #392]	; (8002c84 <HAL_RCC_OscConfig+0x610>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d100      	bne.n	8002b0a <HAL_RCC_OscConfig+0x496>
 8002b08:	e0b0      	b.n	8002c6c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2238      	movs	r2, #56	; 0x38
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d100      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4a4>
 8002b16:	e078      	b.n	8002c0a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d153      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b26:	4958      	ldr	r1, [pc, #352]	; (8002c88 <HAL_RCC_OscConfig+0x614>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fd ff80 	bl	8000a30 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fd ff7b 	bl	8000a30 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e092      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	049b      	lsls	r3, r3, #18
 8002b50:	4013      	ands	r3, r2
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a4c      	ldr	r2, [pc, #304]	; (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	0449      	lsls	r1, r1, #17
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0549      	lsls	r1, r1, #21
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fd ff47 	bl	8000a30 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fd ff42 	bl	8000a30 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e059      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	049b      	lsls	r3, r3, #18
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x534>
 8002bc6:	e051      	b.n	8002c6c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002bce:	492e      	ldr	r1, [pc, #184]	; (8002c88 <HAL_RCC_OscConfig+0x614>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fd ff2c 	bl	8000a30 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7fd ff27 	bl	8000a30 <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e03e      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	049b      	lsls	r3, r3, #18
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002c02:	4923      	ldr	r1, [pc, #140]	; (8002c90 <HAL_RCC_OscConfig+0x61c>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	e030      	b.n	8002c6c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02b      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_RCC_OscConfig+0x604>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	401a      	ands	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11e      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2270      	movs	r2, #112	; 0x70
 8002c2e:	401a      	ands	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d117      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	23fe      	movs	r3, #254	; 0xfe
 8002c3c:	01db      	lsls	r3, r3, #7
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d10e      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	23f8      	movs	r3, #248	; 0xf8
 8002c4e:	039b      	lsls	r3, r3, #14
 8002c50:	401a      	ands	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d106      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	0f5b      	lsrs	r3, r3, #29
 8002c5e:	075a      	lsls	r2, r3, #29
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b008      	add	sp, #32
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	00001388 	.word	0x00001388
 8002c84:	efffffff 	.word	0xefffffff
 8002c88:	feffffff 	.word	0xfeffffff
 8002c8c:	1fc1808c 	.word	0x1fc1808c
 8002c90:	effefffc 	.word	0xeffefffc

08002c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0e9      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2207      	movs	r2, #7
 8002cae:	4013      	ands	r3, r2
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d91e      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2207      	movs	r2, #7
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cc8:	f7fd feb2 	bl	8000a30 <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cd0:	e009      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd2:	f7fd fead 	bl	8000a30 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_RCC_ClockConfig+0x1f4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0ca      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2207      	movs	r2, #7
 8002cec:	4013      	ands	r3, r2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d015      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	d006      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d08:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b5f      	ldr	r3, [pc, #380]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d0e:	21e0      	movs	r1, #224	; 0xe0
 8002d10:	01c9      	lsls	r1, r1, #7
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4a5d      	ldr	r2, [pc, #372]	; (8002e90 <HAL_RCC_ClockConfig+0x1fc>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4013      	ands	r3, r2
 8002d32:	d057      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3c:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	029b      	lsls	r3, r3, #10
 8002d44:	4013      	ands	r3, r2
 8002d46:	d12b      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e097      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d54:	4b4d      	ldr	r3, [pc, #308]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	049b      	lsls	r3, r3, #18
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d11f      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e08b      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4013      	ands	r3, r2
 8002d76:	d113      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e07f      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e074      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d92:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e06d      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2207      	movs	r2, #7
 8002da6:	4393      	bics	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fd fe3c 	bl	8000a30 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbe:	f7fd fe37 	bl	8000a30 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <HAL_RCC_ClockConfig+0x1f4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e054      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2238      	movs	r2, #56	; 0x38
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1ec      	bne.n	8002dbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2207      	movs	r2, #7
 8002dea:	4013      	ands	r3, r2
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d21e      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2207      	movs	r2, #7
 8002df8:	4393      	bics	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e04:	f7fd fe14 	bl	8000a30 <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e0c:	e009      	b.n	8002e22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0e:	f7fd fe0f 	bl	8000a30 <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <HAL_RCC_ClockConfig+0x1f4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e02c      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2207      	movs	r2, #7
 8002e28:	4013      	ands	r3, r2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1ee      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2204      	movs	r2, #4
 8002e36:	4013      	ands	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_RCC_ClockConfig+0x200>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e4e:	f000 f829 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e52:	0001      	movs	r1, r0
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_ClockConfig+0x1f8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x204>)
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	58d3      	ldr	r3, [r2, r3]
 8002e64:	221f      	movs	r2, #31
 8002e66:	4013      	ands	r3, r2
 8002e68:	000a      	movs	r2, r1
 8002e6a:	40da      	lsrs	r2, r3
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x208>)
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x20c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7fd fd7f 	bl	8000978 <HAL_InitTick>
 8002e7a:	0003      	movs	r3, r0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40022000 	.word	0x40022000
 8002e88:	00001388 	.word	0x00001388
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	fffff0ff 	.word	0xfffff0ff
 8002e94:	ffff8fff 	.word	0xffff8fff
 8002e98:	080040a4 	.word	0x080040a4
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2238      	movs	r2, #56	; 0x38
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0adb      	lsrs	r3, r3, #11
 8002eba:	2207      	movs	r2, #7
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	0013      	movs	r3, r2
 8002ec4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	4835      	ldr	r0, [pc, #212]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002eca:	f7fd f919 	bl	8000100 <__udivsi3>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e05d      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2238      	movs	r2, #56	; 0x38
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e054      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2238      	movs	r2, #56	; 0x38
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d138      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	2207      	movs	r2, #7
 8002f04:	4013      	ands	r3, r2
 8002f06:	3301      	adds	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d10d      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4824      	ldr	r0, [pc, #144]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f14:	f7fd f8f4 	bl	8000100 <__udivsi3>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	227f      	movs	r2, #127	; 0x7f
 8002f24:	4013      	ands	r3, r2
 8002f26:	434b      	muls	r3, r1
 8002f28:	617b      	str	r3, [r7, #20]
        break;
 8002f2a:	e00d      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	481c      	ldr	r0, [pc, #112]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f30:	f7fd f8e6 	bl	8000100 <__udivsi3>
 8002f34:	0003      	movs	r3, r0
 8002f36:	0019      	movs	r1, r3
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	227f      	movs	r2, #127	; 0x7f
 8002f40:	4013      	ands	r3, r2
 8002f42:	434b      	muls	r3, r1
 8002f44:	617b      	str	r3, [r7, #20]
        break;
 8002f46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0f5b      	lsrs	r3, r3, #29
 8002f4e:	2207      	movs	r2, #7
 8002f50:	4013      	ands	r3, r2
 8002f52:	3301      	adds	r3, #1
 8002f54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6978      	ldr	r0, [r7, #20]
 8002f5a:	f7fd f8d1 	bl	8000100 <__udivsi3>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e015      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2238      	movs	r2, #56	; 0x38
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d103      	bne.n	8002f78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2238      	movs	r2, #56	; 0x38
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b18      	cmp	r3, #24
 8002f82:	d103      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f84:	23fa      	movs	r3, #250	; 0xfa
 8002f86:	01db      	lsls	r3, r3, #7
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e001      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f90:	693b      	ldr	r3, [r7, #16]
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	007a1200 	.word	0x007a1200

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fb0:	2313      	movs	r3, #19
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb8:	2312      	movs	r3, #18
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d100      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fcc:	e0a3      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2011      	movs	r0, #17
 8002fd0:	183b      	adds	r3, r7, r0
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	055b      	lsls	r3, r3, #21
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d110      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	0549      	lsls	r1, r1, #21
 8002fec:	430a      	orrs	r2, r1
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ff0:	4b78      	ldr	r3, [pc, #480]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	055b      	lsls	r3, r3, #21
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	183b      	adds	r3, r7, r0
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003004:	4b74      	ldr	r3, [pc, #464]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0049      	lsls	r1, r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003012:	f7fd fd0d 	bl	8000a30 <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	e00b      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fd fd08 	bl	8000a30 <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d904      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800302a:	2313      	movs	r3, #19
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2203      	movs	r2, #3
 8003030:	701a      	strb	r2, [r3, #0]
        break;
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d0ed      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003040:	2313      	movs	r3, #19
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d154      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800304a:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800304c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4013      	ands	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d019      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	429a      	cmp	r2, r3
 8003064:	d014      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800306c:	4013      	ands	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003070:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003074:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0249      	lsls	r1, r1, #9
 800307a:	430a      	orrs	r2, r1
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800307e:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003082:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003084:	4956      	ldr	r1, [pc, #344]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003086:	400a      	ands	r2, r1
 8003088:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d016      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fd fcca 	bl	8000a30 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fd fcc5 	bl	8000a30 <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d904      	bls.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80030b2:	2313      	movs	r3, #19
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
            break;
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030bc:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d0ed      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80030c6:	2313      	movs	r3, #19
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	4a41      	ldr	r2, [pc, #260]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030e0:	430a      	orrs	r2, r1
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80030e4:	e00c      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e6:	2312      	movs	r3, #18
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2213      	movs	r2, #19
 80030ec:	18ba      	adds	r2, r7, r2
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e005      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f4:	2312      	movs	r3, #18
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2213      	movs	r2, #19
 80030fa:	18ba      	adds	r2, r7, r2
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003100:	2311      	movs	r3, #17
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800310c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	400a      	ands	r2, r1
 8003114:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	2203      	movs	r2, #3
 8003126:	4393      	bics	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003130:	430a      	orrs	r2, r1
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	4a2a      	ldr	r2, [pc, #168]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003144:	4013      	ands	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800314e:	430a      	orrs	r2, r1
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	01db      	lsls	r3, r3, #7
 800315a:	4013      	ands	r3, r2
 800315c:	d015      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	0899      	lsrs	r1, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800316c:	430a      	orrs	r2, r1
 800316e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	05db      	lsls	r3, r3, #23
 8003178:	429a      	cmp	r2, r3
 800317a:	d106      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	0249      	lsls	r1, r1, #9
 8003186:	430a      	orrs	r2, r1
 8003188:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d016      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031a6:	430a      	orrs	r2, r1
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	01db      	lsls	r3, r3, #7
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	0249      	lsls	r1, r1, #9
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031c4:	2312      	movs	r3, #18
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	781b      	ldrb	r3, [r3, #0]
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b006      	add	sp, #24
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	fffeffff 	.word	0xfffeffff
 80031e4:	00001388 	.word	0x00001388
 80031e8:	efffffff 	.word	0xefffffff
 80031ec:	ffffcfff 	.word	0xffffcfff
 80031f0:	ffff3fff 	.word	0xffff3fff

080031f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e04a      	b.n	800329c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223d      	movs	r2, #61	; 0x3d
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fd fad9 	bl	80007d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	; 0x3d
 8003226:	2102      	movs	r1, #2
 8003228:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f000 fa0d 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2248      	movs	r2, #72	; 0x48
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	223e      	movs	r2, #62	; 0x3e
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223f      	movs	r2, #63	; 0x3f
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2242      	movs	r2, #66	; 0x42
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2243      	movs	r2, #67	; 0x43
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2244      	movs	r2, #68	; 0x44
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2245      	movs	r2, #69	; 0x45
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2246      	movs	r2, #70	; 0x46
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2247      	movs	r2, #71	; 0x47
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	223d      	movs	r2, #61	; 0x3d
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d108      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x22>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	223e      	movs	r2, #62	; 0x3e
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	1e5a      	subs	r2, r3, #1
 80032c0:	4193      	sbcs	r3, r2
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e037      	b.n	8003336 <HAL_TIM_PWM_Start+0x92>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d108      	bne.n	80032de <HAL_TIM_PWM_Start+0x3a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	223f      	movs	r2, #63	; 0x3f
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	4193      	sbcs	r3, r2
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e02b      	b.n	8003336 <HAL_TIM_PWM_Start+0x92>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d108      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x52>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	5c9b      	ldrb	r3, [r3, r2]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	4193      	sbcs	r3, r2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e01f      	b.n	8003336 <HAL_TIM_PWM_Start+0x92>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d108      	bne.n	800330e <HAL_TIM_PWM_Start+0x6a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2241      	movs	r2, #65	; 0x41
 8003300:	5c9b      	ldrb	r3, [r3, r2]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	4193      	sbcs	r3, r2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e013      	b.n	8003336 <HAL_TIM_PWM_Start+0x92>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b10      	cmp	r3, #16
 8003312:	d108      	bne.n	8003326 <HAL_TIM_PWM_Start+0x82>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2242      	movs	r2, #66	; 0x42
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	4193      	sbcs	r3, r2
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e007      	b.n	8003336 <HAL_TIM_PWM_Start+0x92>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2243      	movs	r2, #67	; 0x43
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	1e5a      	subs	r2, r3, #1
 8003332:	4193      	sbcs	r3, r2
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07b      	b.n	8003436 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xaa>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	223e      	movs	r2, #62	; 0x3e
 8003348:	2102      	movs	r1, #2
 800334a:	5499      	strb	r1, [r3, r2]
 800334c:	e023      	b.n	8003396 <HAL_TIM_PWM_Start+0xf2>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xba>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	223f      	movs	r2, #63	; 0x3f
 8003358:	2102      	movs	r1, #2
 800335a:	5499      	strb	r1, [r3, r2]
 800335c:	e01b      	b.n	8003396 <HAL_TIM_PWM_Start+0xf2>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xca>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2240      	movs	r2, #64	; 0x40
 8003368:	2102      	movs	r1, #2
 800336a:	5499      	strb	r1, [r3, r2]
 800336c:	e013      	b.n	8003396 <HAL_TIM_PWM_Start+0xf2>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xda>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2241      	movs	r2, #65	; 0x41
 8003378:	2102      	movs	r1, #2
 800337a:	5499      	strb	r1, [r3, r2]
 800337c:	e00b      	b.n	8003396 <HAL_TIM_PWM_Start+0xf2>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b10      	cmp	r3, #16
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xea>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2242      	movs	r2, #66	; 0x42
 8003388:	2102      	movs	r1, #2
 800338a:	5499      	strb	r1, [r3, r2]
 800338c:	e003      	b.n	8003396 <HAL_TIM_PWM_Start+0xf2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2243      	movs	r2, #67	; 0x43
 8003392:	2102      	movs	r1, #2
 8003394:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6839      	ldr	r1, [r7, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 fc60 	bl	8003c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a25      	ldr	r2, [pc, #148]	; (8003440 <HAL_TIM_PWM_Start+0x19c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x11e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <HAL_TIM_PWM_Start+0x1a0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x11e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_TIM_PWM_Start+0x1a4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x122>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_TIM_PWM_Start+0x124>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2180      	movs	r1, #128	; 0x80
 80033d8:	0209      	lsls	r1, r1, #8
 80033da:	430a      	orrs	r2, r1
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_TIM_PWM_Start+0x19c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIM_PWM_Start+0x14e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <HAL_TIM_PWM_Start+0x1a8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d116      	bne.n	8003420 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a15      	ldr	r2, [pc, #84]	; (8003450 <HAL_TIM_PWM_Start+0x1ac>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b06      	cmp	r3, #6
 8003402:	d016      	beq.n	8003432 <HAL_TIM_PWM_Start+0x18e>
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	429a      	cmp	r2, r3
 800340c:	d011      	beq.n	8003432 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e008      	b.n	8003432 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e000      	b.n	8003434 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003432:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800
 800344c:	40000400 	.word	0x40000400
 8003450:	00010007 	.word	0x00010007

08003454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2317      	movs	r3, #23
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	223c      	movs	r2, #60	; 0x3c
 800346c:	5c9b      	ldrb	r3, [r3, r2]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003472:	2302      	movs	r3, #2
 8003474:	e0e5      	b.n	8003642 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	223c      	movs	r2, #60	; 0x3c
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b14      	cmp	r3, #20
 8003482:	d900      	bls.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003484:	e0d1      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	4b70      	ldr	r3, [pc, #448]	; (800364c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	0011      	movs	r1, r2
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f946 	bl	800372c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2108      	movs	r1, #8
 80034ac:	430a      	orrs	r2, r1
 80034ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2104      	movs	r1, #4
 80034bc:	438a      	bics	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	619a      	str	r2, [r3, #24]
      break;
 80034d2:	e0af      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	0011      	movs	r1, r2
 80034dc:	0018      	movs	r0, r3
 80034de:	f000 f9a5 	bl	800382c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699a      	ldr	r2, [r3, #24]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0109      	lsls	r1, r1, #4
 80034f0:	430a      	orrs	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4954      	ldr	r1, [pc, #336]	; (8003650 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003500:	400a      	ands	r2, r1
 8003502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6999      	ldr	r1, [r3, #24]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	619a      	str	r2, [r3, #24]
      break;
 8003518:	e08c      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	0011      	movs	r1, r2
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fa00 	bl	8003928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2108      	movs	r1, #8
 8003534:	430a      	orrs	r2, r1
 8003536:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2104      	movs	r1, #4
 8003544:	438a      	bics	r2, r1
 8003546:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69d9      	ldr	r1, [r3, #28]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	61da      	str	r2, [r3, #28]
      break;
 800355a:	e06b      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fa61 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2180      	movs	r1, #128	; 0x80
 8003576:	0109      	lsls	r1, r1, #4
 8003578:	430a      	orrs	r2, r1
 800357a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4932      	ldr	r1, [pc, #200]	; (8003650 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003588:	400a      	ands	r2, r1
 800358a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69d9      	ldr	r1, [r3, #28]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	021a      	lsls	r2, r3, #8
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]
      break;
 80035a0:	e048      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 faa2 	bl	8003af4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2108      	movs	r1, #8
 80035bc:	430a      	orrs	r2, r1
 80035be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2104      	movs	r1, #4
 80035cc:	438a      	bics	r2, r1
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035e2:	e027      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	0011      	movs	r1, r2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fadb 	bl	8003ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0109      	lsls	r1, r1, #4
 8003600:	430a      	orrs	r2, r1
 8003602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4910      	ldr	r1, [pc, #64]	; (8003650 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003610:	400a      	ands	r2, r1
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003628:	e004      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800362a:	2317      	movs	r3, #23
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	223c      	movs	r2, #60	; 0x3c
 8003638:	2100      	movs	r1, #0
 800363a:	5499      	strb	r1, [r3, r2]

  return status;
 800363c:	2317      	movs	r3, #23
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	781b      	ldrb	r3, [r3, #0]
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b006      	add	sp, #24
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	080040e4 	.word	0x080040e4
 8003650:	fffffbff 	.word	0xfffffbff

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x20>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <TIM_Base_SetConfig+0xc4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2270      	movs	r2, #112	; 0x70
 8003678:	4393      	bics	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00f      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a21      	ldr	r2, [pc, #132]	; (8003718 <TIM_Base_SetConfig+0xc4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a20      	ldr	r2, [pc, #128]	; (800371c <TIM_Base_SetConfig+0xc8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <TIM_Base_SetConfig+0xcc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_Base_SetConfig+0x5a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <TIM_Base_SetConfig+0xd0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <TIM_Base_SetConfig+0xd4>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	4393      	bics	r3, r2
 80036c6:	001a      	movs	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <TIM_Base_SetConfig+0xcc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <TIM_Base_SetConfig+0xd0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d103      	bne.n	8003706 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	615a      	str	r2, [r3, #20]
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40002000 	.word	0x40002000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	fffffcff 	.word	0xfffffcff

0800372c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	2201      	movs	r2, #1
 800373c:	4393      	bics	r3, r2
 800373e:	001a      	movs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <TIM_OC1_SetConfig+0xe8>)
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2203      	movs	r2, #3
 8003762:	4393      	bics	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2202      	movs	r2, #2
 8003774:	4393      	bics	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <TIM_OC1_SetConfig+0xec>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_OC1_SetConfig+0x6e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <TIM_OC1_SetConfig+0xf0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_OC1_SetConfig+0x6e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <TIM_OC1_SetConfig+0xf4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10c      	bne.n	80037b4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2208      	movs	r2, #8
 800379e:	4393      	bics	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2204      	movs	r2, #4
 80037b0:	4393      	bics	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <TIM_OC1_SetConfig+0xec>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <TIM_OC1_SetConfig+0xa0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <TIM_OC1_SetConfig+0xf0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_OC1_SetConfig+0xa0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <TIM_OC1_SetConfig+0xf4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d111      	bne.n	80037f0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <TIM_OC1_SetConfig+0xf8>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <TIM_OC1_SetConfig+0xfc>)
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b006      	add	sp, #24
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	fffeff8f 	.word	0xfffeff8f
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40014400 	.word	0x40014400
 8003820:	40014800 	.word	0x40014800
 8003824:	fffffeff 	.word	0xfffffeff
 8003828:	fffffdff 	.word	0xfffffdff

0800382c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	2210      	movs	r2, #16
 800383c:	4393      	bics	r3, r2
 800383e:	001a      	movs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <TIM_OC2_SetConfig+0xe0>)
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <TIM_OC2_SetConfig+0xe4>)
 8003862:	4013      	ands	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2220      	movs	r2, #32
 8003876:	4393      	bics	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <TIM_OC2_SetConfig+0xe8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10d      	bne.n	80038aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	4393      	bics	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2240      	movs	r2, #64	; 0x40
 80038a6:	4393      	bics	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <TIM_OC2_SetConfig+0xe8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <TIM_OC2_SetConfig+0x96>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <TIM_OC2_SetConfig+0xec>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <TIM_OC2_SetConfig+0x96>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <TIM_OC2_SetConfig+0xf0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d113      	bne.n	80038ea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <TIM_OC2_SetConfig+0xf4>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <TIM_OC2_SetConfig+0xf8>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	621a      	str	r2, [r3, #32]
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b006      	add	sp, #24
 800390a:	bd80      	pop	{r7, pc}
 800390c:	feff8fff 	.word	0xfeff8fff
 8003910:	fffffcff 	.word	0xfffffcff
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800
 8003920:	fffffbff 	.word	0xfffffbff
 8003924:	fffff7ff 	.word	0xfffff7ff

08003928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <TIM_OC3_SetConfig+0xdc>)
 8003938:	401a      	ands	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a2d      	ldr	r2, [pc, #180]	; (8003a08 <TIM_OC3_SetConfig+0xe0>)
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2203      	movs	r2, #3
 800395c:	4393      	bics	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_OC3_SetConfig+0xe4>)
 800396e:	4013      	ands	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <TIM_OC3_SetConfig+0xe8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10d      	bne.n	80039a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <TIM_OC3_SetConfig+0xec>)
 800398a:	4013      	ands	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <TIM_OC3_SetConfig+0xf0>)
 800399e:	4013      	ands	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <TIM_OC3_SetConfig+0xe8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <TIM_OC3_SetConfig+0x92>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <TIM_OC3_SetConfig+0xf4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_OC3_SetConfig+0x92>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <TIM_OC3_SetConfig+0xf8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d113      	bne.n	80039e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <TIM_OC3_SetConfig+0xfc>)
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <TIM_OC3_SetConfig+0x100>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b006      	add	sp, #24
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	fffffeff 	.word	0xfffffeff
 8003a08:	fffeff8f 	.word	0xfffeff8f
 8003a0c:	fffffdff 	.word	0xfffffdff
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	fffff7ff 	.word	0xfffff7ff
 8003a18:	fffffbff 	.word	0xfffffbff
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800
 8003a24:	ffffefff 	.word	0xffffefff
 8003a28:	ffffdfff 	.word	0xffffdfff

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <TIM_OC4_SetConfig+0xa8>)
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <TIM_OC4_SetConfig+0xac>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <TIM_OC4_SetConfig+0xb0>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <TIM_OC4_SetConfig+0xb4>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <TIM_OC4_SetConfig+0xb8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <TIM_OC4_SetConfig+0x70>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <TIM_OC4_SetConfig+0xbc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_OC4_SetConfig+0x70>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <TIM_OC4_SetConfig+0xc0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d109      	bne.n	8003ab0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC4_SetConfig+0xc4>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	019b      	lsls	r3, r3, #6
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b006      	add	sp, #24
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	ffffefff 	.word	0xffffefff
 8003ad8:	feff8fff 	.word	0xfeff8fff
 8003adc:	fffffcff 	.word	0xfffffcff
 8003ae0:	ffffdfff 	.word	0xffffdfff
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800
 8003af0:	ffffbfff 	.word	0xffffbfff

08003af4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <TIM_OC5_SetConfig+0x9c>)
 8003b04:	401a      	ands	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <TIM_OC5_SetConfig+0xa0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <TIM_OC5_SetConfig+0xa4>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <TIM_OC5_SetConfig+0xa8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_OC5_SetConfig+0x66>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <TIM_OC5_SetConfig+0xac>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC5_SetConfig+0x66>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <TIM_OC5_SetConfig+0xb0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d109      	bne.n	8003b6e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <TIM_OC5_SetConfig+0x9c>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	621a      	str	r2, [r3, #32]
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b006      	add	sp, #24
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	fffeffff 	.word	0xfffeffff
 8003b94:	fffeff8f 	.word	0xfffeff8f
 8003b98:	fffdffff 	.word	0xfffdffff
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800

08003ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <TIM_OC6_SetConfig+0xa0>)
 8003bb8:	401a      	ands	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <TIM_OC6_SetConfig+0xa4>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <TIM_OC6_SetConfig+0xa8>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	051b      	lsls	r3, r3, #20
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <TIM_OC6_SetConfig+0xac>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC6_SetConfig+0x68>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <TIM_OC6_SetConfig+0xb0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC6_SetConfig+0x68>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <TIM_OC6_SetConfig+0xb4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d109      	bne.n	8003c24 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <TIM_OC6_SetConfig+0xb8>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	029b      	lsls	r3, r3, #10
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b006      	add	sp, #24
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	ffefffff 	.word	0xffefffff
 8003c4c:	feff8fff 	.word	0xfeff8fff
 8003c50:	ffdfffff 	.word	0xffdfffff
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	fffbffff 	.word	0xfffbffff

08003c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	221f      	movs	r2, #31
 8003c74:	4013      	ands	r3, r2
 8003c76:	2201      	movs	r2, #1
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	0013      	movs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	43d2      	mvns	r2, r2
 8003c86:	401a      	ands	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	211f      	movs	r1, #31
 8003c94:	400b      	ands	r3, r1
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4099      	lsls	r1, r3
 8003c9a:	000b      	movs	r3, r1
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b006      	add	sp, #24
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <HAL_TIMEx_PWMN_Start+0x22>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2244      	movs	r2, #68	; 0x44
 8003cc0:	5c9b      	ldrb	r3, [r3, r2]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	1e5a      	subs	r2, r3, #1
 8003cc8:	4193      	sbcs	r3, r2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e01f      	b.n	8003d0e <HAL_TIMEx_PWMN_Start+0x62>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d108      	bne.n	8003ce6 <HAL_TIMEx_PWMN_Start+0x3a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2245      	movs	r2, #69	; 0x45
 8003cd8:	5c9b      	ldrb	r3, [r3, r2]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	1e5a      	subs	r2, r3, #1
 8003ce0:	4193      	sbcs	r3, r2
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e013      	b.n	8003d0e <HAL_TIMEx_PWMN_Start+0x62>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d108      	bne.n	8003cfe <HAL_TIMEx_PWMN_Start+0x52>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2246      	movs	r2, #70	; 0x46
 8003cf0:	5c9b      	ldrb	r3, [r3, r2]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	4193      	sbcs	r3, r2
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	e007      	b.n	8003d0e <HAL_TIMEx_PWMN_Start+0x62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2247      	movs	r2, #71	; 0x47
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	4193      	sbcs	r3, r2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e057      	b.n	8003dc6 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIMEx_PWMN_Start+0x7a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2244      	movs	r2, #68	; 0x44
 8003d20:	2102      	movs	r1, #2
 8003d22:	5499      	strb	r1, [r3, r2]
 8003d24:	e013      	b.n	8003d4e <HAL_TIMEx_PWMN_Start+0xa2>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIMEx_PWMN_Start+0x8a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2245      	movs	r2, #69	; 0x45
 8003d30:	2102      	movs	r1, #2
 8003d32:	5499      	strb	r1, [r3, r2]
 8003d34:	e00b      	b.n	8003d4e <HAL_TIMEx_PWMN_Start+0xa2>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIMEx_PWMN_Start+0x9a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2246      	movs	r2, #70	; 0x46
 8003d40:	2102      	movs	r1, #2
 8003d42:	5499      	strb	r1, [r3, r2]
 8003d44:	e003      	b.n	8003d4e <HAL_TIMEx_PWMN_Start+0xa2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2247      	movs	r2, #71	; 0x47
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	2204      	movs	r2, #4
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 f948 	bl	8003fec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	0209      	lsls	r1, r1, #8
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_TIMEx_PWMN_Start+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIMEx_PWMN_Start+0xd6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <HAL_TIMEx_PWMN_Start+0x128>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d116      	bne.n	8003db0 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <HAL_TIMEx_PWMN_Start+0x12c>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d016      	beq.n	8003dc2 <HAL_TIMEx_PWMN_Start+0x116>
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d011      	beq.n	8003dc2 <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	e008      	b.n	8003dc2 <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e000      	b.n	8003dc4 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	00010007 	.word	0x00010007

08003ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	223c      	movs	r2, #60	; 0x3c
 8003dea:	5c9b      	ldrb	r3, [r3, r2]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e04a      	b.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	223c      	movs	r2, #60	; 0x3c
 8003df8:	2101      	movs	r1, #1
 8003dfa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	223d      	movs	r2, #61	; 0x3d
 8003e00:	2102      	movs	r1, #2
 8003e02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2270      	movs	r2, #112	; 0x70
 8003e34:	4393      	bics	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10c      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	4393      	bics	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	223d      	movs	r2, #61	; 0x3d
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	223c      	movs	r2, #60	; 0x3c
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	ff0fffff 	.word	0xff0fffff
 8003e9c:	40000400 	.word	0x40000400

08003ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223c      	movs	r2, #60	; 0x3c
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e079      	b.n	8003fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	223c      	movs	r2, #60	; 0x3c
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	4393      	bics	r3, r2
 8003eca:	001a      	movs	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003ed8:	401a      	ands	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a35      	ldr	r2, [pc, #212]	; (8003fbc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a33      	ldr	r2, [pc, #204]	; (8003fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a30      	ldr	r2, [pc, #192]	; (8003fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f02:	401a      	ands	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f10:	401a      	ands	r2, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a2b      	ldr	r2, [pc, #172]	; (8003fcc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f1e:	401a      	ands	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d106      	bne.n	8003f50 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003f46:	401a      	ands	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d121      	bne.n	8003f9e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003f5e:	401a      	ands	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	051b      	lsls	r3, r3, #20
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003f6e:	401a      	ands	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d106      	bne.n	8003f9e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003f94:	401a      	ands	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223c      	movs	r2, #60	; 0x3c
 8003faa:	2100      	movs	r1, #0
 8003fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	fffffcff 	.word	0xfffffcff
 8003fbc:	fffffbff 	.word	0xfffffbff
 8003fc0:	fffff7ff 	.word	0xfffff7ff
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	ffffdfff 	.word	0xffffdfff
 8003fcc:	ffffbfff 	.word	0xffffbfff
 8003fd0:	fff0ffff 	.word	0xfff0ffff
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	efffffff 	.word	0xefffffff
 8003fdc:	ff0fffff 	.word	0xff0fffff
 8003fe0:	feffffff 	.word	0xfeffffff
 8003fe4:	fdffffff 	.word	0xfdffffff
 8003fe8:	dfffffff 	.word	0xdfffffff

08003fec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	221f      	movs	r2, #31
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2204      	movs	r2, #4
 8004000:	409a      	lsls	r2, r3
 8004002:	0013      	movs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	43d2      	mvns	r2, r2
 800400e:	401a      	ands	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	211f      	movs	r1, #31
 800401c:	400b      	ands	r3, r1
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4099      	lsls	r1, r3
 8004022:	000b      	movs	r3, r1
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b006      	add	sp, #24
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <__libc_init_array>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	2600      	movs	r6, #0
 8004038:	4d0c      	ldr	r5, [pc, #48]	; (800406c <__libc_init_array+0x38>)
 800403a:	4c0d      	ldr	r4, [pc, #52]	; (8004070 <__libc_init_array+0x3c>)
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	42a6      	cmp	r6, r4
 8004042:	d109      	bne.n	8004058 <__libc_init_array+0x24>
 8004044:	2600      	movs	r6, #0
 8004046:	f000 f821 	bl	800408c <_init>
 800404a:	4d0a      	ldr	r5, [pc, #40]	; (8004074 <__libc_init_array+0x40>)
 800404c:	4c0a      	ldr	r4, [pc, #40]	; (8004078 <__libc_init_array+0x44>)
 800404e:	1b64      	subs	r4, r4, r5
 8004050:	10a4      	asrs	r4, r4, #2
 8004052:	42a6      	cmp	r6, r4
 8004054:	d105      	bne.n	8004062 <__libc_init_array+0x2e>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	00b3      	lsls	r3, r6, #2
 800405a:	58eb      	ldr	r3, [r5, r3]
 800405c:	4798      	blx	r3
 800405e:	3601      	adds	r6, #1
 8004060:	e7ee      	b.n	8004040 <__libc_init_array+0xc>
 8004062:	00b3      	lsls	r3, r6, #2
 8004064:	58eb      	ldr	r3, [r5, r3]
 8004066:	4798      	blx	r3
 8004068:	3601      	adds	r6, #1
 800406a:	e7f2      	b.n	8004052 <__libc_init_array+0x1e>
 800406c:	08004138 	.word	0x08004138
 8004070:	08004138 	.word	0x08004138
 8004074:	08004138 	.word	0x08004138
 8004078:	0800413c 	.word	0x0800413c

0800407c <memset>:
 800407c:	0003      	movs	r3, r0
 800407e:	1882      	adds	r2, r0, r2
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	7019      	strb	r1, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <_init>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr

08004098 <_fini>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr
