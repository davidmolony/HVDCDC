
HVDCDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080050e8  080050e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e8  080050e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080050fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080050fc  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfc3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002347  00000000  00000000  0002dff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00030340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015984  00000000  00000000  00031df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb56  00000000  00000000  0004777c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a776  00000000  00000000  000572d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003328  00000000  00000000  000e1a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004ffc 	.word	0x08004ffc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004ffc 	.word	0x08004ffc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_d2uiz>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	2200      	movs	r2, #0
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <__aeabi_d2uiz+0x38>)
 800021e:	0004      	movs	r4, r0
 8000220:	000d      	movs	r5, r1
 8000222:	f000 ff39 	bl	8001098 <__aeabi_dcmpge>
 8000226:	2800      	cmp	r0, #0
 8000228:	d104      	bne.n	8000234 <__aeabi_d2uiz+0x1c>
 800022a:	0020      	movs	r0, r4
 800022c:	0029      	movs	r1, r5
 800022e:	f000 fe99 	bl	8000f64 <__aeabi_d2iz>
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <__aeabi_d2uiz+0x38>)
 8000236:	2200      	movs	r2, #0
 8000238:	0020      	movs	r0, r4
 800023a:	0029      	movs	r1, r5
 800023c:	f000 fb00 	bl	8000840 <__aeabi_dsub>
 8000240:	f000 fe90 	bl	8000f64 <__aeabi_d2iz>
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	061b      	lsls	r3, r3, #24
 8000248:	469c      	mov	ip, r3
 800024a:	4460      	add	r0, ip
 800024c:	e7f1      	b.n	8000232 <__aeabi_d2uiz+0x1a>
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	41e00000 	.word	0x41e00000

08000254 <__aeabi_ddiv>:
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	4657      	mov	r7, sl
 8000258:	464e      	mov	r6, r9
 800025a:	4645      	mov	r5, r8
 800025c:	46de      	mov	lr, fp
 800025e:	b5e0      	push	{r5, r6, r7, lr}
 8000260:	4681      	mov	r9, r0
 8000262:	0005      	movs	r5, r0
 8000264:	030c      	lsls	r4, r1, #12
 8000266:	0048      	lsls	r0, r1, #1
 8000268:	4692      	mov	sl, r2
 800026a:	001f      	movs	r7, r3
 800026c:	b085      	sub	sp, #20
 800026e:	0b24      	lsrs	r4, r4, #12
 8000270:	0d40      	lsrs	r0, r0, #21
 8000272:	0fce      	lsrs	r6, r1, #31
 8000274:	2800      	cmp	r0, #0
 8000276:	d100      	bne.n	800027a <__aeabi_ddiv+0x26>
 8000278:	e156      	b.n	8000528 <__aeabi_ddiv+0x2d4>
 800027a:	4bd4      	ldr	r3, [pc, #848]	; (80005cc <__aeabi_ddiv+0x378>)
 800027c:	4298      	cmp	r0, r3
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x2e>
 8000280:	e172      	b.n	8000568 <__aeabi_ddiv+0x314>
 8000282:	0f6b      	lsrs	r3, r5, #29
 8000284:	00e4      	lsls	r4, r4, #3
 8000286:	431c      	orrs	r4, r3
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	041b      	lsls	r3, r3, #16
 800028c:	4323      	orrs	r3, r4
 800028e:	4698      	mov	r8, r3
 8000290:	4bcf      	ldr	r3, [pc, #828]	; (80005d0 <__aeabi_ddiv+0x37c>)
 8000292:	00ed      	lsls	r5, r5, #3
 8000294:	469b      	mov	fp, r3
 8000296:	2300      	movs	r3, #0
 8000298:	4699      	mov	r9, r3
 800029a:	4483      	add	fp, r0
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	033c      	lsls	r4, r7, #12
 80002a0:	007b      	lsls	r3, r7, #1
 80002a2:	4650      	mov	r0, sl
 80002a4:	0b24      	lsrs	r4, r4, #12
 80002a6:	0d5b      	lsrs	r3, r3, #21
 80002a8:	0fff      	lsrs	r7, r7, #31
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d100      	bne.n	80002b0 <__aeabi_ddiv+0x5c>
 80002ae:	e11f      	b.n	80004f0 <__aeabi_ddiv+0x29c>
 80002b0:	4ac6      	ldr	r2, [pc, #792]	; (80005cc <__aeabi_ddiv+0x378>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x64>
 80002b6:	e162      	b.n	800057e <__aeabi_ddiv+0x32a>
 80002b8:	49c5      	ldr	r1, [pc, #788]	; (80005d0 <__aeabi_ddiv+0x37c>)
 80002ba:	0f42      	lsrs	r2, r0, #29
 80002bc:	468c      	mov	ip, r1
 80002be:	00e4      	lsls	r4, r4, #3
 80002c0:	4659      	mov	r1, fp
 80002c2:	4314      	orrs	r4, r2
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	4463      	add	r3, ip
 80002c8:	0412      	lsls	r2, r2, #16
 80002ca:	1acb      	subs	r3, r1, r3
 80002cc:	4314      	orrs	r4, r2
 80002ce:	469b      	mov	fp, r3
 80002d0:	00c2      	lsls	r2, r0, #3
 80002d2:	2000      	movs	r0, #0
 80002d4:	0033      	movs	r3, r6
 80002d6:	407b      	eors	r3, r7
 80002d8:	469a      	mov	sl, r3
 80002da:	464b      	mov	r3, r9
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d827      	bhi.n	8000330 <__aeabi_ddiv+0xdc>
 80002e0:	49bc      	ldr	r1, [pc, #752]	; (80005d4 <__aeabi_ddiv+0x380>)
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	58cb      	ldr	r3, [r1, r3]
 80002e6:	469f      	mov	pc, r3
 80002e8:	46b2      	mov	sl, r6
 80002ea:	9b00      	ldr	r3, [sp, #0]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d016      	beq.n	800031e <__aeabi_ddiv+0xca>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d100      	bne.n	80002f6 <__aeabi_ddiv+0xa2>
 80002f4:	e28e      	b.n	8000814 <__aeabi_ddiv+0x5c0>
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d000      	beq.n	80002fc <__aeabi_ddiv+0xa8>
 80002fa:	e0d9      	b.n	80004b0 <__aeabi_ddiv+0x25c>
 80002fc:	2300      	movs	r3, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	2500      	movs	r5, #0
 8000302:	4652      	mov	r2, sl
 8000304:	051b      	lsls	r3, r3, #20
 8000306:	4323      	orrs	r3, r4
 8000308:	07d2      	lsls	r2, r2, #31
 800030a:	4313      	orrs	r3, r2
 800030c:	0028      	movs	r0, r5
 800030e:	0019      	movs	r1, r3
 8000310:	b005      	add	sp, #20
 8000312:	bcf0      	pop	{r4, r5, r6, r7}
 8000314:	46bb      	mov	fp, r7
 8000316:	46b2      	mov	sl, r6
 8000318:	46a9      	mov	r9, r5
 800031a:	46a0      	mov	r8, r4
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	2400      	movs	r4, #0
 8000320:	2500      	movs	r5, #0
 8000322:	4baa      	ldr	r3, [pc, #680]	; (80005cc <__aeabi_ddiv+0x378>)
 8000324:	e7ed      	b.n	8000302 <__aeabi_ddiv+0xae>
 8000326:	46ba      	mov	sl, r7
 8000328:	46a0      	mov	r8, r4
 800032a:	0015      	movs	r5, r2
 800032c:	9000      	str	r0, [sp, #0]
 800032e:	e7dc      	b.n	80002ea <__aeabi_ddiv+0x96>
 8000330:	4544      	cmp	r4, r8
 8000332:	d200      	bcs.n	8000336 <__aeabi_ddiv+0xe2>
 8000334:	e1c7      	b.n	80006c6 <__aeabi_ddiv+0x472>
 8000336:	d100      	bne.n	800033a <__aeabi_ddiv+0xe6>
 8000338:	e1c2      	b.n	80006c0 <__aeabi_ddiv+0x46c>
 800033a:	2301      	movs	r3, #1
 800033c:	425b      	negs	r3, r3
 800033e:	469c      	mov	ip, r3
 8000340:	002e      	movs	r6, r5
 8000342:	4640      	mov	r0, r8
 8000344:	2500      	movs	r5, #0
 8000346:	44e3      	add	fp, ip
 8000348:	0223      	lsls	r3, r4, #8
 800034a:	0e14      	lsrs	r4, r2, #24
 800034c:	431c      	orrs	r4, r3
 800034e:	0c1b      	lsrs	r3, r3, #16
 8000350:	4699      	mov	r9, r3
 8000352:	0423      	lsls	r3, r4, #16
 8000354:	0c1f      	lsrs	r7, r3, #16
 8000356:	0212      	lsls	r2, r2, #8
 8000358:	4649      	mov	r1, r9
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9701      	str	r7, [sp, #4]
 800035e:	f7ff ff55 	bl	800020c <__aeabi_uidivmod>
 8000362:	0002      	movs	r2, r0
 8000364:	437a      	muls	r2, r7
 8000366:	040b      	lsls	r3, r1, #16
 8000368:	0c31      	lsrs	r1, r6, #16
 800036a:	4680      	mov	r8, r0
 800036c:	4319      	orrs	r1, r3
 800036e:	428a      	cmp	r2, r1
 8000370:	d907      	bls.n	8000382 <__aeabi_ddiv+0x12e>
 8000372:	2301      	movs	r3, #1
 8000374:	425b      	negs	r3, r3
 8000376:	469c      	mov	ip, r3
 8000378:	1909      	adds	r1, r1, r4
 800037a:	44e0      	add	r8, ip
 800037c:	428c      	cmp	r4, r1
 800037e:	d800      	bhi.n	8000382 <__aeabi_ddiv+0x12e>
 8000380:	e207      	b.n	8000792 <__aeabi_ddiv+0x53e>
 8000382:	1a88      	subs	r0, r1, r2
 8000384:	4649      	mov	r1, r9
 8000386:	f7ff ff41 	bl	800020c <__aeabi_uidivmod>
 800038a:	0409      	lsls	r1, r1, #16
 800038c:	468c      	mov	ip, r1
 800038e:	0431      	lsls	r1, r6, #16
 8000390:	4666      	mov	r6, ip
 8000392:	9a01      	ldr	r2, [sp, #4]
 8000394:	0c09      	lsrs	r1, r1, #16
 8000396:	4342      	muls	r2, r0
 8000398:	0003      	movs	r3, r0
 800039a:	4331      	orrs	r1, r6
 800039c:	428a      	cmp	r2, r1
 800039e:	d904      	bls.n	80003aa <__aeabi_ddiv+0x156>
 80003a0:	1909      	adds	r1, r1, r4
 80003a2:	3b01      	subs	r3, #1
 80003a4:	428c      	cmp	r4, r1
 80003a6:	d800      	bhi.n	80003aa <__aeabi_ddiv+0x156>
 80003a8:	e1ed      	b.n	8000786 <__aeabi_ddiv+0x532>
 80003aa:	1a88      	subs	r0, r1, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	0412      	lsls	r2, r2, #16
 80003b0:	431a      	orrs	r2, r3
 80003b2:	4690      	mov	r8, r2
 80003b4:	4641      	mov	r1, r8
 80003b6:	9b00      	ldr	r3, [sp, #0]
 80003b8:	040e      	lsls	r6, r1, #16
 80003ba:	0c1b      	lsrs	r3, r3, #16
 80003bc:	001f      	movs	r7, r3
 80003be:	9302      	str	r3, [sp, #8]
 80003c0:	9b00      	ldr	r3, [sp, #0]
 80003c2:	0c36      	lsrs	r6, r6, #16
 80003c4:	041b      	lsls	r3, r3, #16
 80003c6:	0c19      	lsrs	r1, r3, #16
 80003c8:	000b      	movs	r3, r1
 80003ca:	4373      	muls	r3, r6
 80003cc:	0c12      	lsrs	r2, r2, #16
 80003ce:	437e      	muls	r6, r7
 80003d0:	9103      	str	r1, [sp, #12]
 80003d2:	4351      	muls	r1, r2
 80003d4:	437a      	muls	r2, r7
 80003d6:	0c1f      	lsrs	r7, r3, #16
 80003d8:	46bc      	mov	ip, r7
 80003da:	1876      	adds	r6, r6, r1
 80003dc:	4466      	add	r6, ip
 80003de:	42b1      	cmp	r1, r6
 80003e0:	d903      	bls.n	80003ea <__aeabi_ddiv+0x196>
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	0249      	lsls	r1, r1, #9
 80003e6:	468c      	mov	ip, r1
 80003e8:	4462      	add	r2, ip
 80003ea:	0c31      	lsrs	r1, r6, #16
 80003ec:	188a      	adds	r2, r1, r2
 80003ee:	0431      	lsls	r1, r6, #16
 80003f0:	041e      	lsls	r6, r3, #16
 80003f2:	0c36      	lsrs	r6, r6, #16
 80003f4:	198e      	adds	r6, r1, r6
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d302      	bcc.n	8000400 <__aeabi_ddiv+0x1ac>
 80003fa:	d112      	bne.n	8000422 <__aeabi_ddiv+0x1ce>
 80003fc:	42b5      	cmp	r5, r6
 80003fe:	d210      	bcs.n	8000422 <__aeabi_ddiv+0x1ce>
 8000400:	4643      	mov	r3, r8
 8000402:	1e59      	subs	r1, r3, #1
 8000404:	9b00      	ldr	r3, [sp, #0]
 8000406:	469c      	mov	ip, r3
 8000408:	4465      	add	r5, ip
 800040a:	001f      	movs	r7, r3
 800040c:	429d      	cmp	r5, r3
 800040e:	419b      	sbcs	r3, r3
 8000410:	425b      	negs	r3, r3
 8000412:	191b      	adds	r3, r3, r4
 8000414:	18c0      	adds	r0, r0, r3
 8000416:	4284      	cmp	r4, r0
 8000418:	d200      	bcs.n	800041c <__aeabi_ddiv+0x1c8>
 800041a:	e1a0      	b.n	800075e <__aeabi_ddiv+0x50a>
 800041c:	d100      	bne.n	8000420 <__aeabi_ddiv+0x1cc>
 800041e:	e19b      	b.n	8000758 <__aeabi_ddiv+0x504>
 8000420:	4688      	mov	r8, r1
 8000422:	1bae      	subs	r6, r5, r6
 8000424:	42b5      	cmp	r5, r6
 8000426:	41ad      	sbcs	r5, r5
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	426d      	negs	r5, r5
 800042c:	1b40      	subs	r0, r0, r5
 800042e:	4284      	cmp	r4, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1e0>
 8000432:	e1d5      	b.n	80007e0 <__aeabi_ddiv+0x58c>
 8000434:	4649      	mov	r1, r9
 8000436:	f7ff fee9 	bl	800020c <__aeabi_uidivmod>
 800043a:	9a01      	ldr	r2, [sp, #4]
 800043c:	040b      	lsls	r3, r1, #16
 800043e:	4342      	muls	r2, r0
 8000440:	0c31      	lsrs	r1, r6, #16
 8000442:	0005      	movs	r5, r0
 8000444:	4319      	orrs	r1, r3
 8000446:	428a      	cmp	r2, r1
 8000448:	d900      	bls.n	800044c <__aeabi_ddiv+0x1f8>
 800044a:	e16c      	b.n	8000726 <__aeabi_ddiv+0x4d2>
 800044c:	1a88      	subs	r0, r1, r2
 800044e:	4649      	mov	r1, r9
 8000450:	f7ff fedc 	bl	800020c <__aeabi_uidivmod>
 8000454:	9a01      	ldr	r2, [sp, #4]
 8000456:	0436      	lsls	r6, r6, #16
 8000458:	4342      	muls	r2, r0
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	0c36      	lsrs	r6, r6, #16
 800045e:	0003      	movs	r3, r0
 8000460:	430e      	orrs	r6, r1
 8000462:	42b2      	cmp	r2, r6
 8000464:	d900      	bls.n	8000468 <__aeabi_ddiv+0x214>
 8000466:	e153      	b.n	8000710 <__aeabi_ddiv+0x4bc>
 8000468:	9803      	ldr	r0, [sp, #12]
 800046a:	1ab6      	subs	r6, r6, r2
 800046c:	0002      	movs	r2, r0
 800046e:	042d      	lsls	r5, r5, #16
 8000470:	431d      	orrs	r5, r3
 8000472:	9f02      	ldr	r7, [sp, #8]
 8000474:	042b      	lsls	r3, r5, #16
 8000476:	0c1b      	lsrs	r3, r3, #16
 8000478:	435a      	muls	r2, r3
 800047a:	437b      	muls	r3, r7
 800047c:	469c      	mov	ip, r3
 800047e:	0c29      	lsrs	r1, r5, #16
 8000480:	4348      	muls	r0, r1
 8000482:	0c13      	lsrs	r3, r2, #16
 8000484:	4484      	add	ip, r0
 8000486:	4463      	add	r3, ip
 8000488:	4379      	muls	r1, r7
 800048a:	4298      	cmp	r0, r3
 800048c:	d903      	bls.n	8000496 <__aeabi_ddiv+0x242>
 800048e:	2080      	movs	r0, #128	; 0x80
 8000490:	0240      	lsls	r0, r0, #9
 8000492:	4684      	mov	ip, r0
 8000494:	4461      	add	r1, ip
 8000496:	0c18      	lsrs	r0, r3, #16
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	0c12      	lsrs	r2, r2, #16
 800049e:	1841      	adds	r1, r0, r1
 80004a0:	189b      	adds	r3, r3, r2
 80004a2:	428e      	cmp	r6, r1
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x254>
 80004a6:	e0ff      	b.n	80006a8 <__aeabi_ddiv+0x454>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x258>
 80004aa:	e0fa      	b.n	80006a2 <__aeabi_ddiv+0x44e>
 80004ac:	2301      	movs	r3, #1
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4a49      	ldr	r2, [pc, #292]	; (80005d8 <__aeabi_ddiv+0x384>)
 80004b2:	445a      	add	r2, fp
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_ddiv+0x266>
 80004b8:	e0aa      	b.n	8000610 <__aeabi_ddiv+0x3bc>
 80004ba:	076b      	lsls	r3, r5, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_ddiv+0x26c>
 80004be:	e13d      	b.n	800073c <__aeabi_ddiv+0x4e8>
 80004c0:	08ed      	lsrs	r5, r5, #3
 80004c2:	4643      	mov	r3, r8
 80004c4:	01db      	lsls	r3, r3, #7
 80004c6:	d506      	bpl.n	80004d6 <__aeabi_ddiv+0x282>
 80004c8:	4642      	mov	r2, r8
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <__aeabi_ddiv+0x388>)
 80004cc:	401a      	ands	r2, r3
 80004ce:	4690      	mov	r8, r2
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	00d2      	lsls	r2, r2, #3
 80004d4:	445a      	add	r2, fp
 80004d6:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <__aeabi_ddiv+0x38c>)
 80004d8:	429a      	cmp	r2, r3
 80004da:	dd00      	ble.n	80004de <__aeabi_ddiv+0x28a>
 80004dc:	e71f      	b.n	800031e <__aeabi_ddiv+0xca>
 80004de:	4643      	mov	r3, r8
 80004e0:	075b      	lsls	r3, r3, #29
 80004e2:	431d      	orrs	r5, r3
 80004e4:	4643      	mov	r3, r8
 80004e6:	0552      	lsls	r2, r2, #21
 80004e8:	025c      	lsls	r4, r3, #9
 80004ea:	0b24      	lsrs	r4, r4, #12
 80004ec:	0d53      	lsrs	r3, r2, #21
 80004ee:	e708      	b.n	8000302 <__aeabi_ddiv+0xae>
 80004f0:	4652      	mov	r2, sl
 80004f2:	4322      	orrs	r2, r4
 80004f4:	d100      	bne.n	80004f8 <__aeabi_ddiv+0x2a4>
 80004f6:	e07b      	b.n	80005f0 <__aeabi_ddiv+0x39c>
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_ddiv+0x2aa>
 80004fc:	e0fa      	b.n	80006f4 <__aeabi_ddiv+0x4a0>
 80004fe:	0020      	movs	r0, r4
 8000500:	f000 fdd4 	bl	80010ac <__clzsi2>
 8000504:	0002      	movs	r2, r0
 8000506:	3a0b      	subs	r2, #11
 8000508:	231d      	movs	r3, #29
 800050a:	0001      	movs	r1, r0
 800050c:	1a9b      	subs	r3, r3, r2
 800050e:	4652      	mov	r2, sl
 8000510:	3908      	subs	r1, #8
 8000512:	40da      	lsrs	r2, r3
 8000514:	408c      	lsls	r4, r1
 8000516:	4314      	orrs	r4, r2
 8000518:	4652      	mov	r2, sl
 800051a:	408a      	lsls	r2, r1
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <__aeabi_ddiv+0x390>)
 800051e:	4458      	add	r0, fp
 8000520:	469b      	mov	fp, r3
 8000522:	4483      	add	fp, r0
 8000524:	2000      	movs	r0, #0
 8000526:	e6d5      	b.n	80002d4 <__aeabi_ddiv+0x80>
 8000528:	464b      	mov	r3, r9
 800052a:	4323      	orrs	r3, r4
 800052c:	4698      	mov	r8, r3
 800052e:	d044      	beq.n	80005ba <__aeabi_ddiv+0x366>
 8000530:	2c00      	cmp	r4, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0x2e2>
 8000534:	e0ce      	b.n	80006d4 <__aeabi_ddiv+0x480>
 8000536:	0020      	movs	r0, r4
 8000538:	f000 fdb8 	bl	80010ac <__clzsi2>
 800053c:	0001      	movs	r1, r0
 800053e:	0002      	movs	r2, r0
 8000540:	390b      	subs	r1, #11
 8000542:	231d      	movs	r3, #29
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	4649      	mov	r1, r9
 8000548:	0010      	movs	r0, r2
 800054a:	40d9      	lsrs	r1, r3
 800054c:	3808      	subs	r0, #8
 800054e:	4084      	lsls	r4, r0
 8000550:	000b      	movs	r3, r1
 8000552:	464d      	mov	r5, r9
 8000554:	4323      	orrs	r3, r4
 8000556:	4698      	mov	r8, r3
 8000558:	4085      	lsls	r5, r0
 800055a:	4823      	ldr	r0, [pc, #140]	; (80005e8 <__aeabi_ddiv+0x394>)
 800055c:	1a83      	subs	r3, r0, r2
 800055e:	469b      	mov	fp, r3
 8000560:	2300      	movs	r3, #0
 8000562:	4699      	mov	r9, r3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	e69a      	b.n	800029e <__aeabi_ddiv+0x4a>
 8000568:	464b      	mov	r3, r9
 800056a:	4323      	orrs	r3, r4
 800056c:	4698      	mov	r8, r3
 800056e:	d11d      	bne.n	80005ac <__aeabi_ddiv+0x358>
 8000570:	2308      	movs	r3, #8
 8000572:	4699      	mov	r9, r3
 8000574:	3b06      	subs	r3, #6
 8000576:	2500      	movs	r5, #0
 8000578:	4683      	mov	fp, r0
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	e68f      	b.n	800029e <__aeabi_ddiv+0x4a>
 800057e:	4652      	mov	r2, sl
 8000580:	4322      	orrs	r2, r4
 8000582:	d109      	bne.n	8000598 <__aeabi_ddiv+0x344>
 8000584:	2302      	movs	r3, #2
 8000586:	4649      	mov	r1, r9
 8000588:	4319      	orrs	r1, r3
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <__aeabi_ddiv+0x398>)
 800058c:	4689      	mov	r9, r1
 800058e:	469c      	mov	ip, r3
 8000590:	2400      	movs	r4, #0
 8000592:	2002      	movs	r0, #2
 8000594:	44e3      	add	fp, ip
 8000596:	e69d      	b.n	80002d4 <__aeabi_ddiv+0x80>
 8000598:	2303      	movs	r3, #3
 800059a:	464a      	mov	r2, r9
 800059c:	431a      	orrs	r2, r3
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <__aeabi_ddiv+0x398>)
 80005a0:	4691      	mov	r9, r2
 80005a2:	469c      	mov	ip, r3
 80005a4:	4652      	mov	r2, sl
 80005a6:	2003      	movs	r0, #3
 80005a8:	44e3      	add	fp, ip
 80005aa:	e693      	b.n	80002d4 <__aeabi_ddiv+0x80>
 80005ac:	230c      	movs	r3, #12
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	46a0      	mov	r8, r4
 80005b4:	4683      	mov	fp, r0
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e671      	b.n	800029e <__aeabi_ddiv+0x4a>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	e669      	b.n	800029e <__aeabi_ddiv+0x4a>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	fffffc01 	.word	0xfffffc01
 80005d4:	08005014 	.word	0x08005014
 80005d8:	000003ff 	.word	0x000003ff
 80005dc:	feffffff 	.word	0xfeffffff
 80005e0:	000007fe 	.word	0x000007fe
 80005e4:	000003f3 	.word	0x000003f3
 80005e8:	fffffc0d 	.word	0xfffffc0d
 80005ec:	fffff801 	.word	0xfffff801
 80005f0:	4649      	mov	r1, r9
 80005f2:	2301      	movs	r3, #1
 80005f4:	4319      	orrs	r1, r3
 80005f6:	4689      	mov	r9, r1
 80005f8:	2400      	movs	r4, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	e66a      	b.n	80002d4 <__aeabi_ddiv+0x80>
 80005fe:	2300      	movs	r3, #0
 8000600:	2480      	movs	r4, #128	; 0x80
 8000602:	469a      	mov	sl, r3
 8000604:	2500      	movs	r5, #0
 8000606:	4b8a      	ldr	r3, [pc, #552]	; (8000830 <__aeabi_ddiv+0x5dc>)
 8000608:	0324      	lsls	r4, r4, #12
 800060a:	e67a      	b.n	8000302 <__aeabi_ddiv+0xae>
 800060c:	2501      	movs	r5, #1
 800060e:	426d      	negs	r5, r5
 8000610:	2301      	movs	r3, #1
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	2b38      	cmp	r3, #56	; 0x38
 8000616:	dd00      	ble.n	800061a <__aeabi_ddiv+0x3c6>
 8000618:	e670      	b.n	80002fc <__aeabi_ddiv+0xa8>
 800061a:	2b1f      	cmp	r3, #31
 800061c:	dc00      	bgt.n	8000620 <__aeabi_ddiv+0x3cc>
 800061e:	e0bf      	b.n	80007a0 <__aeabi_ddiv+0x54c>
 8000620:	211f      	movs	r1, #31
 8000622:	4249      	negs	r1, r1
 8000624:	1a8a      	subs	r2, r1, r2
 8000626:	4641      	mov	r1, r8
 8000628:	40d1      	lsrs	r1, r2
 800062a:	000a      	movs	r2, r1
 800062c:	2b20      	cmp	r3, #32
 800062e:	d004      	beq.n	800063a <__aeabi_ddiv+0x3e6>
 8000630:	4641      	mov	r1, r8
 8000632:	4b80      	ldr	r3, [pc, #512]	; (8000834 <__aeabi_ddiv+0x5e0>)
 8000634:	445b      	add	r3, fp
 8000636:	4099      	lsls	r1, r3
 8000638:	430d      	orrs	r5, r1
 800063a:	1e6b      	subs	r3, r5, #1
 800063c:	419d      	sbcs	r5, r3
 800063e:	2307      	movs	r3, #7
 8000640:	432a      	orrs	r2, r5
 8000642:	001d      	movs	r5, r3
 8000644:	2400      	movs	r4, #0
 8000646:	4015      	ands	r5, r2
 8000648:	4213      	tst	r3, r2
 800064a:	d100      	bne.n	800064e <__aeabi_ddiv+0x3fa>
 800064c:	e0d4      	b.n	80007f8 <__aeabi_ddiv+0x5a4>
 800064e:	210f      	movs	r1, #15
 8000650:	2300      	movs	r3, #0
 8000652:	4011      	ands	r1, r2
 8000654:	2904      	cmp	r1, #4
 8000656:	d100      	bne.n	800065a <__aeabi_ddiv+0x406>
 8000658:	e0cb      	b.n	80007f2 <__aeabi_ddiv+0x59e>
 800065a:	1d11      	adds	r1, r2, #4
 800065c:	4291      	cmp	r1, r2
 800065e:	4192      	sbcs	r2, r2
 8000660:	4252      	negs	r2, r2
 8000662:	189b      	adds	r3, r3, r2
 8000664:	000a      	movs	r2, r1
 8000666:	0219      	lsls	r1, r3, #8
 8000668:	d400      	bmi.n	800066c <__aeabi_ddiv+0x418>
 800066a:	e0c2      	b.n	80007f2 <__aeabi_ddiv+0x59e>
 800066c:	2301      	movs	r3, #1
 800066e:	2400      	movs	r4, #0
 8000670:	2500      	movs	r5, #0
 8000672:	e646      	b.n	8000302 <__aeabi_ddiv+0xae>
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	4641      	mov	r1, r8
 8000678:	031b      	lsls	r3, r3, #12
 800067a:	4219      	tst	r1, r3
 800067c:	d008      	beq.n	8000690 <__aeabi_ddiv+0x43c>
 800067e:	421c      	tst	r4, r3
 8000680:	d106      	bne.n	8000690 <__aeabi_ddiv+0x43c>
 8000682:	431c      	orrs	r4, r3
 8000684:	0324      	lsls	r4, r4, #12
 8000686:	46ba      	mov	sl, r7
 8000688:	0015      	movs	r5, r2
 800068a:	4b69      	ldr	r3, [pc, #420]	; (8000830 <__aeabi_ddiv+0x5dc>)
 800068c:	0b24      	lsrs	r4, r4, #12
 800068e:	e638      	b.n	8000302 <__aeabi_ddiv+0xae>
 8000690:	2480      	movs	r4, #128	; 0x80
 8000692:	4643      	mov	r3, r8
 8000694:	0324      	lsls	r4, r4, #12
 8000696:	431c      	orrs	r4, r3
 8000698:	0324      	lsls	r4, r4, #12
 800069a:	46b2      	mov	sl, r6
 800069c:	4b64      	ldr	r3, [pc, #400]	; (8000830 <__aeabi_ddiv+0x5dc>)
 800069e:	0b24      	lsrs	r4, r4, #12
 80006a0:	e62f      	b.n	8000302 <__aeabi_ddiv+0xae>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_ddiv+0x454>
 80006a6:	e703      	b.n	80004b0 <__aeabi_ddiv+0x25c>
 80006a8:	19a6      	adds	r6, r4, r6
 80006aa:	1e68      	subs	r0, r5, #1
 80006ac:	42a6      	cmp	r6, r4
 80006ae:	d200      	bcs.n	80006b2 <__aeabi_ddiv+0x45e>
 80006b0:	e08d      	b.n	80007ce <__aeabi_ddiv+0x57a>
 80006b2:	428e      	cmp	r6, r1
 80006b4:	d200      	bcs.n	80006b8 <__aeabi_ddiv+0x464>
 80006b6:	e0a3      	b.n	8000800 <__aeabi_ddiv+0x5ac>
 80006b8:	d100      	bne.n	80006bc <__aeabi_ddiv+0x468>
 80006ba:	e0b3      	b.n	8000824 <__aeabi_ddiv+0x5d0>
 80006bc:	0005      	movs	r5, r0
 80006be:	e6f5      	b.n	80004ac <__aeabi_ddiv+0x258>
 80006c0:	42aa      	cmp	r2, r5
 80006c2:	d900      	bls.n	80006c6 <__aeabi_ddiv+0x472>
 80006c4:	e639      	b.n	800033a <__aeabi_ddiv+0xe6>
 80006c6:	4643      	mov	r3, r8
 80006c8:	07de      	lsls	r6, r3, #31
 80006ca:	0858      	lsrs	r0, r3, #1
 80006cc:	086b      	lsrs	r3, r5, #1
 80006ce:	431e      	orrs	r6, r3
 80006d0:	07ed      	lsls	r5, r5, #31
 80006d2:	e639      	b.n	8000348 <__aeabi_ddiv+0xf4>
 80006d4:	4648      	mov	r0, r9
 80006d6:	f000 fce9 	bl	80010ac <__clzsi2>
 80006da:	0001      	movs	r1, r0
 80006dc:	0002      	movs	r2, r0
 80006de:	3115      	adds	r1, #21
 80006e0:	3220      	adds	r2, #32
 80006e2:	291c      	cmp	r1, #28
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_ddiv+0x494>
 80006e6:	e72c      	b.n	8000542 <__aeabi_ddiv+0x2ee>
 80006e8:	464b      	mov	r3, r9
 80006ea:	3808      	subs	r0, #8
 80006ec:	4083      	lsls	r3, r0
 80006ee:	2500      	movs	r5, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	e732      	b.n	800055a <__aeabi_ddiv+0x306>
 80006f4:	f000 fcda 	bl	80010ac <__clzsi2>
 80006f8:	0003      	movs	r3, r0
 80006fa:	001a      	movs	r2, r3
 80006fc:	3215      	adds	r2, #21
 80006fe:	3020      	adds	r0, #32
 8000700:	2a1c      	cmp	r2, #28
 8000702:	dc00      	bgt.n	8000706 <__aeabi_ddiv+0x4b2>
 8000704:	e700      	b.n	8000508 <__aeabi_ddiv+0x2b4>
 8000706:	4654      	mov	r4, sl
 8000708:	3b08      	subs	r3, #8
 800070a:	2200      	movs	r2, #0
 800070c:	409c      	lsls	r4, r3
 800070e:	e705      	b.n	800051c <__aeabi_ddiv+0x2c8>
 8000710:	1936      	adds	r6, r6, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	42b4      	cmp	r4, r6
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x4c6>
 8000718:	e6a6      	b.n	8000468 <__aeabi_ddiv+0x214>
 800071a:	42b2      	cmp	r2, r6
 800071c:	d800      	bhi.n	8000720 <__aeabi_ddiv+0x4cc>
 800071e:	e6a3      	b.n	8000468 <__aeabi_ddiv+0x214>
 8000720:	1e83      	subs	r3, r0, #2
 8000722:	1936      	adds	r6, r6, r4
 8000724:	e6a0      	b.n	8000468 <__aeabi_ddiv+0x214>
 8000726:	1909      	adds	r1, r1, r4
 8000728:	3d01      	subs	r5, #1
 800072a:	428c      	cmp	r4, r1
 800072c:	d900      	bls.n	8000730 <__aeabi_ddiv+0x4dc>
 800072e:	e68d      	b.n	800044c <__aeabi_ddiv+0x1f8>
 8000730:	428a      	cmp	r2, r1
 8000732:	d800      	bhi.n	8000736 <__aeabi_ddiv+0x4e2>
 8000734:	e68a      	b.n	800044c <__aeabi_ddiv+0x1f8>
 8000736:	1e85      	subs	r5, r0, #2
 8000738:	1909      	adds	r1, r1, r4
 800073a:	e687      	b.n	800044c <__aeabi_ddiv+0x1f8>
 800073c:	230f      	movs	r3, #15
 800073e:	402b      	ands	r3, r5
 8000740:	2b04      	cmp	r3, #4
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x4f2>
 8000744:	e6bc      	b.n	80004c0 <__aeabi_ddiv+0x26c>
 8000746:	2305      	movs	r3, #5
 8000748:	425b      	negs	r3, r3
 800074a:	42ab      	cmp	r3, r5
 800074c:	419b      	sbcs	r3, r3
 800074e:	3504      	adds	r5, #4
 8000750:	425b      	negs	r3, r3
 8000752:	08ed      	lsrs	r5, r5, #3
 8000754:	4498      	add	r8, r3
 8000756:	e6b4      	b.n	80004c2 <__aeabi_ddiv+0x26e>
 8000758:	42af      	cmp	r7, r5
 800075a:	d900      	bls.n	800075e <__aeabi_ddiv+0x50a>
 800075c:	e660      	b.n	8000420 <__aeabi_ddiv+0x1cc>
 800075e:	4282      	cmp	r2, r0
 8000760:	d804      	bhi.n	800076c <__aeabi_ddiv+0x518>
 8000762:	d000      	beq.n	8000766 <__aeabi_ddiv+0x512>
 8000764:	e65c      	b.n	8000420 <__aeabi_ddiv+0x1cc>
 8000766:	42ae      	cmp	r6, r5
 8000768:	d800      	bhi.n	800076c <__aeabi_ddiv+0x518>
 800076a:	e659      	b.n	8000420 <__aeabi_ddiv+0x1cc>
 800076c:	2302      	movs	r3, #2
 800076e:	425b      	negs	r3, r3
 8000770:	469c      	mov	ip, r3
 8000772:	9b00      	ldr	r3, [sp, #0]
 8000774:	44e0      	add	r8, ip
 8000776:	469c      	mov	ip, r3
 8000778:	4465      	add	r5, ip
 800077a:	429d      	cmp	r5, r3
 800077c:	419b      	sbcs	r3, r3
 800077e:	425b      	negs	r3, r3
 8000780:	191b      	adds	r3, r3, r4
 8000782:	18c0      	adds	r0, r0, r3
 8000784:	e64d      	b.n	8000422 <__aeabi_ddiv+0x1ce>
 8000786:	428a      	cmp	r2, r1
 8000788:	d800      	bhi.n	800078c <__aeabi_ddiv+0x538>
 800078a:	e60e      	b.n	80003aa <__aeabi_ddiv+0x156>
 800078c:	1e83      	subs	r3, r0, #2
 800078e:	1909      	adds	r1, r1, r4
 8000790:	e60b      	b.n	80003aa <__aeabi_ddiv+0x156>
 8000792:	428a      	cmp	r2, r1
 8000794:	d800      	bhi.n	8000798 <__aeabi_ddiv+0x544>
 8000796:	e5f4      	b.n	8000382 <__aeabi_ddiv+0x12e>
 8000798:	1e83      	subs	r3, r0, #2
 800079a:	4698      	mov	r8, r3
 800079c:	1909      	adds	r1, r1, r4
 800079e:	e5f0      	b.n	8000382 <__aeabi_ddiv+0x12e>
 80007a0:	4925      	ldr	r1, [pc, #148]	; (8000838 <__aeabi_ddiv+0x5e4>)
 80007a2:	0028      	movs	r0, r5
 80007a4:	4459      	add	r1, fp
 80007a6:	408d      	lsls	r5, r1
 80007a8:	4642      	mov	r2, r8
 80007aa:	408a      	lsls	r2, r1
 80007ac:	1e69      	subs	r1, r5, #1
 80007ae:	418d      	sbcs	r5, r1
 80007b0:	4641      	mov	r1, r8
 80007b2:	40d8      	lsrs	r0, r3
 80007b4:	40d9      	lsrs	r1, r3
 80007b6:	4302      	orrs	r2, r0
 80007b8:	432a      	orrs	r2, r5
 80007ba:	000b      	movs	r3, r1
 80007bc:	0751      	lsls	r1, r2, #29
 80007be:	d100      	bne.n	80007c2 <__aeabi_ddiv+0x56e>
 80007c0:	e751      	b.n	8000666 <__aeabi_ddiv+0x412>
 80007c2:	210f      	movs	r1, #15
 80007c4:	4011      	ands	r1, r2
 80007c6:	2904      	cmp	r1, #4
 80007c8:	d000      	beq.n	80007cc <__aeabi_ddiv+0x578>
 80007ca:	e746      	b.n	800065a <__aeabi_ddiv+0x406>
 80007cc:	e74b      	b.n	8000666 <__aeabi_ddiv+0x412>
 80007ce:	0005      	movs	r5, r0
 80007d0:	428e      	cmp	r6, r1
 80007d2:	d000      	beq.n	80007d6 <__aeabi_ddiv+0x582>
 80007d4:	e66a      	b.n	80004ac <__aeabi_ddiv+0x258>
 80007d6:	9a00      	ldr	r2, [sp, #0]
 80007d8:	4293      	cmp	r3, r2
 80007da:	d000      	beq.n	80007de <__aeabi_ddiv+0x58a>
 80007dc:	e666      	b.n	80004ac <__aeabi_ddiv+0x258>
 80007de:	e667      	b.n	80004b0 <__aeabi_ddiv+0x25c>
 80007e0:	4a16      	ldr	r2, [pc, #88]	; (800083c <__aeabi_ddiv+0x5e8>)
 80007e2:	445a      	add	r2, fp
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	dc00      	bgt.n	80007ea <__aeabi_ddiv+0x596>
 80007e8:	e710      	b.n	800060c <__aeabi_ddiv+0x3b8>
 80007ea:	2301      	movs	r3, #1
 80007ec:	2500      	movs	r5, #0
 80007ee:	4498      	add	r8, r3
 80007f0:	e667      	b.n	80004c2 <__aeabi_ddiv+0x26e>
 80007f2:	075d      	lsls	r5, r3, #29
 80007f4:	025b      	lsls	r3, r3, #9
 80007f6:	0b1c      	lsrs	r4, r3, #12
 80007f8:	08d2      	lsrs	r2, r2, #3
 80007fa:	2300      	movs	r3, #0
 80007fc:	4315      	orrs	r5, r2
 80007fe:	e580      	b.n	8000302 <__aeabi_ddiv+0xae>
 8000800:	9800      	ldr	r0, [sp, #0]
 8000802:	3d02      	subs	r5, #2
 8000804:	0042      	lsls	r2, r0, #1
 8000806:	4282      	cmp	r2, r0
 8000808:	41bf      	sbcs	r7, r7
 800080a:	427f      	negs	r7, r7
 800080c:	193c      	adds	r4, r7, r4
 800080e:	1936      	adds	r6, r6, r4
 8000810:	9200      	str	r2, [sp, #0]
 8000812:	e7dd      	b.n	80007d0 <__aeabi_ddiv+0x57c>
 8000814:	2480      	movs	r4, #128	; 0x80
 8000816:	4643      	mov	r3, r8
 8000818:	0324      	lsls	r4, r4, #12
 800081a:	431c      	orrs	r4, r3
 800081c:	0324      	lsls	r4, r4, #12
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__aeabi_ddiv+0x5dc>)
 8000820:	0b24      	lsrs	r4, r4, #12
 8000822:	e56e      	b.n	8000302 <__aeabi_ddiv+0xae>
 8000824:	9a00      	ldr	r2, [sp, #0]
 8000826:	429a      	cmp	r2, r3
 8000828:	d3ea      	bcc.n	8000800 <__aeabi_ddiv+0x5ac>
 800082a:	0005      	movs	r5, r0
 800082c:	e7d3      	b.n	80007d6 <__aeabi_ddiv+0x582>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	0000043e 	.word	0x0000043e
 8000838:	0000041e 	.word	0x0000041e
 800083c:	000003ff 	.word	0x000003ff

08000840 <__aeabi_dsub>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	4657      	mov	r7, sl
 8000844:	464e      	mov	r6, r9
 8000846:	4645      	mov	r5, r8
 8000848:	46de      	mov	lr, fp
 800084a:	b5e0      	push	{r5, r6, r7, lr}
 800084c:	001e      	movs	r6, r3
 800084e:	0017      	movs	r7, r2
 8000850:	004a      	lsls	r2, r1, #1
 8000852:	030b      	lsls	r3, r1, #12
 8000854:	0d52      	lsrs	r2, r2, #21
 8000856:	0a5b      	lsrs	r3, r3, #9
 8000858:	4690      	mov	r8, r2
 800085a:	0f42      	lsrs	r2, r0, #29
 800085c:	431a      	orrs	r2, r3
 800085e:	0fcd      	lsrs	r5, r1, #31
 8000860:	4ccd      	ldr	r4, [pc, #820]	; (8000b98 <__aeabi_dsub+0x358>)
 8000862:	0331      	lsls	r1, r6, #12
 8000864:	00c3      	lsls	r3, r0, #3
 8000866:	4694      	mov	ip, r2
 8000868:	0070      	lsls	r0, r6, #1
 800086a:	0f7a      	lsrs	r2, r7, #29
 800086c:	0a49      	lsrs	r1, r1, #9
 800086e:	00ff      	lsls	r7, r7, #3
 8000870:	469a      	mov	sl, r3
 8000872:	46b9      	mov	r9, r7
 8000874:	0d40      	lsrs	r0, r0, #21
 8000876:	0ff6      	lsrs	r6, r6, #31
 8000878:	4311      	orrs	r1, r2
 800087a:	42a0      	cmp	r0, r4
 800087c:	d100      	bne.n	8000880 <__aeabi_dsub+0x40>
 800087e:	e0b1      	b.n	80009e4 <__aeabi_dsub+0x1a4>
 8000880:	2201      	movs	r2, #1
 8000882:	4056      	eors	r6, r2
 8000884:	46b3      	mov	fp, r6
 8000886:	42b5      	cmp	r5, r6
 8000888:	d100      	bne.n	800088c <__aeabi_dsub+0x4c>
 800088a:	e088      	b.n	800099e <__aeabi_dsub+0x15e>
 800088c:	4642      	mov	r2, r8
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	2a00      	cmp	r2, #0
 8000892:	dc00      	bgt.n	8000896 <__aeabi_dsub+0x56>
 8000894:	e0ae      	b.n	80009f4 <__aeabi_dsub+0x1b4>
 8000896:	2800      	cmp	r0, #0
 8000898:	d100      	bne.n	800089c <__aeabi_dsub+0x5c>
 800089a:	e0c1      	b.n	8000a20 <__aeabi_dsub+0x1e0>
 800089c:	48be      	ldr	r0, [pc, #760]	; (8000b98 <__aeabi_dsub+0x358>)
 800089e:	4580      	cmp	r8, r0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x64>
 80008a2:	e151      	b.n	8000b48 <__aeabi_dsub+0x308>
 80008a4:	2080      	movs	r0, #128	; 0x80
 80008a6:	0400      	lsls	r0, r0, #16
 80008a8:	4301      	orrs	r1, r0
 80008aa:	2a38      	cmp	r2, #56	; 0x38
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_dsub+0x70>
 80008ae:	e17b      	b.n	8000ba8 <__aeabi_dsub+0x368>
 80008b0:	2a1f      	cmp	r2, #31
 80008b2:	dd00      	ble.n	80008b6 <__aeabi_dsub+0x76>
 80008b4:	e1ee      	b.n	8000c94 <__aeabi_dsub+0x454>
 80008b6:	2020      	movs	r0, #32
 80008b8:	003e      	movs	r6, r7
 80008ba:	1a80      	subs	r0, r0, r2
 80008bc:	000c      	movs	r4, r1
 80008be:	40d6      	lsrs	r6, r2
 80008c0:	40d1      	lsrs	r1, r2
 80008c2:	4087      	lsls	r7, r0
 80008c4:	4662      	mov	r2, ip
 80008c6:	4084      	lsls	r4, r0
 80008c8:	1a52      	subs	r2, r2, r1
 80008ca:	1e78      	subs	r0, r7, #1
 80008cc:	4187      	sbcs	r7, r0
 80008ce:	4694      	mov	ip, r2
 80008d0:	4334      	orrs	r4, r6
 80008d2:	4327      	orrs	r7, r4
 80008d4:	1bdc      	subs	r4, r3, r7
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	419b      	sbcs	r3, r3
 80008da:	4662      	mov	r2, ip
 80008dc:	425b      	negs	r3, r3
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	4699      	mov	r9, r3
 80008e2:	464b      	mov	r3, r9
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	d400      	bmi.n	80008ea <__aeabi_dsub+0xaa>
 80008e8:	e118      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 80008ea:	464b      	mov	r3, r9
 80008ec:	0258      	lsls	r0, r3, #9
 80008ee:	0a43      	lsrs	r3, r0, #9
 80008f0:	4699      	mov	r9, r3
 80008f2:	464b      	mov	r3, r9
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_dsub+0xba>
 80008f8:	e137      	b.n	8000b6a <__aeabi_dsub+0x32a>
 80008fa:	4648      	mov	r0, r9
 80008fc:	f000 fbd6 	bl	80010ac <__clzsi2>
 8000900:	0001      	movs	r1, r0
 8000902:	3908      	subs	r1, #8
 8000904:	2320      	movs	r3, #32
 8000906:	0022      	movs	r2, r4
 8000908:	4648      	mov	r0, r9
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	40da      	lsrs	r2, r3
 800090e:	4088      	lsls	r0, r1
 8000910:	408c      	lsls	r4, r1
 8000912:	4643      	mov	r3, r8
 8000914:	4310      	orrs	r0, r2
 8000916:	4588      	cmp	r8, r1
 8000918:	dd00      	ble.n	800091c <__aeabi_dsub+0xdc>
 800091a:	e136      	b.n	8000b8a <__aeabi_dsub+0x34a>
 800091c:	1ac9      	subs	r1, r1, r3
 800091e:	1c4b      	adds	r3, r1, #1
 8000920:	2b1f      	cmp	r3, #31
 8000922:	dd00      	ble.n	8000926 <__aeabi_dsub+0xe6>
 8000924:	e0ea      	b.n	8000afc <__aeabi_dsub+0x2bc>
 8000926:	2220      	movs	r2, #32
 8000928:	0026      	movs	r6, r4
 800092a:	1ad2      	subs	r2, r2, r3
 800092c:	0001      	movs	r1, r0
 800092e:	4094      	lsls	r4, r2
 8000930:	40de      	lsrs	r6, r3
 8000932:	40d8      	lsrs	r0, r3
 8000934:	2300      	movs	r3, #0
 8000936:	4091      	lsls	r1, r2
 8000938:	1e62      	subs	r2, r4, #1
 800093a:	4194      	sbcs	r4, r2
 800093c:	4681      	mov	r9, r0
 800093e:	4698      	mov	r8, r3
 8000940:	4331      	orrs	r1, r6
 8000942:	430c      	orrs	r4, r1
 8000944:	0763      	lsls	r3, r4, #29
 8000946:	d009      	beq.n	800095c <__aeabi_dsub+0x11c>
 8000948:	230f      	movs	r3, #15
 800094a:	4023      	ands	r3, r4
 800094c:	2b04      	cmp	r3, #4
 800094e:	d005      	beq.n	800095c <__aeabi_dsub+0x11c>
 8000950:	1d23      	adds	r3, r4, #4
 8000952:	42a3      	cmp	r3, r4
 8000954:	41a4      	sbcs	r4, r4
 8000956:	4264      	negs	r4, r4
 8000958:	44a1      	add	r9, r4
 800095a:	001c      	movs	r4, r3
 800095c:	464b      	mov	r3, r9
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	d400      	bmi.n	8000964 <__aeabi_dsub+0x124>
 8000962:	e0de      	b.n	8000b22 <__aeabi_dsub+0x2e2>
 8000964:	4641      	mov	r1, r8
 8000966:	4b8c      	ldr	r3, [pc, #560]	; (8000b98 <__aeabi_dsub+0x358>)
 8000968:	3101      	adds	r1, #1
 800096a:	4299      	cmp	r1, r3
 800096c:	d100      	bne.n	8000970 <__aeabi_dsub+0x130>
 800096e:	e0e7      	b.n	8000b40 <__aeabi_dsub+0x300>
 8000970:	464b      	mov	r3, r9
 8000972:	488a      	ldr	r0, [pc, #552]	; (8000b9c <__aeabi_dsub+0x35c>)
 8000974:	08e4      	lsrs	r4, r4, #3
 8000976:	4003      	ands	r3, r0
 8000978:	0018      	movs	r0, r3
 800097a:	0549      	lsls	r1, r1, #21
 800097c:	075b      	lsls	r3, r3, #29
 800097e:	0240      	lsls	r0, r0, #9
 8000980:	4323      	orrs	r3, r4
 8000982:	0d4a      	lsrs	r2, r1, #21
 8000984:	0b04      	lsrs	r4, r0, #12
 8000986:	0512      	lsls	r2, r2, #20
 8000988:	07ed      	lsls	r5, r5, #31
 800098a:	4322      	orrs	r2, r4
 800098c:	432a      	orrs	r2, r5
 800098e:	0018      	movs	r0, r3
 8000990:	0011      	movs	r1, r2
 8000992:	bcf0      	pop	{r4, r5, r6, r7}
 8000994:	46bb      	mov	fp, r7
 8000996:	46b2      	mov	sl, r6
 8000998:	46a9      	mov	r9, r5
 800099a:	46a0      	mov	r8, r4
 800099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099e:	4642      	mov	r2, r8
 80009a0:	1a12      	subs	r2, r2, r0
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	dd52      	ble.n	8000a4c <__aeabi_dsub+0x20c>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_dsub+0x16c>
 80009aa:	e09c      	b.n	8000ae6 <__aeabi_dsub+0x2a6>
 80009ac:	45a0      	cmp	r8, r4
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dsub+0x172>
 80009b0:	e0ca      	b.n	8000b48 <__aeabi_dsub+0x308>
 80009b2:	2080      	movs	r0, #128	; 0x80
 80009b4:	0400      	lsls	r0, r0, #16
 80009b6:	4301      	orrs	r1, r0
 80009b8:	2a38      	cmp	r2, #56	; 0x38
 80009ba:	dd00      	ble.n	80009be <__aeabi_dsub+0x17e>
 80009bc:	e149      	b.n	8000c52 <__aeabi_dsub+0x412>
 80009be:	2a1f      	cmp	r2, #31
 80009c0:	dc00      	bgt.n	80009c4 <__aeabi_dsub+0x184>
 80009c2:	e197      	b.n	8000cf4 <__aeabi_dsub+0x4b4>
 80009c4:	0010      	movs	r0, r2
 80009c6:	000e      	movs	r6, r1
 80009c8:	3820      	subs	r0, #32
 80009ca:	40c6      	lsrs	r6, r0
 80009cc:	2a20      	cmp	r2, #32
 80009ce:	d004      	beq.n	80009da <__aeabi_dsub+0x19a>
 80009d0:	2040      	movs	r0, #64	; 0x40
 80009d2:	1a82      	subs	r2, r0, r2
 80009d4:	4091      	lsls	r1, r2
 80009d6:	430f      	orrs	r7, r1
 80009d8:	46b9      	mov	r9, r7
 80009da:	464c      	mov	r4, r9
 80009dc:	1e62      	subs	r2, r4, #1
 80009de:	4194      	sbcs	r4, r2
 80009e0:	4334      	orrs	r4, r6
 80009e2:	e13a      	b.n	8000c5a <__aeabi_dsub+0x41a>
 80009e4:	000a      	movs	r2, r1
 80009e6:	433a      	orrs	r2, r7
 80009e8:	d028      	beq.n	8000a3c <__aeabi_dsub+0x1fc>
 80009ea:	46b3      	mov	fp, r6
 80009ec:	42b5      	cmp	r5, r6
 80009ee:	d02b      	beq.n	8000a48 <__aeabi_dsub+0x208>
 80009f0:	4a6b      	ldr	r2, [pc, #428]	; (8000ba0 <__aeabi_dsub+0x360>)
 80009f2:	4442      	add	r2, r8
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	d05d      	beq.n	8000ab4 <__aeabi_dsub+0x274>
 80009f8:	4642      	mov	r2, r8
 80009fa:	4644      	mov	r4, r8
 80009fc:	1a82      	subs	r2, r0, r2
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d000      	beq.n	8000a04 <__aeabi_dsub+0x1c4>
 8000a02:	e0f5      	b.n	8000bf0 <__aeabi_dsub+0x3b0>
 8000a04:	4665      	mov	r5, ip
 8000a06:	431d      	orrs	r5, r3
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dsub+0x1cc>
 8000a0a:	e19c      	b.n	8000d46 <__aeabi_dsub+0x506>
 8000a0c:	1e55      	subs	r5, r2, #1
 8000a0e:	2a01      	cmp	r2, #1
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dsub+0x1d4>
 8000a12:	e1fb      	b.n	8000e0c <__aeabi_dsub+0x5cc>
 8000a14:	4c60      	ldr	r4, [pc, #384]	; (8000b98 <__aeabi_dsub+0x358>)
 8000a16:	42a2      	cmp	r2, r4
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dsub+0x1dc>
 8000a1a:	e1bd      	b.n	8000d98 <__aeabi_dsub+0x558>
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	e0f0      	b.n	8000c02 <__aeabi_dsub+0x3c2>
 8000a20:	0008      	movs	r0, r1
 8000a22:	4338      	orrs	r0, r7
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dsub+0x1e8>
 8000a26:	e0c3      	b.n	8000bb0 <__aeabi_dsub+0x370>
 8000a28:	1e50      	subs	r0, r2, #1
 8000a2a:	2a01      	cmp	r2, #1
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dsub+0x1f0>
 8000a2e:	e1a8      	b.n	8000d82 <__aeabi_dsub+0x542>
 8000a30:	4c59      	ldr	r4, [pc, #356]	; (8000b98 <__aeabi_dsub+0x358>)
 8000a32:	42a2      	cmp	r2, r4
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dsub+0x1f8>
 8000a36:	e087      	b.n	8000b48 <__aeabi_dsub+0x308>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	e736      	b.n	80008aa <__aeabi_dsub+0x6a>
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4056      	eors	r6, r2
 8000a40:	46b3      	mov	fp, r6
 8000a42:	42b5      	cmp	r5, r6
 8000a44:	d000      	beq.n	8000a48 <__aeabi_dsub+0x208>
 8000a46:	e721      	b.n	800088c <__aeabi_dsub+0x4c>
 8000a48:	4a55      	ldr	r2, [pc, #340]	; (8000ba0 <__aeabi_dsub+0x360>)
 8000a4a:	4442      	add	r2, r8
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dsub+0x212>
 8000a50:	e0b5      	b.n	8000bbe <__aeabi_dsub+0x37e>
 8000a52:	4642      	mov	r2, r8
 8000a54:	4644      	mov	r4, r8
 8000a56:	1a82      	subs	r2, r0, r2
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dsub+0x21e>
 8000a5c:	e138      	b.n	8000cd0 <__aeabi_dsub+0x490>
 8000a5e:	4e4e      	ldr	r6, [pc, #312]	; (8000b98 <__aeabi_dsub+0x358>)
 8000a60:	42b0      	cmp	r0, r6
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dsub+0x226>
 8000a64:	e1de      	b.n	8000e24 <__aeabi_dsub+0x5e4>
 8000a66:	2680      	movs	r6, #128	; 0x80
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0436      	lsls	r6, r6, #16
 8000a6c:	4334      	orrs	r4, r6
 8000a6e:	46a4      	mov	ip, r4
 8000a70:	2a38      	cmp	r2, #56	; 0x38
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_dsub+0x236>
 8000a74:	e196      	b.n	8000da4 <__aeabi_dsub+0x564>
 8000a76:	2a1f      	cmp	r2, #31
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_dsub+0x23c>
 8000a7a:	e224      	b.n	8000ec6 <__aeabi_dsub+0x686>
 8000a7c:	2620      	movs	r6, #32
 8000a7e:	1ab4      	subs	r4, r6, r2
 8000a80:	46a2      	mov	sl, r4
 8000a82:	4664      	mov	r4, ip
 8000a84:	4656      	mov	r6, sl
 8000a86:	40b4      	lsls	r4, r6
 8000a88:	46a1      	mov	r9, r4
 8000a8a:	001c      	movs	r4, r3
 8000a8c:	464e      	mov	r6, r9
 8000a8e:	40d4      	lsrs	r4, r2
 8000a90:	4326      	orrs	r6, r4
 8000a92:	0034      	movs	r4, r6
 8000a94:	4656      	mov	r6, sl
 8000a96:	40b3      	lsls	r3, r6
 8000a98:	1e5e      	subs	r6, r3, #1
 8000a9a:	41b3      	sbcs	r3, r6
 8000a9c:	431c      	orrs	r4, r3
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	40d3      	lsrs	r3, r2
 8000aa2:	18c9      	adds	r1, r1, r3
 8000aa4:	19e4      	adds	r4, r4, r7
 8000aa6:	42bc      	cmp	r4, r7
 8000aa8:	41bf      	sbcs	r7, r7
 8000aaa:	427f      	negs	r7, r7
 8000aac:	46b9      	mov	r9, r7
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4489      	add	r9, r1
 8000ab2:	e0d8      	b.n	8000c66 <__aeabi_dsub+0x426>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	4c3b      	ldr	r4, [pc, #236]	; (8000ba4 <__aeabi_dsub+0x364>)
 8000ab8:	3001      	adds	r0, #1
 8000aba:	4220      	tst	r0, r4
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_dsub+0x280>
 8000abe:	e0b4      	b.n	8000c2a <__aeabi_dsub+0x3ea>
 8000ac0:	4640      	mov	r0, r8
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_dsub+0x288>
 8000ac6:	e144      	b.n	8000d52 <__aeabi_dsub+0x512>
 8000ac8:	4660      	mov	r0, ip
 8000aca:	4318      	orrs	r0, r3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dsub+0x290>
 8000ace:	e190      	b.n	8000df2 <__aeabi_dsub+0x5b2>
 8000ad0:	0008      	movs	r0, r1
 8000ad2:	4338      	orrs	r0, r7
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_dsub+0x298>
 8000ad6:	e1aa      	b.n	8000e2e <__aeabi_dsub+0x5ee>
 8000ad8:	4661      	mov	r1, ip
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	0749      	lsls	r1, r1, #29
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	08cc      	lsrs	r4, r1, #3
 8000ae4:	e027      	b.n	8000b36 <__aeabi_dsub+0x2f6>
 8000ae6:	0008      	movs	r0, r1
 8000ae8:	4338      	orrs	r0, r7
 8000aea:	d061      	beq.n	8000bb0 <__aeabi_dsub+0x370>
 8000aec:	1e50      	subs	r0, r2, #1
 8000aee:	2a01      	cmp	r2, #1
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dsub+0x2b4>
 8000af2:	e139      	b.n	8000d68 <__aeabi_dsub+0x528>
 8000af4:	42a2      	cmp	r2, r4
 8000af6:	d027      	beq.n	8000b48 <__aeabi_dsub+0x308>
 8000af8:	0002      	movs	r2, r0
 8000afa:	e75d      	b.n	80009b8 <__aeabi_dsub+0x178>
 8000afc:	0002      	movs	r2, r0
 8000afe:	391f      	subs	r1, #31
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	0011      	movs	r1, r2
 8000b04:	2b20      	cmp	r3, #32
 8000b06:	d003      	beq.n	8000b10 <__aeabi_dsub+0x2d0>
 8000b08:	2240      	movs	r2, #64	; 0x40
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	4098      	lsls	r0, r3
 8000b0e:	4304      	orrs	r4, r0
 8000b10:	1e63      	subs	r3, r4, #1
 8000b12:	419c      	sbcs	r4, r3
 8000b14:	2300      	movs	r3, #0
 8000b16:	4699      	mov	r9, r3
 8000b18:	4698      	mov	r8, r3
 8000b1a:	430c      	orrs	r4, r1
 8000b1c:	0763      	lsls	r3, r4, #29
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dsub+0x2e2>
 8000b20:	e712      	b.n	8000948 <__aeabi_dsub+0x108>
 8000b22:	464b      	mov	r3, r9
 8000b24:	464a      	mov	r2, r9
 8000b26:	08e4      	lsrs	r4, r4, #3
 8000b28:	075b      	lsls	r3, r3, #29
 8000b2a:	4323      	orrs	r3, r4
 8000b2c:	08d4      	lsrs	r4, r2, #3
 8000b2e:	4642      	mov	r2, r8
 8000b30:	4919      	ldr	r1, [pc, #100]	; (8000b98 <__aeabi_dsub+0x358>)
 8000b32:	428a      	cmp	r2, r1
 8000b34:	d00e      	beq.n	8000b54 <__aeabi_dsub+0x314>
 8000b36:	0324      	lsls	r4, r4, #12
 8000b38:	0552      	lsls	r2, r2, #21
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d52      	lsrs	r2, r2, #21
 8000b3e:	e722      	b.n	8000986 <__aeabi_dsub+0x146>
 8000b40:	000a      	movs	r2, r1
 8000b42:	2400      	movs	r4, #0
 8000b44:	2300      	movs	r3, #0
 8000b46:	e71e      	b.n	8000986 <__aeabi_dsub+0x146>
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	4662      	mov	r2, ip
 8000b4c:	0752      	lsls	r2, r2, #29
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	4662      	mov	r2, ip
 8000b52:	08d4      	lsrs	r4, r2, #3
 8000b54:	001a      	movs	r2, r3
 8000b56:	4322      	orrs	r2, r4
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dsub+0x31c>
 8000b5a:	e1fc      	b.n	8000f56 <__aeabi_dsub+0x716>
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0312      	lsls	r2, r2, #12
 8000b60:	4314      	orrs	r4, r2
 8000b62:	0324      	lsls	r4, r4, #12
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <__aeabi_dsub+0x358>)
 8000b66:	0b24      	lsrs	r4, r4, #12
 8000b68:	e70d      	b.n	8000986 <__aeabi_dsub+0x146>
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f000 fa9e 	bl	80010ac <__clzsi2>
 8000b70:	0001      	movs	r1, r0
 8000b72:	3118      	adds	r1, #24
 8000b74:	291f      	cmp	r1, #31
 8000b76:	dc00      	bgt.n	8000b7a <__aeabi_dsub+0x33a>
 8000b78:	e6c4      	b.n	8000904 <__aeabi_dsub+0xc4>
 8000b7a:	3808      	subs	r0, #8
 8000b7c:	4084      	lsls	r4, r0
 8000b7e:	4643      	mov	r3, r8
 8000b80:	0020      	movs	r0, r4
 8000b82:	2400      	movs	r4, #0
 8000b84:	4588      	cmp	r8, r1
 8000b86:	dc00      	bgt.n	8000b8a <__aeabi_dsub+0x34a>
 8000b88:	e6c8      	b.n	800091c <__aeabi_dsub+0xdc>
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__aeabi_dsub+0x35c>)
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	4010      	ands	r0, r2
 8000b90:	4698      	mov	r8, r3
 8000b92:	4681      	mov	r9, r0
 8000b94:	e6d6      	b.n	8000944 <__aeabi_dsub+0x104>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	000007ff 	.word	0x000007ff
 8000b9c:	ff7fffff 	.word	0xff7fffff
 8000ba0:	fffff801 	.word	0xfffff801
 8000ba4:	000007fe 	.word	0x000007fe
 8000ba8:	430f      	orrs	r7, r1
 8000baa:	1e7a      	subs	r2, r7, #1
 8000bac:	4197      	sbcs	r7, r2
 8000bae:	e691      	b.n	80008d4 <__aeabi_dsub+0x94>
 8000bb0:	4661      	mov	r1, ip
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	0749      	lsls	r1, r1, #29
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	4661      	mov	r1, ip
 8000bba:	08cc      	lsrs	r4, r1, #3
 8000bbc:	e7b8      	b.n	8000b30 <__aeabi_dsub+0x2f0>
 8000bbe:	4640      	mov	r0, r8
 8000bc0:	4cd3      	ldr	r4, [pc, #844]	; (8000f10 <__aeabi_dsub+0x6d0>)
 8000bc2:	3001      	adds	r0, #1
 8000bc4:	4220      	tst	r0, r4
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dsub+0x38a>
 8000bc8:	e0a2      	b.n	8000d10 <__aeabi_dsub+0x4d0>
 8000bca:	4640      	mov	r0, r8
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dsub+0x392>
 8000bd0:	e101      	b.n	8000dd6 <__aeabi_dsub+0x596>
 8000bd2:	4660      	mov	r0, ip
 8000bd4:	4318      	orrs	r0, r3
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dsub+0x39a>
 8000bd8:	e15e      	b.n	8000e98 <__aeabi_dsub+0x658>
 8000bda:	0008      	movs	r0, r1
 8000bdc:	4338      	orrs	r0, r7
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dsub+0x3a2>
 8000be0:	e15f      	b.n	8000ea2 <__aeabi_dsub+0x662>
 8000be2:	4661      	mov	r1, ip
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	0749      	lsls	r1, r1, #29
 8000be8:	430b      	orrs	r3, r1
 8000bea:	4661      	mov	r1, ip
 8000bec:	08cc      	lsrs	r4, r1, #3
 8000bee:	e7a2      	b.n	8000b36 <__aeabi_dsub+0x2f6>
 8000bf0:	4dc8      	ldr	r5, [pc, #800]	; (8000f14 <__aeabi_dsub+0x6d4>)
 8000bf2:	42a8      	cmp	r0, r5
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dsub+0x3b8>
 8000bf6:	e0cf      	b.n	8000d98 <__aeabi_dsub+0x558>
 8000bf8:	2580      	movs	r5, #128	; 0x80
 8000bfa:	4664      	mov	r4, ip
 8000bfc:	042d      	lsls	r5, r5, #16
 8000bfe:	432c      	orrs	r4, r5
 8000c00:	46a4      	mov	ip, r4
 8000c02:	2a38      	cmp	r2, #56	; 0x38
 8000c04:	dc56      	bgt.n	8000cb4 <__aeabi_dsub+0x474>
 8000c06:	2a1f      	cmp	r2, #31
 8000c08:	dd00      	ble.n	8000c0c <__aeabi_dsub+0x3cc>
 8000c0a:	e0d1      	b.n	8000db0 <__aeabi_dsub+0x570>
 8000c0c:	2520      	movs	r5, #32
 8000c0e:	001e      	movs	r6, r3
 8000c10:	1aad      	subs	r5, r5, r2
 8000c12:	4664      	mov	r4, ip
 8000c14:	40ab      	lsls	r3, r5
 8000c16:	40ac      	lsls	r4, r5
 8000c18:	40d6      	lsrs	r6, r2
 8000c1a:	1e5d      	subs	r5, r3, #1
 8000c1c:	41ab      	sbcs	r3, r5
 8000c1e:	4334      	orrs	r4, r6
 8000c20:	4323      	orrs	r3, r4
 8000c22:	4664      	mov	r4, ip
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	1b09      	subs	r1, r1, r4
 8000c28:	e049      	b.n	8000cbe <__aeabi_dsub+0x47e>
 8000c2a:	4660      	mov	r0, ip
 8000c2c:	1bdc      	subs	r4, r3, r7
 8000c2e:	1a46      	subs	r6, r0, r1
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	4180      	sbcs	r0, r0
 8000c34:	4240      	negs	r0, r0
 8000c36:	4681      	mov	r9, r0
 8000c38:	0030      	movs	r0, r6
 8000c3a:	464e      	mov	r6, r9
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	4681      	mov	r9, r0
 8000c40:	0200      	lsls	r0, r0, #8
 8000c42:	d476      	bmi.n	8000d32 <__aeabi_dsub+0x4f2>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4323      	orrs	r3, r4
 8000c48:	d000      	beq.n	8000c4c <__aeabi_dsub+0x40c>
 8000c4a:	e652      	b.n	80008f2 <__aeabi_dsub+0xb2>
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	e771      	b.n	8000b36 <__aeabi_dsub+0x2f6>
 8000c52:	4339      	orrs	r1, r7
 8000c54:	000c      	movs	r4, r1
 8000c56:	1e62      	subs	r2, r4, #1
 8000c58:	4194      	sbcs	r4, r2
 8000c5a:	18e4      	adds	r4, r4, r3
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	425b      	negs	r3, r3
 8000c62:	4463      	add	r3, ip
 8000c64:	4699      	mov	r9, r3
 8000c66:	464b      	mov	r3, r9
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	d400      	bmi.n	8000c6e <__aeabi_dsub+0x42e>
 8000c6c:	e756      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	469c      	mov	ip, r3
 8000c72:	4ba8      	ldr	r3, [pc, #672]	; (8000f14 <__aeabi_dsub+0x6d4>)
 8000c74:	44e0      	add	r8, ip
 8000c76:	4598      	cmp	r8, r3
 8000c78:	d038      	beq.n	8000cec <__aeabi_dsub+0x4ac>
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	48a6      	ldr	r0, [pc, #664]	; (8000f18 <__aeabi_dsub+0x6d8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4003      	ands	r3, r0
 8000c82:	0018      	movs	r0, r3
 8000c84:	0863      	lsrs	r3, r4, #1
 8000c86:	4014      	ands	r4, r2
 8000c88:	431c      	orrs	r4, r3
 8000c8a:	07c3      	lsls	r3, r0, #31
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	0843      	lsrs	r3, r0, #1
 8000c90:	4699      	mov	r9, r3
 8000c92:	e657      	b.n	8000944 <__aeabi_dsub+0x104>
 8000c94:	0010      	movs	r0, r2
 8000c96:	000e      	movs	r6, r1
 8000c98:	3820      	subs	r0, #32
 8000c9a:	40c6      	lsrs	r6, r0
 8000c9c:	2a20      	cmp	r2, #32
 8000c9e:	d004      	beq.n	8000caa <__aeabi_dsub+0x46a>
 8000ca0:	2040      	movs	r0, #64	; 0x40
 8000ca2:	1a82      	subs	r2, r0, r2
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	430f      	orrs	r7, r1
 8000ca8:	46b9      	mov	r9, r7
 8000caa:	464f      	mov	r7, r9
 8000cac:	1e7a      	subs	r2, r7, #1
 8000cae:	4197      	sbcs	r7, r2
 8000cb0:	4337      	orrs	r7, r6
 8000cb2:	e60f      	b.n	80008d4 <__aeabi_dsub+0x94>
 8000cb4:	4662      	mov	r2, ip
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	4193      	sbcs	r3, r2
 8000cbe:	1afc      	subs	r4, r7, r3
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	41bf      	sbcs	r7, r7
 8000cc4:	427f      	negs	r7, r7
 8000cc6:	1bcb      	subs	r3, r1, r7
 8000cc8:	4699      	mov	r9, r3
 8000cca:	465d      	mov	r5, fp
 8000ccc:	4680      	mov	r8, r0
 8000cce:	e608      	b.n	80008e2 <__aeabi_dsub+0xa2>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	431e      	orrs	r6, r3
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dsub+0x498>
 8000cd6:	e0be      	b.n	8000e56 <__aeabi_dsub+0x616>
 8000cd8:	1e56      	subs	r6, r2, #1
 8000cda:	2a01      	cmp	r2, #1
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x4a0>
 8000cde:	e109      	b.n	8000ef4 <__aeabi_dsub+0x6b4>
 8000ce0:	4c8c      	ldr	r4, [pc, #560]	; (8000f14 <__aeabi_dsub+0x6d4>)
 8000ce2:	42a2      	cmp	r2, r4
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dsub+0x4a8>
 8000ce6:	e119      	b.n	8000f1c <__aeabi_dsub+0x6dc>
 8000ce8:	0032      	movs	r2, r6
 8000cea:	e6c1      	b.n	8000a70 <__aeabi_dsub+0x230>
 8000cec:	4642      	mov	r2, r8
 8000cee:	2400      	movs	r4, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e648      	b.n	8000986 <__aeabi_dsub+0x146>
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	000c      	movs	r4, r1
 8000cf8:	1a80      	subs	r0, r0, r2
 8000cfa:	003e      	movs	r6, r7
 8000cfc:	4087      	lsls	r7, r0
 8000cfe:	4084      	lsls	r4, r0
 8000d00:	40d6      	lsrs	r6, r2
 8000d02:	1e78      	subs	r0, r7, #1
 8000d04:	4187      	sbcs	r7, r0
 8000d06:	40d1      	lsrs	r1, r2
 8000d08:	4334      	orrs	r4, r6
 8000d0a:	433c      	orrs	r4, r7
 8000d0c:	448c      	add	ip, r1
 8000d0e:	e7a4      	b.n	8000c5a <__aeabi_dsub+0x41a>
 8000d10:	4a80      	ldr	r2, [pc, #512]	; (8000f14 <__aeabi_dsub+0x6d4>)
 8000d12:	4290      	cmp	r0, r2
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dsub+0x4d8>
 8000d16:	e0e9      	b.n	8000eec <__aeabi_dsub+0x6ac>
 8000d18:	19df      	adds	r7, r3, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	419b      	sbcs	r3, r3
 8000d1e:	4461      	add	r1, ip
 8000d20:	425b      	negs	r3, r3
 8000d22:	18c9      	adds	r1, r1, r3
 8000d24:	07cc      	lsls	r4, r1, #31
 8000d26:	087f      	lsrs	r7, r7, #1
 8000d28:	084b      	lsrs	r3, r1, #1
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	4680      	mov	r8, r0
 8000d2e:	433c      	orrs	r4, r7
 8000d30:	e6f4      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 8000d32:	1afc      	subs	r4, r7, r3
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	41bf      	sbcs	r7, r7
 8000d38:	4663      	mov	r3, ip
 8000d3a:	427f      	negs	r7, r7
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	4699      	mov	r9, r3
 8000d42:	465d      	mov	r5, fp
 8000d44:	e5d5      	b.n	80008f2 <__aeabi_dsub+0xb2>
 8000d46:	08ff      	lsrs	r7, r7, #3
 8000d48:	074b      	lsls	r3, r1, #29
 8000d4a:	465d      	mov	r5, fp
 8000d4c:	433b      	orrs	r3, r7
 8000d4e:	08cc      	lsrs	r4, r1, #3
 8000d50:	e6ee      	b.n	8000b30 <__aeabi_dsub+0x2f0>
 8000d52:	4662      	mov	r2, ip
 8000d54:	431a      	orrs	r2, r3
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dsub+0x51a>
 8000d58:	e082      	b.n	8000e60 <__aeabi_dsub+0x620>
 8000d5a:	000b      	movs	r3, r1
 8000d5c:	433b      	orrs	r3, r7
 8000d5e:	d11b      	bne.n	8000d98 <__aeabi_dsub+0x558>
 8000d60:	2480      	movs	r4, #128	; 0x80
 8000d62:	2500      	movs	r5, #0
 8000d64:	0324      	lsls	r4, r4, #12
 8000d66:	e6f9      	b.n	8000b5c <__aeabi_dsub+0x31c>
 8000d68:	19dc      	adds	r4, r3, r7
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	419b      	sbcs	r3, r3
 8000d6e:	4461      	add	r1, ip
 8000d70:	4689      	mov	r9, r1
 8000d72:	425b      	negs	r3, r3
 8000d74:	4499      	add	r9, r3
 8000d76:	464b      	mov	r3, r9
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	d444      	bmi.n	8000e06 <__aeabi_dsub+0x5c6>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4698      	mov	r8, r3
 8000d80:	e6cc      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 8000d82:	1bdc      	subs	r4, r3, r7
 8000d84:	4662      	mov	r2, ip
 8000d86:	42a3      	cmp	r3, r4
 8000d88:	419b      	sbcs	r3, r3
 8000d8a:	1a51      	subs	r1, r2, r1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	1acb      	subs	r3, r1, r3
 8000d90:	4699      	mov	r9, r3
 8000d92:	2301      	movs	r3, #1
 8000d94:	4698      	mov	r8, r3
 8000d96:	e5a4      	b.n	80008e2 <__aeabi_dsub+0xa2>
 8000d98:	08ff      	lsrs	r7, r7, #3
 8000d9a:	074b      	lsls	r3, r1, #29
 8000d9c:	465d      	mov	r5, fp
 8000d9e:	433b      	orrs	r3, r7
 8000da0:	08cc      	lsrs	r4, r1, #3
 8000da2:	e6d7      	b.n	8000b54 <__aeabi_dsub+0x314>
 8000da4:	4662      	mov	r2, ip
 8000da6:	431a      	orrs	r2, r3
 8000da8:	0014      	movs	r4, r2
 8000daa:	1e63      	subs	r3, r4, #1
 8000dac:	419c      	sbcs	r4, r3
 8000dae:	e679      	b.n	8000aa4 <__aeabi_dsub+0x264>
 8000db0:	0015      	movs	r5, r2
 8000db2:	4664      	mov	r4, ip
 8000db4:	3d20      	subs	r5, #32
 8000db6:	40ec      	lsrs	r4, r5
 8000db8:	46a0      	mov	r8, r4
 8000dba:	2a20      	cmp	r2, #32
 8000dbc:	d005      	beq.n	8000dca <__aeabi_dsub+0x58a>
 8000dbe:	2540      	movs	r5, #64	; 0x40
 8000dc0:	4664      	mov	r4, ip
 8000dc2:	1aaa      	subs	r2, r5, r2
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	4323      	orrs	r3, r4
 8000dc8:	469a      	mov	sl, r3
 8000dca:	4654      	mov	r4, sl
 8000dcc:	1e63      	subs	r3, r4, #1
 8000dce:	419c      	sbcs	r4, r3
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	e773      	b.n	8000cbe <__aeabi_dsub+0x47e>
 8000dd6:	4662      	mov	r2, ip
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	d023      	beq.n	8000e24 <__aeabi_dsub+0x5e4>
 8000ddc:	000a      	movs	r2, r1
 8000dde:	433a      	orrs	r2, r7
 8000de0:	d000      	beq.n	8000de4 <__aeabi_dsub+0x5a4>
 8000de2:	e0a0      	b.n	8000f26 <__aeabi_dsub+0x6e6>
 8000de4:	4662      	mov	r2, ip
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	0752      	lsls	r2, r2, #29
 8000dea:	4313      	orrs	r3, r2
 8000dec:	4662      	mov	r2, ip
 8000dee:	08d4      	lsrs	r4, r2, #3
 8000df0:	e6b0      	b.n	8000b54 <__aeabi_dsub+0x314>
 8000df2:	000b      	movs	r3, r1
 8000df4:	433b      	orrs	r3, r7
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dsub+0x5ba>
 8000df8:	e728      	b.n	8000c4c <__aeabi_dsub+0x40c>
 8000dfa:	08ff      	lsrs	r7, r7, #3
 8000dfc:	074b      	lsls	r3, r1, #29
 8000dfe:	465d      	mov	r5, fp
 8000e00:	433b      	orrs	r3, r7
 8000e02:	08cc      	lsrs	r4, r1, #3
 8000e04:	e697      	b.n	8000b36 <__aeabi_dsub+0x2f6>
 8000e06:	2302      	movs	r3, #2
 8000e08:	4698      	mov	r8, r3
 8000e0a:	e736      	b.n	8000c7a <__aeabi_dsub+0x43a>
 8000e0c:	1afc      	subs	r4, r7, r3
 8000e0e:	42a7      	cmp	r7, r4
 8000e10:	41bf      	sbcs	r7, r7
 8000e12:	4663      	mov	r3, ip
 8000e14:	427f      	negs	r7, r7
 8000e16:	1ac9      	subs	r1, r1, r3
 8000e18:	1bcb      	subs	r3, r1, r7
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	465d      	mov	r5, fp
 8000e20:	4698      	mov	r8, r3
 8000e22:	e55e      	b.n	80008e2 <__aeabi_dsub+0xa2>
 8000e24:	074b      	lsls	r3, r1, #29
 8000e26:	08ff      	lsrs	r7, r7, #3
 8000e28:	433b      	orrs	r3, r7
 8000e2a:	08cc      	lsrs	r4, r1, #3
 8000e2c:	e692      	b.n	8000b54 <__aeabi_dsub+0x314>
 8000e2e:	1bdc      	subs	r4, r3, r7
 8000e30:	4660      	mov	r0, ip
 8000e32:	42a3      	cmp	r3, r4
 8000e34:	41b6      	sbcs	r6, r6
 8000e36:	1a40      	subs	r0, r0, r1
 8000e38:	4276      	negs	r6, r6
 8000e3a:	1b80      	subs	r0, r0, r6
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	0200      	lsls	r0, r0, #8
 8000e40:	d560      	bpl.n	8000f04 <__aeabi_dsub+0x6c4>
 8000e42:	1afc      	subs	r4, r7, r3
 8000e44:	42a7      	cmp	r7, r4
 8000e46:	41bf      	sbcs	r7, r7
 8000e48:	4663      	mov	r3, ip
 8000e4a:	427f      	negs	r7, r7
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	4699      	mov	r9, r3
 8000e52:	465d      	mov	r5, fp
 8000e54:	e576      	b.n	8000944 <__aeabi_dsub+0x104>
 8000e56:	08ff      	lsrs	r7, r7, #3
 8000e58:	074b      	lsls	r3, r1, #29
 8000e5a:	433b      	orrs	r3, r7
 8000e5c:	08cc      	lsrs	r4, r1, #3
 8000e5e:	e667      	b.n	8000b30 <__aeabi_dsub+0x2f0>
 8000e60:	000a      	movs	r2, r1
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	433a      	orrs	r2, r7
 8000e66:	d100      	bne.n	8000e6a <__aeabi_dsub+0x62a>
 8000e68:	e66f      	b.n	8000b4a <__aeabi_dsub+0x30a>
 8000e6a:	4662      	mov	r2, ip
 8000e6c:	0752      	lsls	r2, r2, #29
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	4662      	mov	r2, ip
 8000e72:	08d4      	lsrs	r4, r2, #3
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0312      	lsls	r2, r2, #12
 8000e78:	4214      	tst	r4, r2
 8000e7a:	d007      	beq.n	8000e8c <__aeabi_dsub+0x64c>
 8000e7c:	08c8      	lsrs	r0, r1, #3
 8000e7e:	4210      	tst	r0, r2
 8000e80:	d104      	bne.n	8000e8c <__aeabi_dsub+0x64c>
 8000e82:	465d      	mov	r5, fp
 8000e84:	0004      	movs	r4, r0
 8000e86:	08fb      	lsrs	r3, r7, #3
 8000e88:	0749      	lsls	r1, r1, #29
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	0f5a      	lsrs	r2, r3, #29
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	0752      	lsls	r2, r2, #29
 8000e94:	4313      	orrs	r3, r2
 8000e96:	e65d      	b.n	8000b54 <__aeabi_dsub+0x314>
 8000e98:	074b      	lsls	r3, r1, #29
 8000e9a:	08ff      	lsrs	r7, r7, #3
 8000e9c:	433b      	orrs	r3, r7
 8000e9e:	08cc      	lsrs	r4, r1, #3
 8000ea0:	e649      	b.n	8000b36 <__aeabi_dsub+0x2f6>
 8000ea2:	19dc      	adds	r4, r3, r7
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	419b      	sbcs	r3, r3
 8000ea8:	4461      	add	r1, ip
 8000eaa:	4689      	mov	r9, r1
 8000eac:	425b      	negs	r3, r3
 8000eae:	4499      	add	r9, r3
 8000eb0:	464b      	mov	r3, r9
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	d400      	bmi.n	8000eb8 <__aeabi_dsub+0x678>
 8000eb6:	e631      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 8000eb8:	464a      	mov	r2, r9
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <__aeabi_dsub+0x6d8>)
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	4698      	mov	r8, r3
 8000ec4:	e62a      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 8000ec6:	0016      	movs	r6, r2
 8000ec8:	4664      	mov	r4, ip
 8000eca:	3e20      	subs	r6, #32
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	46a0      	mov	r8, r4
 8000ed0:	2a20      	cmp	r2, #32
 8000ed2:	d005      	beq.n	8000ee0 <__aeabi_dsub+0x6a0>
 8000ed4:	2640      	movs	r6, #64	; 0x40
 8000ed6:	4664      	mov	r4, ip
 8000ed8:	1ab2      	subs	r2, r6, r2
 8000eda:	4094      	lsls	r4, r2
 8000edc:	4323      	orrs	r3, r4
 8000ede:	469a      	mov	sl, r3
 8000ee0:	4654      	mov	r4, sl
 8000ee2:	1e63      	subs	r3, r4, #1
 8000ee4:	419c      	sbcs	r4, r3
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	431c      	orrs	r4, r3
 8000eea:	e5db      	b.n	8000aa4 <__aeabi_dsub+0x264>
 8000eec:	0002      	movs	r2, r0
 8000eee:	2400      	movs	r4, #0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e548      	b.n	8000986 <__aeabi_dsub+0x146>
 8000ef4:	19dc      	adds	r4, r3, r7
 8000ef6:	42bc      	cmp	r4, r7
 8000ef8:	41bf      	sbcs	r7, r7
 8000efa:	4461      	add	r1, ip
 8000efc:	4689      	mov	r9, r1
 8000efe:	427f      	negs	r7, r7
 8000f00:	44b9      	add	r9, r7
 8000f02:	e738      	b.n	8000d76 <__aeabi_dsub+0x536>
 8000f04:	464b      	mov	r3, r9
 8000f06:	4323      	orrs	r3, r4
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dsub+0x6cc>
 8000f0a:	e69f      	b.n	8000c4c <__aeabi_dsub+0x40c>
 8000f0c:	e606      	b.n	8000b1c <__aeabi_dsub+0x2dc>
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	000007fe 	.word	0x000007fe
 8000f14:	000007ff 	.word	0x000007ff
 8000f18:	ff7fffff 	.word	0xff7fffff
 8000f1c:	08ff      	lsrs	r7, r7, #3
 8000f1e:	074b      	lsls	r3, r1, #29
 8000f20:	433b      	orrs	r3, r7
 8000f22:	08cc      	lsrs	r4, r1, #3
 8000f24:	e616      	b.n	8000b54 <__aeabi_dsub+0x314>
 8000f26:	4662      	mov	r2, ip
 8000f28:	08db      	lsrs	r3, r3, #3
 8000f2a:	0752      	lsls	r2, r2, #29
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4662      	mov	r2, ip
 8000f30:	08d4      	lsrs	r4, r2, #3
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	0312      	lsls	r2, r2, #12
 8000f36:	4214      	tst	r4, r2
 8000f38:	d007      	beq.n	8000f4a <__aeabi_dsub+0x70a>
 8000f3a:	08c8      	lsrs	r0, r1, #3
 8000f3c:	4210      	tst	r0, r2
 8000f3e:	d104      	bne.n	8000f4a <__aeabi_dsub+0x70a>
 8000f40:	465d      	mov	r5, fp
 8000f42:	0004      	movs	r4, r0
 8000f44:	08fb      	lsrs	r3, r7, #3
 8000f46:	0749      	lsls	r1, r1, #29
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	0f5a      	lsrs	r2, r3, #29
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	0752      	lsls	r2, r2, #29
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	e5fe      	b.n	8000b54 <__aeabi_dsub+0x314>
 8000f56:	2300      	movs	r3, #0
 8000f58:	4a01      	ldr	r2, [pc, #4]	; (8000f60 <__aeabi_dsub+0x720>)
 8000f5a:	001c      	movs	r4, r3
 8000f5c:	e513      	b.n	8000986 <__aeabi_dsub+0x146>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	000007ff 	.word	0x000007ff

08000f64 <__aeabi_d2iz>:
 8000f64:	000a      	movs	r2, r1
 8000f66:	b530      	push	{r4, r5, lr}
 8000f68:	4c13      	ldr	r4, [pc, #76]	; (8000fb8 <__aeabi_d2iz+0x54>)
 8000f6a:	0053      	lsls	r3, r2, #1
 8000f6c:	0309      	lsls	r1, r1, #12
 8000f6e:	0005      	movs	r5, r0
 8000f70:	0b09      	lsrs	r1, r1, #12
 8000f72:	2000      	movs	r0, #0
 8000f74:	0d5b      	lsrs	r3, r3, #21
 8000f76:	0fd2      	lsrs	r2, r2, #31
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	dd04      	ble.n	8000f86 <__aeabi_d2iz+0x22>
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <__aeabi_d2iz+0x58>)
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	dd02      	ble.n	8000f88 <__aeabi_d2iz+0x24>
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <__aeabi_d2iz+0x5c>)
 8000f84:	18d0      	adds	r0, r2, r3
 8000f86:	bd30      	pop	{r4, r5, pc}
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	0340      	lsls	r0, r0, #13
 8000f8c:	4301      	orrs	r1, r0
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <__aeabi_d2iz+0x60>)
 8000f90:	1ac0      	subs	r0, r0, r3
 8000f92:	281f      	cmp	r0, #31
 8000f94:	dd08      	ble.n	8000fa8 <__aeabi_d2iz+0x44>
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <__aeabi_d2iz+0x64>)
 8000f98:	1ac3      	subs	r3, r0, r3
 8000f9a:	40d9      	lsrs	r1, r3
 8000f9c:	000b      	movs	r3, r1
 8000f9e:	4258      	negs	r0, r3
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d1f0      	bne.n	8000f86 <__aeabi_d2iz+0x22>
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	e7ee      	b.n	8000f86 <__aeabi_d2iz+0x22>
 8000fa8:	4c08      	ldr	r4, [pc, #32]	; (8000fcc <__aeabi_d2iz+0x68>)
 8000faa:	40c5      	lsrs	r5, r0
 8000fac:	46a4      	mov	ip, r4
 8000fae:	4463      	add	r3, ip
 8000fb0:	4099      	lsls	r1, r3
 8000fb2:	000b      	movs	r3, r1
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	e7f2      	b.n	8000f9e <__aeabi_d2iz+0x3a>
 8000fb8:	000003fe 	.word	0x000003fe
 8000fbc:	0000041d 	.word	0x0000041d
 8000fc0:	7fffffff 	.word	0x7fffffff
 8000fc4:	00000433 	.word	0x00000433
 8000fc8:	00000413 	.word	0x00000413
 8000fcc:	fffffbed 	.word	0xfffffbed

08000fd0 <__aeabi_i2d>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d016      	beq.n	8001004 <__aeabi_i2d+0x34>
 8000fd6:	17c3      	asrs	r3, r0, #31
 8000fd8:	18c5      	adds	r5, r0, r3
 8000fda:	405d      	eors	r5, r3
 8000fdc:	0fc4      	lsrs	r4, r0, #31
 8000fde:	0028      	movs	r0, r5
 8000fe0:	f000 f864 	bl	80010ac <__clzsi2>
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <__aeabi_i2d+0x5c>)
 8000fe6:	1a12      	subs	r2, r2, r0
 8000fe8:	280a      	cmp	r0, #10
 8000fea:	dc16      	bgt.n	800101a <__aeabi_i2d+0x4a>
 8000fec:	0003      	movs	r3, r0
 8000fee:	002e      	movs	r6, r5
 8000ff0:	3315      	adds	r3, #21
 8000ff2:	409e      	lsls	r6, r3
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	1a18      	subs	r0, r3, r0
 8000ff8:	40c5      	lsrs	r5, r0
 8000ffa:	0552      	lsls	r2, r2, #21
 8000ffc:	032d      	lsls	r5, r5, #12
 8000ffe:	0b2d      	lsrs	r5, r5, #12
 8001000:	0d53      	lsrs	r3, r2, #21
 8001002:	e003      	b.n	800100c <__aeabi_i2d+0x3c>
 8001004:	2400      	movs	r4, #0
 8001006:	2300      	movs	r3, #0
 8001008:	2500      	movs	r5, #0
 800100a:	2600      	movs	r6, #0
 800100c:	051b      	lsls	r3, r3, #20
 800100e:	432b      	orrs	r3, r5
 8001010:	07e4      	lsls	r4, r4, #31
 8001012:	4323      	orrs	r3, r4
 8001014:	0030      	movs	r0, r6
 8001016:	0019      	movs	r1, r3
 8001018:	bd70      	pop	{r4, r5, r6, pc}
 800101a:	380b      	subs	r0, #11
 800101c:	4085      	lsls	r5, r0
 800101e:	0552      	lsls	r2, r2, #21
 8001020:	032d      	lsls	r5, r5, #12
 8001022:	2600      	movs	r6, #0
 8001024:	0b2d      	lsrs	r5, r5, #12
 8001026:	0d53      	lsrs	r3, r2, #21
 8001028:	e7f0      	b.n	800100c <__aeabi_i2d+0x3c>
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	0000041e 	.word	0x0000041e

08001030 <__aeabi_cdrcmple>:
 8001030:	4684      	mov	ip, r0
 8001032:	0010      	movs	r0, r2
 8001034:	4662      	mov	r2, ip
 8001036:	468c      	mov	ip, r1
 8001038:	0019      	movs	r1, r3
 800103a:	4663      	mov	r3, ip
 800103c:	e000      	b.n	8001040 <__aeabi_cdcmpeq>
 800103e:	46c0      	nop			; (mov r8, r8)

08001040 <__aeabi_cdcmpeq>:
 8001040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001042:	f000 f8f9 	bl	8001238 <__ledf2>
 8001046:	2800      	cmp	r0, #0
 8001048:	d401      	bmi.n	800104e <__aeabi_cdcmpeq+0xe>
 800104a:	2100      	movs	r1, #0
 800104c:	42c8      	cmn	r0, r1
 800104e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001050 <__aeabi_dcmpeq>:
 8001050:	b510      	push	{r4, lr}
 8001052:	f000 f849 	bl	80010e8 <__eqdf2>
 8001056:	4240      	negs	r0, r0
 8001058:	3001      	adds	r0, #1
 800105a:	bd10      	pop	{r4, pc}

0800105c <__aeabi_dcmplt>:
 800105c:	b510      	push	{r4, lr}
 800105e:	f000 f8eb 	bl	8001238 <__ledf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	db01      	blt.n	800106a <__aeabi_dcmplt+0xe>
 8001066:	2000      	movs	r0, #0
 8001068:	bd10      	pop	{r4, pc}
 800106a:	2001      	movs	r0, #1
 800106c:	bd10      	pop	{r4, pc}
 800106e:	46c0      	nop			; (mov r8, r8)

08001070 <__aeabi_dcmple>:
 8001070:	b510      	push	{r4, lr}
 8001072:	f000 f8e1 	bl	8001238 <__ledf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	dd01      	ble.n	800107e <__aeabi_dcmple+0xe>
 800107a:	2000      	movs	r0, #0
 800107c:	bd10      	pop	{r4, pc}
 800107e:	2001      	movs	r0, #1
 8001080:	bd10      	pop	{r4, pc}
 8001082:	46c0      	nop			; (mov r8, r8)

08001084 <__aeabi_dcmpgt>:
 8001084:	b510      	push	{r4, lr}
 8001086:	f000 f871 	bl	800116c <__gedf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	dc01      	bgt.n	8001092 <__aeabi_dcmpgt+0xe>
 800108e:	2000      	movs	r0, #0
 8001090:	bd10      	pop	{r4, pc}
 8001092:	2001      	movs	r0, #1
 8001094:	bd10      	pop	{r4, pc}
 8001096:	46c0      	nop			; (mov r8, r8)

08001098 <__aeabi_dcmpge>:
 8001098:	b510      	push	{r4, lr}
 800109a:	f000 f867 	bl	800116c <__gedf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	da01      	bge.n	80010a6 <__aeabi_dcmpge+0xe>
 80010a2:	2000      	movs	r0, #0
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	2001      	movs	r0, #1
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)

080010ac <__clzsi2>:
 80010ac:	211c      	movs	r1, #28
 80010ae:	2301      	movs	r3, #1
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0xe>
 80010b6:	0c00      	lsrs	r0, r0, #16
 80010b8:	3910      	subs	r1, #16
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	4298      	cmp	r0, r3
 80010be:	d301      	bcc.n	80010c4 <__clzsi2+0x18>
 80010c0:	0a00      	lsrs	r0, r0, #8
 80010c2:	3908      	subs	r1, #8
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	4298      	cmp	r0, r3
 80010c8:	d301      	bcc.n	80010ce <__clzsi2+0x22>
 80010ca:	0900      	lsrs	r0, r0, #4
 80010cc:	3904      	subs	r1, #4
 80010ce:	a202      	add	r2, pc, #8	; (adr r2, 80010d8 <__clzsi2+0x2c>)
 80010d0:	5c10      	ldrb	r0, [r2, r0]
 80010d2:	1840      	adds	r0, r0, r1
 80010d4:	4770      	bx	lr
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	02020304 	.word	0x02020304
 80010dc:	01010101 	.word	0x01010101
	...

080010e8 <__eqdf2>:
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	464e      	mov	r6, r9
 80010ec:	4645      	mov	r5, r8
 80010ee:	46de      	mov	lr, fp
 80010f0:	4657      	mov	r7, sl
 80010f2:	4690      	mov	r8, r2
 80010f4:	b5e0      	push	{r5, r6, r7, lr}
 80010f6:	0017      	movs	r7, r2
 80010f8:	031a      	lsls	r2, r3, #12
 80010fa:	0b12      	lsrs	r2, r2, #12
 80010fc:	0005      	movs	r5, r0
 80010fe:	4684      	mov	ip, r0
 8001100:	4819      	ldr	r0, [pc, #100]	; (8001168 <__eqdf2+0x80>)
 8001102:	030e      	lsls	r6, r1, #12
 8001104:	004c      	lsls	r4, r1, #1
 8001106:	4691      	mov	r9, r2
 8001108:	005a      	lsls	r2, r3, #1
 800110a:	0fdb      	lsrs	r3, r3, #31
 800110c:	469b      	mov	fp, r3
 800110e:	0b36      	lsrs	r6, r6, #12
 8001110:	0d64      	lsrs	r4, r4, #21
 8001112:	0fc9      	lsrs	r1, r1, #31
 8001114:	0d52      	lsrs	r2, r2, #21
 8001116:	4284      	cmp	r4, r0
 8001118:	d019      	beq.n	800114e <__eqdf2+0x66>
 800111a:	4282      	cmp	r2, r0
 800111c:	d010      	beq.n	8001140 <__eqdf2+0x58>
 800111e:	2001      	movs	r0, #1
 8001120:	4294      	cmp	r4, r2
 8001122:	d10e      	bne.n	8001142 <__eqdf2+0x5a>
 8001124:	454e      	cmp	r6, r9
 8001126:	d10c      	bne.n	8001142 <__eqdf2+0x5a>
 8001128:	2001      	movs	r0, #1
 800112a:	45c4      	cmp	ip, r8
 800112c:	d109      	bne.n	8001142 <__eqdf2+0x5a>
 800112e:	4559      	cmp	r1, fp
 8001130:	d017      	beq.n	8001162 <__eqdf2+0x7a>
 8001132:	2c00      	cmp	r4, #0
 8001134:	d105      	bne.n	8001142 <__eqdf2+0x5a>
 8001136:	0030      	movs	r0, r6
 8001138:	4328      	orrs	r0, r5
 800113a:	1e43      	subs	r3, r0, #1
 800113c:	4198      	sbcs	r0, r3
 800113e:	e000      	b.n	8001142 <__eqdf2+0x5a>
 8001140:	2001      	movs	r0, #1
 8001142:	bcf0      	pop	{r4, r5, r6, r7}
 8001144:	46bb      	mov	fp, r7
 8001146:	46b2      	mov	sl, r6
 8001148:	46a9      	mov	r9, r5
 800114a:	46a0      	mov	r8, r4
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114e:	0033      	movs	r3, r6
 8001150:	2001      	movs	r0, #1
 8001152:	432b      	orrs	r3, r5
 8001154:	d1f5      	bne.n	8001142 <__eqdf2+0x5a>
 8001156:	42a2      	cmp	r2, r4
 8001158:	d1f3      	bne.n	8001142 <__eqdf2+0x5a>
 800115a:	464b      	mov	r3, r9
 800115c:	433b      	orrs	r3, r7
 800115e:	d1f0      	bne.n	8001142 <__eqdf2+0x5a>
 8001160:	e7e2      	b.n	8001128 <__eqdf2+0x40>
 8001162:	2000      	movs	r0, #0
 8001164:	e7ed      	b.n	8001142 <__eqdf2+0x5a>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	000007ff 	.word	0x000007ff

0800116c <__gedf2>:
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	4647      	mov	r7, r8
 8001170:	46ce      	mov	lr, r9
 8001172:	0004      	movs	r4, r0
 8001174:	0018      	movs	r0, r3
 8001176:	0016      	movs	r6, r2
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	0b1b      	lsrs	r3, r3, #12
 800117c:	4d2d      	ldr	r5, [pc, #180]	; (8001234 <__gedf2+0xc8>)
 800117e:	004a      	lsls	r2, r1, #1
 8001180:	4699      	mov	r9, r3
 8001182:	b580      	push	{r7, lr}
 8001184:	0043      	lsls	r3, r0, #1
 8001186:	030f      	lsls	r7, r1, #12
 8001188:	46a4      	mov	ip, r4
 800118a:	46b0      	mov	r8, r6
 800118c:	0b3f      	lsrs	r7, r7, #12
 800118e:	0d52      	lsrs	r2, r2, #21
 8001190:	0fc9      	lsrs	r1, r1, #31
 8001192:	0d5b      	lsrs	r3, r3, #21
 8001194:	0fc0      	lsrs	r0, r0, #31
 8001196:	42aa      	cmp	r2, r5
 8001198:	d021      	beq.n	80011de <__gedf2+0x72>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d013      	beq.n	80011c6 <__gedf2+0x5a>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d122      	bne.n	80011e8 <__gedf2+0x7c>
 80011a2:	433c      	orrs	r4, r7
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <__gedf2+0x42>
 80011a8:	464d      	mov	r5, r9
 80011aa:	432e      	orrs	r6, r5
 80011ac:	d022      	beq.n	80011f4 <__gedf2+0x88>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d010      	beq.n	80011d4 <__gedf2+0x68>
 80011b2:	4281      	cmp	r1, r0
 80011b4:	d022      	beq.n	80011fc <__gedf2+0x90>
 80011b6:	2002      	movs	r0, #2
 80011b8:	3901      	subs	r1, #1
 80011ba:	4008      	ands	r0, r1
 80011bc:	3801      	subs	r0, #1
 80011be:	bcc0      	pop	{r6, r7}
 80011c0:	46b9      	mov	r9, r7
 80011c2:	46b0      	mov	r8, r6
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	464d      	mov	r5, r9
 80011c8:	432e      	orrs	r6, r5
 80011ca:	d129      	bne.n	8001220 <__gedf2+0xb4>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d1f0      	bne.n	80011b2 <__gedf2+0x46>
 80011d0:	433c      	orrs	r4, r7
 80011d2:	d1ee      	bne.n	80011b2 <__gedf2+0x46>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d1f2      	bne.n	80011be <__gedf2+0x52>
 80011d8:	2001      	movs	r0, #1
 80011da:	4240      	negs	r0, r0
 80011dc:	e7ef      	b.n	80011be <__gedf2+0x52>
 80011de:	003d      	movs	r5, r7
 80011e0:	4325      	orrs	r5, r4
 80011e2:	d11d      	bne.n	8001220 <__gedf2+0xb4>
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d0ee      	beq.n	80011c6 <__gedf2+0x5a>
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e2      	bne.n	80011b2 <__gedf2+0x46>
 80011ec:	464c      	mov	r4, r9
 80011ee:	4326      	orrs	r6, r4
 80011f0:	d1df      	bne.n	80011b2 <__gedf2+0x46>
 80011f2:	e7e0      	b.n	80011b6 <__gedf2+0x4a>
 80011f4:	2000      	movs	r0, #0
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d0e1      	beq.n	80011be <__gedf2+0x52>
 80011fa:	e7dc      	b.n	80011b6 <__gedf2+0x4a>
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dc0a      	bgt.n	8001216 <__gedf2+0xaa>
 8001200:	dbe8      	blt.n	80011d4 <__gedf2+0x68>
 8001202:	454f      	cmp	r7, r9
 8001204:	d8d7      	bhi.n	80011b6 <__gedf2+0x4a>
 8001206:	d00e      	beq.n	8001226 <__gedf2+0xba>
 8001208:	2000      	movs	r0, #0
 800120a:	454f      	cmp	r7, r9
 800120c:	d2d7      	bcs.n	80011be <__gedf2+0x52>
 800120e:	2900      	cmp	r1, #0
 8001210:	d0e2      	beq.n	80011d8 <__gedf2+0x6c>
 8001212:	0008      	movs	r0, r1
 8001214:	e7d3      	b.n	80011be <__gedf2+0x52>
 8001216:	4243      	negs	r3, r0
 8001218:	4158      	adcs	r0, r3
 800121a:	0040      	lsls	r0, r0, #1
 800121c:	3801      	subs	r0, #1
 800121e:	e7ce      	b.n	80011be <__gedf2+0x52>
 8001220:	2002      	movs	r0, #2
 8001222:	4240      	negs	r0, r0
 8001224:	e7cb      	b.n	80011be <__gedf2+0x52>
 8001226:	45c4      	cmp	ip, r8
 8001228:	d8c5      	bhi.n	80011b6 <__gedf2+0x4a>
 800122a:	2000      	movs	r0, #0
 800122c:	45c4      	cmp	ip, r8
 800122e:	d2c6      	bcs.n	80011be <__gedf2+0x52>
 8001230:	e7ed      	b.n	800120e <__gedf2+0xa2>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	000007ff 	.word	0x000007ff

08001238 <__ledf2>:
 8001238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123a:	4647      	mov	r7, r8
 800123c:	46ce      	mov	lr, r9
 800123e:	0004      	movs	r4, r0
 8001240:	0018      	movs	r0, r3
 8001242:	0016      	movs	r6, r2
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	0b1b      	lsrs	r3, r3, #12
 8001248:	4d2c      	ldr	r5, [pc, #176]	; (80012fc <__ledf2+0xc4>)
 800124a:	004a      	lsls	r2, r1, #1
 800124c:	4699      	mov	r9, r3
 800124e:	b580      	push	{r7, lr}
 8001250:	0043      	lsls	r3, r0, #1
 8001252:	030f      	lsls	r7, r1, #12
 8001254:	46a4      	mov	ip, r4
 8001256:	46b0      	mov	r8, r6
 8001258:	0b3f      	lsrs	r7, r7, #12
 800125a:	0d52      	lsrs	r2, r2, #21
 800125c:	0fc9      	lsrs	r1, r1, #31
 800125e:	0d5b      	lsrs	r3, r3, #21
 8001260:	0fc0      	lsrs	r0, r0, #31
 8001262:	42aa      	cmp	r2, r5
 8001264:	d00d      	beq.n	8001282 <__ledf2+0x4a>
 8001266:	42ab      	cmp	r3, r5
 8001268:	d010      	beq.n	800128c <__ledf2+0x54>
 800126a:	2a00      	cmp	r2, #0
 800126c:	d127      	bne.n	80012be <__ledf2+0x86>
 800126e:	433c      	orrs	r4, r7
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <__ledf2+0x60>
 8001274:	464d      	mov	r5, r9
 8001276:	432e      	orrs	r6, r5
 8001278:	d10e      	bne.n	8001298 <__ledf2+0x60>
 800127a:	2000      	movs	r0, #0
 800127c:	2c00      	cmp	r4, #0
 800127e:	d015      	beq.n	80012ac <__ledf2+0x74>
 8001280:	e00e      	b.n	80012a0 <__ledf2+0x68>
 8001282:	003d      	movs	r5, r7
 8001284:	4325      	orrs	r5, r4
 8001286:	d110      	bne.n	80012aa <__ledf2+0x72>
 8001288:	4293      	cmp	r3, r2
 800128a:	d118      	bne.n	80012be <__ledf2+0x86>
 800128c:	464d      	mov	r5, r9
 800128e:	432e      	orrs	r6, r5
 8001290:	d10b      	bne.n	80012aa <__ledf2+0x72>
 8001292:	2a00      	cmp	r2, #0
 8001294:	d102      	bne.n	800129c <__ledf2+0x64>
 8001296:	433c      	orrs	r4, r7
 8001298:	2c00      	cmp	r4, #0
 800129a:	d00b      	beq.n	80012b4 <__ledf2+0x7c>
 800129c:	4281      	cmp	r1, r0
 800129e:	d014      	beq.n	80012ca <__ledf2+0x92>
 80012a0:	2002      	movs	r0, #2
 80012a2:	3901      	subs	r1, #1
 80012a4:	4008      	ands	r0, r1
 80012a6:	3801      	subs	r0, #1
 80012a8:	e000      	b.n	80012ac <__ledf2+0x74>
 80012aa:	2002      	movs	r0, #2
 80012ac:	bcc0      	pop	{r6, r7}
 80012ae:	46b9      	mov	r9, r7
 80012b0:	46b0      	mov	r8, r6
 80012b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d1f9      	bne.n	80012ac <__ledf2+0x74>
 80012b8:	2001      	movs	r0, #1
 80012ba:	4240      	negs	r0, r0
 80012bc:	e7f6      	b.n	80012ac <__ledf2+0x74>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ec      	bne.n	800129c <__ledf2+0x64>
 80012c2:	464c      	mov	r4, r9
 80012c4:	4326      	orrs	r6, r4
 80012c6:	d1e9      	bne.n	800129c <__ledf2+0x64>
 80012c8:	e7ea      	b.n	80012a0 <__ledf2+0x68>
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dd04      	ble.n	80012d8 <__ledf2+0xa0>
 80012ce:	4243      	negs	r3, r0
 80012d0:	4158      	adcs	r0, r3
 80012d2:	0040      	lsls	r0, r0, #1
 80012d4:	3801      	subs	r0, #1
 80012d6:	e7e9      	b.n	80012ac <__ledf2+0x74>
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbeb      	blt.n	80012b4 <__ledf2+0x7c>
 80012dc:	454f      	cmp	r7, r9
 80012de:	d8df      	bhi.n	80012a0 <__ledf2+0x68>
 80012e0:	d006      	beq.n	80012f0 <__ledf2+0xb8>
 80012e2:	2000      	movs	r0, #0
 80012e4:	454f      	cmp	r7, r9
 80012e6:	d2e1      	bcs.n	80012ac <__ledf2+0x74>
 80012e8:	2900      	cmp	r1, #0
 80012ea:	d0e5      	beq.n	80012b8 <__ledf2+0x80>
 80012ec:	0008      	movs	r0, r1
 80012ee:	e7dd      	b.n	80012ac <__ledf2+0x74>
 80012f0:	45c4      	cmp	ip, r8
 80012f2:	d8d5      	bhi.n	80012a0 <__ledf2+0x68>
 80012f4:	2000      	movs	r0, #0
 80012f6:	45c4      	cmp	ip, r8
 80012f8:	d2d8      	bcs.n	80012ac <__ledf2+0x74>
 80012fa:	e7f5      	b.n	80012e8 <__ledf2+0xb0>
 80012fc:	000007ff 	.word	0x000007ff

08001300 <fast_loop>:
uint32_t Converted_ADC[4];
uint8_t Overcurrent_occurred, Overvoltage_occurred;
static int doPID;

//Put this into the PWM interrupt to control the currents and disable/enable the PWM
void fast_loop(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
static int doPID;
	if((ADC_Buffer[VOUT_CH]>RAW_OVERVOLTAGE)||(ADC_Buffer[IOUT_CH]>RAW_CURR_MAX)){
 8001304:	4b48      	ldr	r3, [pc, #288]	; (8001428 <fast_loop+0x128>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <fast_loop+0x12c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d804      	bhi.n	8001318 <fast_loop+0x18>
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <fast_loop+0x128>)
 8001310:	885b      	ldrh	r3, [r3, #2]
 8001312:	4a47      	ldr	r2, [pc, #284]	; (8001430 <fast_loop+0x130>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d911      	bls.n	800133c <fast_loop+0x3c>
		phU_Break();
 8001318:	f000 f8a4 	bl	8001464 <phU_Break>
		doPID = 0;
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <fast_loop+0x134>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
		if((ADC_Buffer[IOUT_CH]>RAW_CURR_MAX)){//We have an overcurrent event...
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <fast_loop+0x128>)
 8001324:	885b      	ldrh	r3, [r3, #2]
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <fast_loop+0x130>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d91b      	bls.n	8001364 <fast_loop+0x64>
			htim1.Instance->CCR1 = 2; //Reset the CCR so it has to ramp up
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <fast_loop+0x138>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2202      	movs	r2, #2
 8001332:	635a      	str	r2, [r3, #52]	; 0x34
			Overcurrent_occurred = 1;
 8001334:	4b41      	ldr	r3, [pc, #260]	; (800143c <fast_loop+0x13c>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
		if((ADC_Buffer[IOUT_CH]>RAW_CURR_MAX)){//We have an overcurrent event...
 800133a:	e013      	b.n	8001364 <fast_loop+0x64>
		}
	}else if((ADC_Buffer[VOUT_CH]<RAW_RECOVERYVOLTAGE)||((ADC_Buffer[VOUT_CH]<RAW_OVERVOLTAGE)&&(ADC_Buffer[IOUT_CH]<RAW_CURR_MAX))){
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <fast_loop+0x128>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	4a3f      	ldr	r2, [pc, #252]	; (8001440 <fast_loop+0x140>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d909      	bls.n	800135a <fast_loop+0x5a>
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <fast_loop+0x128>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <fast_loop+0x144>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d809      	bhi.n	8001364 <fast_loop+0x64>
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <fast_loop+0x128>)
 8001352:	885b      	ldrh	r3, [r3, #2]
 8001354:	4a3c      	ldr	r2, [pc, #240]	; (8001448 <fast_loop+0x148>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d804      	bhi.n	8001364 <fast_loop+0x64>
		phU_Enable();
 800135a:	f000 f8bb 	bl	80014d4 <phU_Enable>
		doPID = 1;
 800135e:	4b35      	ldr	r3, [pc, #212]	; (8001434 <fast_loop+0x134>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
	}
	if(doPID){
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <fast_loop+0x134>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d030      	beq.n	80013ce <fast_loop+0xce>
		if(ADC_Buffer[VOUT_CH]>RAW_SETPOINT){
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <fast_loop+0x128>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	4a36      	ldr	r2, [pc, #216]	; (800144c <fast_loop+0x14c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d90f      	bls.n	8001396 <fast_loop+0x96>
			htim1.Instance->CCR1 = htim1.Instance->CCR1 -1;
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <fast_loop+0x138>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <fast_loop+0x138>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3a01      	subs	r2, #1
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
			if(htim1.Instance->CCR1<2){
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <fast_loop+0x138>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	2b01      	cmp	r3, #1
 800138c:	d803      	bhi.n	8001396 <fast_loop+0x96>
				htim1.Instance->CCR1 = 2;
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <fast_loop+0x138>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2202      	movs	r2, #2
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
		if(ADC_Buffer[VOUT_CH]<RAW_SETPOINT){
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <fast_loop+0x128>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <fast_loop+0x150>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d816      	bhi.n	80013ce <fast_loop+0xce>
			htim1.Instance->CCR1 = htim1.Instance->CCR1 +1;
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <fast_loop+0x138>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <fast_loop+0x138>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3201      	adds	r2, #1
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
			if(htim1.Instance->CCR1>htim1.Instance->ARR-100){
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <fast_loop+0x138>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <fast_loop+0x138>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	3b64      	subs	r3, #100	; 0x64
 80013bc:	429a      	cmp	r2, r3
 80013be:	d906      	bls.n	80013ce <fast_loop+0xce>
				htim1.Instance->CCR1 = htim1.Instance->ARR-100;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <fast_loop+0x138>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <fast_loop+0x138>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3a64      	subs	r2, #100	; 0x64
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
	}
	Converted_ADC[VOUT_CH] = ADC_Buffer[VOUT_CH]*MICROVOLTSOUTPERCOUNT;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <fast_loop+0x128>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	001a      	movs	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	019b      	lsls	r3, r3, #6
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	001a      	movs	r2, r3
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <fast_loop+0x154>)
 80013e4:	601a      	str	r2, [r3, #0]
	Converted_ADC[IOUT_CH] = ADC_Buffer[IOUT_CH]*MICROAMPSPERCOUNT;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <fast_loop+0x128>)
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	001a      	movs	r2, r3
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <fast_loop+0x158>)
 80013ee:	4353      	muls	r3, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff fded 	bl	8000fd0 <__aeabi_i2d>
 80013f6:	2200      	movs	r2, #0
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <fast_loop+0x15c>)
 80013fa:	f7fe ff2b 	bl	8000254 <__aeabi_ddiv>
 80013fe:	0002      	movs	r2, r0
 8001400:	000b      	movs	r3, r1
 8001402:	0010      	movs	r0, r2
 8001404:	0019      	movs	r1, r3
 8001406:	f7fe ff07 	bl	8000218 <__aeabi_d2uiz>
 800140a:	0002      	movs	r2, r0
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <fast_loop+0x154>)
 800140e:	605a      	str	r2, [r3, #4]
	Converted_ADC[VIN_CH] = ADC_Buffer[VIN_CH]*MICROVOLTSINPERCOUNT;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <fast_loop+0x128>)
 8001412:	889b      	ldrh	r3, [r3, #4]
 8001414:	001a      	movs	r2, r3
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <fast_loop+0x160>)
 8001418:	4353      	muls	r3, r2
 800141a:	001a      	movs	r2, r3
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <fast_loop+0x154>)
 800141e:	609a      	str	r2, [r3, #8]
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000150 	.word	0x20000150
 800142c:	00000a8c 	.word	0x00000a8c
 8001430:	0000041a 	.word	0x0000041a
 8001434:	20000040 	.word	0x20000040
 8001438:	20000104 	.word	0x20000104
 800143c:	20000038 	.word	0x20000038
 8001440:	00000a27 	.word	0x00000a27
 8001444:	00000a8b 	.word	0x00000a8b
 8001448:	00000419 	.word	0x00000419
 800144c:	00000a5a 	.word	0x00000a5a
 8001450:	00000a59 	.word	0x00000a59
 8001454:	20000028 	.word	0x20000028
 8001458:	00325aa0 	.word	0x00325aa0
 800145c:	40a00000 	.word	0x40a00000
 8001460:	00013ddc 	.word	0x00013ddc

08001464 <phU_Break>:

// Turn all phase U FETs off, Tristate the HBridge output
uint32_t tmpccmrx;  // Temporary buffer which is used to turn on/off phase PWMs
  void phU_Break() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
    tmpccmrx = htim1.Instance->CCMR1;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <phU_Break+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <phU_Break+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
    tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <phU_Break+0x68>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <phU_Break+0x6c>)
 8001478:	401a      	ands	r2, r3
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <phU_Break+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <phU_Break+0x68>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2203      	movs	r2, #3
 8001484:	4393      	bics	r3, r2
 8001486:	001a      	movs	r2, r3
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <phU_Break+0x68>)
 800148a:	601a      	str	r2, [r3, #0]
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <phU_Break+0x68>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	431a      	orrs	r2, r3
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <phU_Break+0x68>)
 8001496:	601a      	str	r2, [r3, #0]
    htim1.Instance->CCMR1 = tmpccmrx;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <phU_Break+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <phU_Break+0x68>)
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	619a      	str	r2, [r3, #24]
    htim1.Instance->CCER &= ~TIM_CCER_CC1E;   // disable
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <phU_Break+0x64>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <phU_Break+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  // disable
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <phU_Break+0x64>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <phU_Break+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2104      	movs	r1, #4
 80014be:	438a      	bics	r2, r1
 80014c0:	621a      	str	r2, [r3, #32]
  }
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000104 	.word	0x20000104
 80014cc:	2000003c 	.word	0x2000003c
 80014d0:	fffeff8f 	.word	0xfffeff8f

080014d4 <phU_Enable>:
  // Basically un-break phase U, opposite of above...
  void phU_Enable() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    tmpccmrx = htim1.Instance->CCMR1;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <phU_Enable+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <phU_Enable+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
    tmpccmrx &= ~TIM_CCMR1_OC1M;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <phU_Enable+0x68>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <phU_Enable+0x6c>)
 80014e8:	401a      	ands	r2, r3
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <phU_Enable+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <phU_Enable+0x68>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4393      	bics	r3, r2
 80014f6:	001a      	movs	r2, r3
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <phU_Enable+0x68>)
 80014fa:	601a      	str	r2, [r3, #0]
    tmpccmrx |= TIM_OCMODE_PWM1;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <phU_Enable+0x68>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2260      	movs	r2, #96	; 0x60
 8001502:	431a      	orrs	r2, r3
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <phU_Enable+0x68>)
 8001506:	601a      	str	r2, [r3, #0]
    htim1.Instance->CCMR1 = tmpccmrx;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <phU_Enable+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <phU_Enable+0x68>)
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	619a      	str	r2, [r3, #24]
    htim1.Instance->CCER |= TIM_CCER_CC1E;   // enable
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <phU_Enable+0x64>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a1a      	ldr	r2, [r3, #32]
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <phU_Enable+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER |= TIM_CCER_CC1NE;  // enable
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <phU_Enable+0x64>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <phU_Enable+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2104      	movs	r1, #4
 800152e:	430a      	orrs	r2, r1
 8001530:	621a      	str	r2, [r3, #32]
  }
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000104 	.word	0x20000104
 800153c:	2000003c 	.word	0x2000003c
 8001540:	fffeff8f 	.word	0xfffeff8f

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f000 fb96 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f82c 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f000 f9e8 	bl	8001924 <MX_GPIO_Init>
  MX_DMA_Init();
 8001554:	f000 f9d0 	bl	80018f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001558:	f000 f880 	bl	800165c <MX_ADC1_Init>
  MX_TIM1_Init();
 800155c:	f000 f912 	bl	8001784 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1);
  //HAL_Delay(100);
  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 4);
 8001560:	490e      	ldr	r1, [pc, #56]	; (800159c <main+0x58>)
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <main+0x5c>)
 8001564:	2204      	movs	r2, #4
 8001566:	0018      	movs	r0, r3
 8001568:	f000 ff08 	bl	800237c <HAL_ADC_Start_DMA>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <main+0x60>)
 800156e:	2100      	movs	r1, #0
 8001570:	0018      	movs	r0, r3
 8001572:	f002 fe4f 	bl	8004214 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <main+0x60>)
 8001578:	2100      	movs	r1, #0
 800157a:	0018      	movs	r0, r3
 800157c:	f003 fb4e 	bl	8004c1c <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <main+0x60>)
 8001582:	210c      	movs	r1, #12
 8001584:	0018      	movs	r0, r3
 8001586:	f002 fe45 	bl	8004214 <HAL_TIM_PWM_Start>
__HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_EOS);
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <main+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <main+0x5c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2108      	movs	r1, #8
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159a:	e7fe      	b.n	800159a <main+0x56>
 800159c:	20000150 	.word	0x20000150
 80015a0:	20000044 	.word	0x20000044
 80015a4:	20000104 	.word	0x20000104

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b093      	sub	sp, #76	; 0x4c
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	2414      	movs	r4, #20
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	0018      	movs	r0, r3
 80015b4:	2334      	movs	r3, #52	; 0x34
 80015b6:	001a      	movs	r2, r3
 80015b8:	2100      	movs	r1, #0
 80015ba:	f003 fd17 	bl	8004fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	0018      	movs	r0, r3
 80015c2:	2310      	movs	r3, #16
 80015c4:	001a      	movs	r2, r3
 80015c6:	2100      	movs	r1, #0
 80015c8:	f003 fd10 	bl	8004fec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f001 ffc7 	bl	8003564 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	0052      	lsls	r2, r2, #1
 80015e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80015e4:	0021      	movs	r1, r4
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2202      	movs	r2, #2
 80015f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2202      	movs	r2, #2
 80015fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2208      	movs	r2, #8
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	0292      	lsls	r2, r2, #10
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	0592      	lsls	r2, r2, #22
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	187b      	adds	r3, r7, r1
 800161c:	0018      	movs	r0, r3
 800161e:	f001 ffe1 	bl	80035e4 <HAL_RCC_OscConfig>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001626:	f000 f993 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2202      	movs	r2, #2
 8001634:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2102      	movs	r1, #2
 8001646:	0018      	movs	r0, r3
 8001648:	f002 fadc 	bl	8003c04 <HAL_RCC_ClockConfig>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001650:	f000 f97e 	bl	8001950 <Error_Handler>
  }
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b013      	add	sp, #76	; 0x4c
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	0018      	movs	r0, r3
 8001666:	230c      	movs	r3, #12
 8001668:	001a      	movs	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	f003 fcbe 	bl	8004fec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001670:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <MX_ADC1_Init+0x114>)
 8001672:	4a40      	ldr	r2, [pc, #256]	; (8001774 <MX_ADC1_Init+0x118>)
 8001674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <MX_ADC1_Init+0x114>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	05d2      	lsls	r2, r2, #23
 800167c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <MX_ADC1_Init+0x114>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <MX_ADC1_Init+0x114>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <MX_ADC1_Init+0x114>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0392      	lsls	r2, r2, #14
 8001690:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <MX_ADC1_Init+0x114>)
 8001694:	2208      	movs	r2, #8
 8001696:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001698:	4b35      	ldr	r3, [pc, #212]	; (8001770 <MX_ADC1_Init+0x114>)
 800169a:	2200      	movs	r2, #0
 800169c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <MX_ADC1_Init+0x114>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <MX_ADC1_Init+0x114>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <MX_ADC1_Init+0x114>)
 80016ac:	2204      	movs	r2, #4
 80016ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <MX_ADC1_Init+0x114>)
 80016b2:	2220      	movs	r2, #32
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_ADC1_Init+0x114>)
 80016ba:	2288      	movs	r2, #136	; 0x88
 80016bc:	00d2      	lsls	r2, r2, #3
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <MX_ADC1_Init+0x114>)
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	00d2      	lsls	r2, r2, #3
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <MX_ADC1_Init+0x114>)
 80016ca:	222c      	movs	r2, #44	; 0x2c
 80016cc:	2101      	movs	r1, #1
 80016ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_ADC1_Init+0x114>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <MX_ADC1_Init+0x114>)
 80016d8:	2202      	movs	r2, #2
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <MX_ADC1_Init+0x114>)
 80016de:	2203      	movs	r2, #3
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <MX_ADC1_Init+0x114>)
 80016e4:	223c      	movs	r2, #60	; 0x3c
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_ADC1_Init+0x114>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <MX_ADC1_Init+0x114>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 fc9a 	bl	800202c <HAL_ADC_Init>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80016fc:	f000 f928 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <MX_ADC1_Init+0x11c>)
 8001704:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2204      	movs	r2, #4
 800170a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001712:	1d3a      	adds	r2, r7, #4
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_ADC1_Init+0x114>)
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f000 fff5 	bl	8002708 <HAL_ADC_ConfigChannel>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001722:	f000 f915 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <MX_ADC1_Init+0x120>)
 800172a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2208      	movs	r2, #8
 8001730:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	1d3a      	adds	r2, r7, #4
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_ADC1_Init+0x114>)
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f000 ffe5 	bl	8002708 <HAL_ADC_ConfigChannel>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001742:	f000 f905 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <MX_ADC1_Init+0x124>)
 800174a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	220c      	movs	r2, #12
 8001750:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001752:	1d3a      	adds	r2, r7, #4
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_ADC1_Init+0x114>)
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f000 ffd5 	bl	8002708 <HAL_ADC_ConfigChannel>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8001762:	f000 f8f5 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	20000044 	.word	0x20000044
 8001774:	40012400 	.word	0x40012400
 8001778:	04000002 	.word	0x04000002
 800177c:	08000004 	.word	0x08000004
 8001780:	b0001000 	.word	0xb0001000

08001784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b098      	sub	sp, #96	; 0x60
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178a:	2354      	movs	r3, #84	; 0x54
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	0018      	movs	r0, r3
 8001790:	230c      	movs	r3, #12
 8001792:	001a      	movs	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	f003 fc29 	bl	8004fec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	2338      	movs	r3, #56	; 0x38
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	0018      	movs	r0, r3
 80017a0:	231c      	movs	r3, #28
 80017a2:	001a      	movs	r2, r3
 80017a4:	2100      	movs	r1, #0
 80017a6:	f003 fc21 	bl	8004fec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	0018      	movs	r0, r3
 80017ae:	2334      	movs	r3, #52	; 0x34
 80017b0:	001a      	movs	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f003 fc1a 	bl	8004fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017ba:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <MX_TIM1_Init+0x170>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 640;
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017cc:	22a0      	movs	r2, #160	; 0xa0
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d8:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80017e6:	0018      	movs	r0, r3
 80017e8:	f002 fcbc 	bl	8004164 <HAL_TIM_PWM_Init>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80017f0:	f000 f8ae 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80017f4:	2154      	movs	r1, #84	; 0x54
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2270      	movs	r2, #112	; 0x70
 80017fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001808:	187a      	adds	r2, r7, r1
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <MX_TIM1_Init+0x16c>)
 800180c:	0011      	movs	r1, r2
 800180e:	0018      	movs	r0, r3
 8001810:	f003 fa9c 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001818:	f000 f89a 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181c:	2138      	movs	r1, #56	; 0x38
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2260      	movs	r2, #96	; 0x60
 8001822:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001848:	1879      	adds	r1, r7, r1
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <MX_TIM1_Init+0x16c>)
 800184c:	2200      	movs	r2, #0
 800184e:	0018      	movs	r0, r3
 8001850:	f002 fdb8 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001858:	f000 f87a 	bl	8001950 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 800185c:	2138      	movs	r1, #56	; 0x38
 800185e:	187b      	adds	r3, r7, r1
 8001860:	22fa      	movs	r2, #250	; 0xfa
 8001862:	0052      	lsls	r2, r2, #1
 8001864:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001866:	1879      	adds	r1, r7, r1
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_TIM1_Init+0x16c>)
 800186a:	220c      	movs	r2, #12
 800186c:	0018      	movs	r0, r3
 800186e:	f002 fda9 	bl	80043c4 <HAL_TIM_PWM_ConfigChannel>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001876:	f000 f86b 	bl	8001950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 20;
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2214      	movs	r2, #20
 8001890:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0192      	lsls	r2, r2, #6
 800189e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	0492      	lsls	r2, r2, #18
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018cc:	1d3a      	adds	r2, r7, #4
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f003 fa9c 	bl	8004e10 <HAL_TIMEx_ConfigBreakDeadTime>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80018dc:	f000 f838 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <MX_TIM1_Init+0x16c>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f92c 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b018      	add	sp, #96	; 0x60
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000104 	.word	0x20000104
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_DMA_Init+0x28>)
 8001900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_DMA_Init+0x28>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <MX_DMA_Init+0x28>)
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	2201      	movs	r2, #1
 8001910:	4013      	ands	r3, r2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40021000 	.word	0x40021000

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_GPIO_Init+0x28>)
 800192c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_GPIO_Init+0x28>)
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <MX_GPIO_Init+0x28>)
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	40021000 	.word	0x40021000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x44>)
 8001964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_MspInit+0x44>)
 8001968:	2101      	movs	r1, #1
 800196a:	430a      	orrs	r2, r1
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x44>)
 800197c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_MspInit+0x44>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0549      	lsls	r1, r1, #21
 8001984:	430a      	orrs	r2, r1
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_MspInit+0x44>)
 800198a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	055b      	lsls	r3, r3, #21
 8001990:	4013      	ands	r3, r2
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b095      	sub	sp, #84	; 0x54
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	233c      	movs	r3, #60	; 0x3c
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	0018      	movs	r0, r3
 80019b2:	2314      	movs	r3, #20
 80019b4:	001a      	movs	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f003 fb18 	bl	8004fec <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	2414      	movs	r4, #20
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	0018      	movs	r0, r3
 80019c2:	2318      	movs	r3, #24
 80019c4:	001a      	movs	r2, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	f003 fb10 	bl	8004fec <memset>
  if(hadc->Instance==ADC1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a47      	ldr	r2, [pc, #284]	; (8001af0 <HAL_ADC_MspInit+0x14c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d000      	beq.n	80019d8 <HAL_ADC_MspInit+0x34>
 80019d6:	e086      	b.n	8001ae6 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	01d2      	lsls	r2, r2, #7
 80019de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	0018      	movs	r0, r3
 80019ea:	f002 fa95 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80019f2:	f7ff ffad 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_ADC_MspInit+0x150>)
 80019f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_ADC_MspInit+0x150>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0349      	lsls	r1, r1, #13
 8001a00:	430a      	orrs	r2, r1
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_ADC_MspInit+0x150>)
 8001a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	035b      	lsls	r3, r3, #13
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_ADC_MspInit+0x150>)
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	4b37      	ldr	r3, [pc, #220]	; (8001af4 <HAL_ADC_MspInit+0x150>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_ADC_MspInit+0x150>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a2a:	213c      	movs	r1, #60	; 0x3c
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2207      	movs	r2, #7
 8001a30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2203      	movs	r2, #3
 8001a36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	187a      	adds	r2, r7, r1
 8001a40:	23a0      	movs	r3, #160	; 0xa0
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f001 fc28 	bl	800329c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <HAL_ADC_MspInit+0x158>)
 8001a50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a54:	2205      	movs	r2, #5
 8001a56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	0052      	lsls	r2, r2, #1
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	00d2      	lsls	r2, r2, #3
 8001a78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f001 fa27 	bl	8002edc <HAL_DMA_Init>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8001a92:	f7ff ff5d 	bl	8001950 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
    pSyncConfig.SyncEnable = DISABLE;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	721a      	strb	r2, [r3, #8]
    pSyncConfig.EventEnable = ENABLE;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2201      	movs	r2, #1
 8001aae:	725a      	strb	r2, [r3, #9]
    pSyncConfig.RequestNumber = 1;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	60da      	str	r2, [r3, #12]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001ab6:	187a      	adds	r2, r7, r1
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 fbad 	bl	800321c <HAL_DMAEx_ConfigMuxSync>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8001ac6:	f7ff ff43 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001ace:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_ADC_MspInit+0x154>)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200c      	movs	r0, #12
 8001adc:	f001 f9cc 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ae0:	200c      	movs	r0, #12
 8001ae2:	f001 f9de 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b015      	add	sp, #84	; 0x54
 8001aec:	bd90      	pop	{r4, r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	40012400 	.word	0x40012400
 8001af4:	40021000 	.word	0x40021000
 8001af8:	200000a8 	.word	0x200000a8
 8001afc:	40020008 	.word	0x40020008

08001b00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_TIM_PWM_MspInit+0x38>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10d      	bne.n	8001b2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0109      	lsls	r1, r1, #4
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b004      	add	sp, #16
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	240c      	movs	r4, #12
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	2314      	movs	r3, #20
 8001b50:	001a      	movs	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	f003 fa4a 	bl	8004fec <memset>
  if(htim->Instance==TIM1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_TIM_MspPostInit+0x74>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d123      	bne.n	8001baa <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_TIM_MspPostInit+0x78>)
 8001b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_TIM_MspPostInit+0x78>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_TIM_MspPostInit+0x78>)
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	2201      	movs	r2, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	22c0      	movs	r2, #192	; 0xc0
 8001b7e:	0052      	lsls	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	0021      	movs	r1, r4
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2202      	movs	r2, #2
 8001b88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2202      	movs	r2, #2
 8001b9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	187a      	adds	r2, r7, r1
 8001b9e:	23a0      	movs	r3, #160	; 0xa0
 8001ba0:	05db      	lsls	r3, r3, #23
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f001 fb79 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b009      	add	sp, #36	; 0x24
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  phU_Break();
 8001bc0:	f7ff fc50 	bl	8001464 <phU_Break>
 8001bc4:	e7fc      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  phU_Break();
 8001bca:	f7ff fc4b 	bl	8001464 <phU_Break>
 8001bce:	e7fc      	b.n	8001bca <HardFault_Handler+0x4>

08001bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */
	  phU_Break();
 8001bd4:	f7ff fc46 	bl	8001464 <phU_Break>
  /* USER CODE END SVC_IRQn 1 */
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
	  phU_Break();
 8001be2:	f7ff fc3f 	bl	8001464 <phU_Break>
  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f8ac 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
fast_loop();
 8001c00:	f7ff fb7e 	bl	8001300 <fast_loop>
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <ADC1_IRQHandler+0x18>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 fc46 	bl	8002498 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
  /* USER CODE END ADC1_IRQn 1 */
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	20000044 	.word	0x20000044

08001c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c28:	f7ff fff6 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c52:	f003 f9a7 	bl	8004fa4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c56:	f7ff fc75 	bl	8001544 <main>

08001c5a <LoopForever>:

LoopForever:
  b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   r0, =_estack
 8001c5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c68:	080050f0 	.word	0x080050f0
  ldr r2, =_sbss
 8001c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c70:	2000015c 	.word	0x2000015c

08001c74 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_Init+0x3c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Init+0x3c>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0049      	lsls	r1, r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c92:	2003      	movs	r0, #3
 8001c94:	f000 f810 	bl	8001cb8 <HAL_InitTick>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e001      	b.n	8001ca8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ca4:	f7ff fe5a 	bl	800195c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	781b      	ldrb	r3, [r3, #0]
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_InitTick+0x88>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d02b      	beq.n	8001d28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_InitTick+0x8c>)
 8001cd2:	681c      	ldr	r4, [r3, #0]
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_InitTick+0x88>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	0019      	movs	r1, r3
 8001cda:	23fa      	movs	r3, #250	; 0xfa
 8001cdc:	0098      	lsls	r0, r3, #2
 8001cde:	f7fe fa0f 	bl	8000100 <__udivsi3>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	f7fe fa0a 	bl	8000100 <__udivsi3>
 8001cec:	0003      	movs	r3, r0
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f001 f8e7 	bl	8002ec2 <HAL_SYSTICK_Config>
 8001cf4:	1e03      	subs	r3, r0, #0
 8001cf6:	d112      	bne.n	8001d1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d80a      	bhi.n	8001d14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	2301      	movs	r3, #1
 8001d02:	425b      	negs	r3, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	0018      	movs	r0, r3
 8001d08:	f001 f8b6 	bl	8002e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_InitTick+0x90>)
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00d      	b.n	8001d30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d14:	230f      	movs	r3, #15
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e008      	b.n	8001d30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e003      	b.n	8001d30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b005      	add	sp, #20
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_IncTick+0x1c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	001a      	movs	r2, r3
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_IncTick+0x20>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	18d2      	adds	r2, r2, r3
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_IncTick+0x20>)
 8001d5e:	601a      	str	r2, [r3, #0]
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000158 	.word	0x20000158

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_GetTick+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000158 	.word	0x20000158

08001d84 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001d94:	401a      	ands	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	fe3fffff 	.word	0xfe3fffff

08001dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	23e0      	movs	r3, #224	; 0xe0
 8001dba:	045b      	lsls	r3, r3, #17
 8001dbc:	4013      	ands	r3, r2
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b002      	add	sp, #8
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	2104      	movs	r1, #4
 8001dda:	400a      	ands	r2, r1
 8001ddc:	2107      	movs	r1, #7
 8001dde:	4091      	lsls	r1, r2
 8001de0:	000a      	movs	r2, r1
 8001de2:	43d2      	mvns	r2, r2
 8001de4:	401a      	ands	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2104      	movs	r1, #4
 8001dea:	400b      	ands	r3, r1
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4099      	lsls	r1, r3
 8001df0:	000b      	movs	r3, r1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	2104      	movs	r1, #4
 8001e12:	400a      	ands	r2, r1
 8001e14:	2107      	movs	r1, #7
 8001e16:	4091      	lsls	r1, r2
 8001e18:	000a      	movs	r2, r1
 8001e1a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2104      	movs	r1, #4
 8001e20:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e22:	40da      	lsrs	r2, r3
 8001e24:	0013      	movs	r3, r2
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	211f      	movs	r1, #31
 8001e64:	400a      	ands	r2, r1
 8001e66:	210f      	movs	r1, #15
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	43d2      	mvns	r2, r2
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	0e9b      	lsrs	r3, r3, #26
 8001e74:	210f      	movs	r1, #15
 8001e76:	4019      	ands	r1, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	201f      	movs	r0, #31
 8001e7c:	4003      	ands	r3, r0
 8001e7e:	4099      	lsls	r1, r3
 8001e80:	000b      	movs	r3, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	035b      	lsls	r3, r3, #13
 8001ea2:	0b5b      	lsrs	r3, r3, #13
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	0352      	lsls	r2, r2, #13
 8001ec4:	0b52      	lsrs	r2, r2, #13
 8001ec6:	43d2      	mvns	r2, r2
 8001ec8:	401a      	ands	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	4013      	ands	r3, r2
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	0212      	lsls	r2, r2, #8
 8001f04:	43d2      	mvns	r2, r2
 8001f06:	401a      	ands	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
 8001f10:	4904      	ldr	r1, [pc, #16]	; (8001f24 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001f12:	400b      	ands	r3, r1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	07ffff00 	.word	0x07ffff00

08001f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	0552      	lsls	r2, r2, #21
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	6fffffe8 	.word	0x6fffffe8

08001f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	401a      	ands	r2, r3
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	055b      	lsls	r3, r3, #21
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d101      	bne.n	8001f6e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <LL_ADC_Enable+0x20>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	2201      	movs	r2, #1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	7fffffe8 	.word	0x7fffffe8

08001f9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <LL_ADC_Disable+0x20>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	2202      	movs	r2, #2
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	7fffffe8 	.word	0x7fffffe8

08001fc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <LL_ADC_IsEnabled+0x18>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_ADC_IsEnabled+0x1a>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <LL_ADC_REG_StartConversion+0x20>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}
 8002004:	7fffffe8 	.word	0x7fffffe8

08002008 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	2b04      	cmp	r3, #4
 800201a:	d101      	bne.n	8002020 <LL_ADC_REG_IsConversionOngoing+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	231f      	movs	r3, #31
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e17f      	b.n	8002352 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff fca1 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2254      	movs	r2, #84	; 0x54
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff ff6b 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d115      	bne.n	80020aa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff ff50 	bl	8001f28 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002088:	4bb4      	ldr	r3, [pc, #720]	; (800235c <HAL_ADC_Init+0x330>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	49b4      	ldr	r1, [pc, #720]	; (8002360 <HAL_ADC_Init+0x334>)
 800208e:	0018      	movs	r0, r3
 8002090:	f7fe f836 	bl	8000100 <__udivsi3>
 8002094:	0003      	movs	r3, r0
 8002096:	3301      	adds	r3, #1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800209c:	e002      	b.n	80020a4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff ff4e 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d10f      	bne.n	80020d8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	2210      	movs	r2, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2201      	movs	r2, #1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020d0:	231f      	movs	r3, #31
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff ff93 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	2210      	movs	r2, #16
 80020ec:	4013      	ands	r3, r2
 80020ee:	d000      	beq.n	80020f2 <HAL_ADC_Init+0xc6>
 80020f0:	e122      	b.n	8002338 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d000      	beq.n	80020fa <HAL_ADC_Init+0xce>
 80020f8:	e11e      	b.n	8002338 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a99      	ldr	r2, [pc, #612]	; (8002364 <HAL_ADC_Init+0x338>)
 8002100:	4013      	ands	r3, r2
 8002102:	2202      	movs	r2, #2
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0018      	movs	r0, r3
 8002110:	f7ff ff56 	bl	8001fc0 <LL_ADC_IsEnabled>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d000      	beq.n	800211a <HAL_ADC_Init+0xee>
 8002118:	e0ad      	b.n	8002276 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7e1b      	ldrb	r3, [r3, #24]
 8002122:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002124:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7e5b      	ldrb	r3, [r3, #25]
 800212a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800212c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7e9b      	ldrb	r3, [r3, #26]
 8002132:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002134:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_ADC_Init+0x118>
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	015b      	lsls	r3, r3, #5
 8002142:	e000      	b.n	8002146 <HAL_ADC_Init+0x11a>
 8002144:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002146:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800214c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da04      	bge.n	8002160 <HAL_ADC_Init+0x134>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	e001      	b.n	8002164 <HAL_ADC_Init+0x138>
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002164:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	5c5b      	ldrb	r3, [r3, r1]
 800216c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800216e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d115      	bne.n	80021ac <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e9b      	ldrb	r3, [r3, #26]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0252      	lsls	r2, r2, #9
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	e00b      	b.n	80021ac <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	2220      	movs	r2, #32
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2201      	movs	r2, #1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	23e0      	movs	r3, #224	; 0xe0
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80021c2:	4313      	orrs	r3, r2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_ADC_Init+0x33c>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	0f9b      	lsrs	r3, r3, #30
 80021e6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	223c      	movs	r2, #60	; 0x3c
 80021f8:	5c9b      	ldrb	r3, [r3, r2]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d111      	bne.n	8002222 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0f9b      	lsrs	r3, r3, #30
 8002204:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800220a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002210:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002216:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	2201      	movs	r2, #1
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_ADC_Init+0x340>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	430a      	orrs	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	23c0      	movs	r3, #192	; 0xc0
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	429a      	cmp	r2, r3
 8002242:	d018      	beq.n	8002276 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	429a      	cmp	r2, r3
 800224e:	d012      	beq.n	8002276 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	061b      	lsls	r3, r3, #24
 8002258:	429a      	cmp	r2, r3
 800225a:	d00c      	beq.n	8002276 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800225c:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_ADC_Init+0x344>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_ADC_Init+0x348>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	23f0      	movs	r3, #240	; 0xf0
 800226c:	039b      	lsls	r3, r3, #14
 800226e:	401a      	ands	r2, r3
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_ADC_Init+0x344>)
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	001a      	movs	r2, r3
 8002280:	2100      	movs	r1, #0
 8002282:	f7ff fda0 	bl	8001dc6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	493a      	ldr	r1, [pc, #232]	; (8002378 <HAL_ADC_Init+0x34c>)
 8002290:	001a      	movs	r2, r3
 8002292:	f7ff fd98 	bl	8001dc6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2110      	movs	r1, #16
 80022aa:	4249      	negs	r1, r1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
 80022b0:	e018      	b.n	80022e4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	039b      	lsls	r3, r3, #14
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d112      	bne.n	80022e4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	221c      	movs	r2, #28
 80022ce:	4013      	ands	r3, r2
 80022d0:	2210      	movs	r2, #16
 80022d2:	4252      	negs	r2, r2
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0011      	movs	r1, r2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2100      	movs	r1, #0
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff fd88 	bl	8001e00 <LL_ADC_GetSamplingTimeCommonChannels>
 80022f0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10b      	bne.n	8002312 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	2203      	movs	r2, #3
 8002306:	4393      	bics	r3, r2
 8002308:	2201      	movs	r2, #1
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002310:	e01c      	b.n	800234c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	2212      	movs	r2, #18
 8002318:	4393      	bics	r3, r2
 800231a:	2210      	movs	r2, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2201      	movs	r2, #1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800232e:	231f      	movs	r3, #31
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002336:	e009      	b.n	800234c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	2210      	movs	r2, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800234c:	231f      	movs	r3, #31
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b008      	add	sp, #32
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000000 	.word	0x20000000
 8002360:	00030d40 	.word	0x00030d40
 8002364:	fffffefd 	.word	0xfffffefd
 8002368:	fffe0201 	.word	0xfffe0201
 800236c:	1ffffc02 	.word	0x1ffffc02
 8002370:	40012708 	.word	0x40012708
 8002374:	ffc3ffff 	.word	0xffc3ffff
 8002378:	07ffff04 	.word	0x07ffff04

0800237c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fe3b 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d16c      	bne.n	8002470 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2254      	movs	r2, #84	; 0x54
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_Start_DMA+0x28>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e06c      	b.n	800247e <HAL_ADC_Start_DMA+0x102>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2254      	movs	r2, #84	; 0x54
 80023a8:	2101      	movs	r1, #1
 80023aa:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	d113      	bne.n	80023e0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff fdff 	bl	8001fc0 <LL_ADC_IsEnabled>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff fde6 	bl	8001f9c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023e0:	2517      	movs	r5, #23
 80023e2:	197c      	adds	r4, r7, r5
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fb66 	bl	8002ab8 <ADC_Enable>
 80023ec:	0003      	movs	r3, r0
 80023ee:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023f0:	002c      	movs	r4, r5
 80023f2:	193b      	adds	r3, r7, r4
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d13e      	bne.n	8002478 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_ADC_Start_DMA+0x10c>)
 8002400:	4013      	ands	r3, r2
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	0052      	lsls	r2, r2, #1
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_ADC_Start_DMA+0x110>)
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_ADC_Start_DMA+0x114>)
 8002420:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_ADC_Start_DMA+0x118>)
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	221c      	movs	r2, #28
 8002430:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2254      	movs	r2, #84	; 0x54
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2110      	movs	r1, #16
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3340      	adds	r3, #64	; 0x40
 8002454:	0019      	movs	r1, r3
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	193c      	adds	r4, r7, r4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f000 fdc8 	bl	8002ff0 <HAL_DMA_Start_IT>
 8002460:	0003      	movs	r3, r0
 8002462:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff fdbb 	bl	8001fe4 <LL_ADC_REG_StartConversion>
 800246e:	e003      	b.n	8002478 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002470:	2317      	movs	r3, #23
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002478:	2317      	movs	r3, #23
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b006      	add	sp, #24
 8002484:	bdb0      	pop	{r4, r5, r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffff0fe 	.word	0xfffff0fe
 800248c:	08002bc5 	.word	0x08002bc5
 8002490:	08002c8d 	.word	0x08002c8d
 8002494:	08002cab 	.word	0x08002cab

08002498 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d017      	beq.n	80024ec <HAL_ADC_IRQHandler+0x54>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2202      	movs	r2, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	2210      	movs	r2, #16
 80024ca:	4013      	ands	r3, r2
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 fc0e 	bl	8002d00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	d003      	beq.n	80024fc <HAL_ADC_IRQHandler+0x64>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2204      	movs	r2, #4
 80024f8:	4013      	ands	r3, r2
 80024fa:	d107      	bne.n	800250c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2208      	movs	r2, #8
 8002500:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002502:	d04d      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2208      	movs	r2, #8
 8002508:	4013      	ands	r3, r2
 800250a:	d049      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	2210      	movs	r2, #16
 8002512:	4013      	ands	r3, r2
 8002514:	d106      	bne.n	8002524 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff fc80 	bl	8001e2e <LL_ADC_REG_IsTriggerSourceSWStart>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d02e      	beq.n	8002590 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7e9b      	ldrb	r3, [r3, #26]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d12a      	bne.n	8002590 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2208      	movs	r2, #8
 8002542:	4013      	ands	r3, r2
 8002544:	2b08      	cmp	r3, #8
 8002546:	d123      	bne.n	8002590 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff fd5b 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d110      	bne.n	8002578 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	210c      	movs	r1, #12
 8002562:	438a      	bics	r2, r1
 8002564:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a56      	ldr	r2, [pc, #344]	; (80026c4 <HAL_ADC_IRQHandler+0x22c>)
 800256c:	4013      	ands	r3, r2
 800256e:	2201      	movs	r2, #1
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	659a      	str	r2, [r3, #88]	; 0x58
 8002576:	e00b      	b.n	8002590 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	2220      	movs	r2, #32
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2201      	movs	r2, #1
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f898 	bl	80026c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	220c      	movs	r2, #12
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	4013      	ands	r3, r2
 80025a6:	d012      	beq.n	80025ce <HAL_ADC_IRQHandler+0x136>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	4013      	ands	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0252      	lsls	r2, r2, #9
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f891 	bl	80026e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	d014      	beq.n	8002602 <HAL_ADC_IRQHandler+0x16a>
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d00f      	beq.n	8002602 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	0292      	lsls	r2, r2, #10
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 fb74 	bl	8002ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0052      	lsls	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d014      	beq.n	8002636 <HAL_ADC_IRQHandler+0x19e>
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d00f      	beq.n	8002636 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	02d2      	lsls	r2, r2, #11
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fb62 	bl	8002cf0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2210      	movs	r2, #16
 800263a:	4013      	ands	r3, r2
 800263c:	d02b      	beq.n	8002696 <HAL_ADC_IRQHandler+0x1fe>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2210      	movs	r2, #16
 8002642:	4013      	ands	r3, r2
 8002644:	d027      	beq.n	8002696 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800264e:	2301      	movs	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e008      	b.n	8002666 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff fc3c 	bl	8001ed6 <LL_ADC_REG_GetDMATransfer>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d001      	beq.n	8002666 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002662:	2301      	movs	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d110      	bne.n	800268e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	00d2      	lsls	r2, r2, #3
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2202      	movs	r2, #2
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f835 	bl	80026f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2210      	movs	r2, #16
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	019b      	lsls	r3, r3, #6
 800269c:	4013      	ands	r3, r2
 800269e:	d00d      	beq.n	80026bc <HAL_ADC_IRQHandler+0x224>
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	4013      	ands	r3, r2
 80026a8:	d008      	beq.n	80026bc <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fb2f 	bl	8002d10 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	0192      	lsls	r2, r2, #6
 80026ba:	601a      	str	r2, [r3, #0]
  }
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b006      	add	sp, #24
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	fffffefe 	.word	0xfffffefe

080026c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002712:	2317      	movs	r3, #23
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2254      	movs	r2, #84	; 0x54
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_ConfigChannel+0x24>
 8002728:	2302      	movs	r3, #2
 800272a:	e1c0      	b.n	8002aae <HAL_ADC_ConfigChannel+0x3a6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2254      	movs	r2, #84	; 0x54
 8002730:	2101      	movs	r1, #1
 8002732:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0018      	movs	r0, r3
 800273a:	f7ff fc65 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d000      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x3c>
 8002742:	e1a3      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d100      	bne.n	800274e <HAL_ADC_ConfigChannel+0x46>
 800274c:	e143      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	429a      	cmp	r2, r3
 8002758:	d004      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800275e:	4ac1      	ldr	r2, [pc, #772]	; (8002a64 <HAL_ADC_ConfigChannel+0x35c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d108      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0019      	movs	r1, r3
 800276e:	0010      	movs	r0, r2
 8002770:	f7ff fb8e 	bl	8001e90 <LL_ADC_REG_SetSequencerChAdd>
 8002774:	e0c9      	b.n	800290a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	211f      	movs	r1, #31
 8002780:	400b      	ands	r3, r1
 8002782:	210f      	movs	r1, #15
 8002784:	4099      	lsls	r1, r3
 8002786:	000b      	movs	r3, r1
 8002788:	43db      	mvns	r3, r3
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	035b      	lsls	r3, r3, #13
 8002794:	0b5b      	lsrs	r3, r3, #13
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x9c>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	221f      	movs	r2, #31
 80027a0:	4013      	ands	r3, r2
 80027a2:	e098      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	d000      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0xa8>
 80027ae:	e091      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x1cc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2202      	movs	r2, #2
 80027b6:	4013      	ands	r3, r2
 80027b8:	d000      	beq.n	80027bc <HAL_ADC_ConfigChannel+0xb4>
 80027ba:	e089      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1c8>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2204      	movs	r2, #4
 80027c2:	4013      	ands	r3, r2
 80027c4:	d000      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0xc0>
 80027c6:	e081      	b.n	80028cc <HAL_ADC_ConfigChannel+0x1c4>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	4013      	ands	r3, r2
 80027d0:	d000      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0xcc>
 80027d2:	e079      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x1c0>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d000      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0xd8>
 80027de:	e071      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x1bc>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2220      	movs	r2, #32
 80027e6:	4013      	ands	r3, r2
 80027e8:	d000      	beq.n	80027ec <HAL_ADC_ConfigChannel+0xe4>
 80027ea:	e069      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x1b8>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2240      	movs	r2, #64	; 0x40
 80027f2:	4013      	ands	r3, r2
 80027f4:	d000      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0xf0>
 80027f6:	e061      	b.n	80028bc <HAL_ADC_ConfigChannel+0x1b4>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	4013      	ands	r3, r2
 8002800:	d000      	beq.n	8002804 <HAL_ADC_ConfigChannel+0xfc>
 8002802:	e059      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x1b0>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d151      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1ac>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d149      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4013      	ands	r3, r2
 8002826:	d141      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1a4>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4013      	ands	r3, r2
 8002832:	d139      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1a0>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	015b      	lsls	r3, r3, #5
 800283c:	4013      	ands	r3, r2
 800283e:	d131      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x19c>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	019b      	lsls	r3, r3, #6
 8002848:	4013      	ands	r3, r2
 800284a:	d129      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x198>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	4013      	ands	r3, r2
 8002856:	d121      	bne.n	800289c <HAL_ADC_ConfigChannel+0x194>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	4013      	ands	r3, r2
 8002862:	d119      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x190>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	4013      	ands	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x18c>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	d109      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x188>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	02db      	lsls	r3, r3, #11
 8002884:	4013      	ands	r3, r2
 8002886:	d001      	beq.n	800288c <HAL_ADC_ConfigChannel+0x184>
 8002888:	2312      	movs	r3, #18
 800288a:	e024      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 800288c:	2300      	movs	r3, #0
 800288e:	e022      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 8002890:	2311      	movs	r3, #17
 8002892:	e020      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 8002894:	2310      	movs	r3, #16
 8002896:	e01e      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 8002898:	230f      	movs	r3, #15
 800289a:	e01c      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 800289c:	230e      	movs	r3, #14
 800289e:	e01a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028a0:	230d      	movs	r3, #13
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028a4:	230c      	movs	r3, #12
 80028a6:	e016      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028a8:	230b      	movs	r3, #11
 80028aa:	e014      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028ac:	230a      	movs	r3, #10
 80028ae:	e012      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028b0:	2309      	movs	r3, #9
 80028b2:	e010      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028b4:	2308      	movs	r3, #8
 80028b6:	e00e      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028b8:	2307      	movs	r3, #7
 80028ba:	e00c      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028bc:	2306      	movs	r3, #6
 80028be:	e00a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028c0:	2305      	movs	r3, #5
 80028c2:	e008      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e006      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e004      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ce>
 80028d4:	2300      	movs	r3, #0
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	6852      	ldr	r2, [r2, #4]
 80028da:	201f      	movs	r0, #31
 80028dc:	4002      	ands	r2, r0
 80028de:	4093      	lsls	r3, r2
 80028e0:	000a      	movs	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d808      	bhi.n	800290a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	001a      	movs	r2, r3
 8002906:	f7ff faa3 	bl	8001e50 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	001a      	movs	r2, r3
 8002918:	f7ff faea 	bl	8001ef0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db00      	blt.n	8002926 <HAL_ADC_ConfigChannel+0x21e>
 8002924:	e0bc      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fa3f 	bl	8001dac <LL_ADC_GetCommonPathInternalCh>
 800292e:	0003      	movs	r3, r0
 8002930:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4d      	ldr	r2, [pc, #308]	; (8002a6c <HAL_ADC_ConfigChannel+0x364>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d122      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002944:	d11d      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	0412      	lsls	r2, r2, #16
 800294c:	4313      	orrs	r3, r2
 800294e:	4a46      	ldr	r2, [pc, #280]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f7ff fa16 	bl	8001d84 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002958:	4b45      	ldr	r3, [pc, #276]	; (8002a70 <HAL_ADC_ConfigChannel+0x368>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4945      	ldr	r1, [pc, #276]	; (8002a74 <HAL_ADC_ConfigChannel+0x36c>)
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd fbce 	bl	8000100 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	0013      	movs	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	189b      	adds	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002972:	e002      	b.n	800297a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3b01      	subs	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002980:	e08e      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_ADC_ConfigChannel+0x370>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10e      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	045b      	lsls	r3, r3, #17
 8002992:	4013      	ands	r3, r2
 8002994:	d109      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	0452      	lsls	r2, r2, #17
 800299c:	4313      	orrs	r3, r2
 800299e:	4a32      	ldr	r2, [pc, #200]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 80029a0:	0019      	movs	r1, r3
 80029a2:	0010      	movs	r0, r2
 80029a4:	f7ff f9ee 	bl	8001d84 <LL_ADC_SetCommonPathInternalCh>
 80029a8:	e07a      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <HAL_ADC_ConfigChannel+0x374>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d000      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x2ae>
 80029b4:	e074      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	03db      	lsls	r3, r3, #15
 80029bc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029be:	d000      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x2ba>
 80029c0:	e06e      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	03d2      	lsls	r2, r2, #15
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f7ff f9d8 	bl	8001d84 <LL_ADC_SetCommonPathInternalCh>
 80029d4:	e064      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d004      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_ADC_ConfigChannel+0x35c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d107      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f7ff fa5b 	bl	8001eb2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da4d      	bge.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7ff f9d0 	bl	8001dac <LL_ADC_GetCommonPathInternalCh>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_ADC_ConfigChannel+0x364>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_ADC_ConfigChannel+0x378>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 8002a22:	0019      	movs	r1, r3
 8002a24:	0010      	movs	r0, r2
 8002a26:	f7ff f9ad 	bl	8001d84 <LL_ADC_SetCommonPathInternalCh>
 8002a2a:	e039      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_ADC_ConfigChannel+0x370>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_ADC_ConfigChannel+0x37c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f7ff f99f 	bl	8001d84 <LL_ADC_SetCommonPathInternalCh>
 8002a46:	e02b      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <HAL_ADC_ConfigChannel+0x374>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d126      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_ADC_ConfigChannel+0x380>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_ADC_ConfigChannel+0x360>)
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	f7ff f991 	bl	8001d84 <LL_ADC_SetCommonPathInternalCh>
 8002a62:	e01d      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x398>
 8002a64:	80000004 	.word	0x80000004
 8002a68:	40012708 	.word	0x40012708
 8002a6c:	b0001000 	.word	0xb0001000
 8002a70:	20000000 	.word	0x20000000
 8002a74:	00030d40 	.word	0x00030d40
 8002a78:	b8004000 	.word	0xb8004000
 8002a7c:	b4002000 	.word	0xb4002000
 8002a80:	ff7fffff 	.word	0xff7fffff
 8002a84:	feffffff 	.word	0xfeffffff
 8002a88:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	2220      	movs	r2, #32
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a98:	2317      	movs	r3, #23
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2254      	movs	r2, #84	; 0x54
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002aa8:	2317      	movs	r3, #23
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	781b      	ldrb	r3, [r3, #0]
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b006      	add	sp, #24
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)

08002ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff fa79 	bl	8001fc0 <LL_ADC_IsEnabled>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d000      	beq.n	8002ad4 <ADC_Enable+0x1c>
 8002ad2:	e069      	b.n	8002ba8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a36      	ldr	r2, [pc, #216]	; (8002bb4 <ADC_Enable+0xfc>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00d      	beq.n	8002afc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2201      	movs	r2, #1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e056      	b.n	8002baa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff fa39 	bl	8001f78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <ADC_Enable+0x100>)
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7ff f94f 	bl	8001dac <LL_ADC_GetCommonPathInternalCh>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00f      	beq.n	8002b38 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <ADC_Enable+0x104>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4928      	ldr	r1, [pc, #160]	; (8002bc0 <ADC_Enable+0x108>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd faee 	bl	8000100 <__udivsi3>
 8002b24:	0003      	movs	r3, r0
 8002b26:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002b28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b2a:	e002      	b.n	8002b32 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e5b      	ldrb	r3, [r3, #25]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d033      	beq.n	8002ba8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002b40:	f7ff f916 	bl	8001d70 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b48:	e027      	b.n	8002b9a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff fa36 	bl	8001fc0 <LL_ADC_IsEnabled>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d104      	bne.n	8002b62 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7ff fa0b 	bl	8001f78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b62:	f7ff f905 	bl	8001d70 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d914      	bls.n	8002b9a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d00d      	beq.n	8002b9a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	2210      	movs	r2, #16
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e007      	b.n	8002baa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d1d0      	bne.n	8002b4a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	80000017 	.word	0x80000017
 8002bb8:	40012708 	.word	0x40012708
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	00030d40 	.word	0x00030d40

08002bc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	2250      	movs	r2, #80	; 0x50
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d141      	bne.n	8002c60 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7ff f91d 	bl	8001e2e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d02e      	beq.n	8002c56 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	7e9b      	ldrb	r3, [r3, #26]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d12a      	bne.n	8002c56 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2208      	movs	r2, #8
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d123      	bne.n	8002c56 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7ff f9f8 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d110      	bne.n	8002c3e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	210c      	movs	r1, #12
 8002c28:	438a      	bics	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <ADC_DMAConvCplt+0xc4>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2201      	movs	r2, #1
 8002c36:	431a      	orrs	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c3c:	e00b      	b.n	8002c56 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	2220      	movs	r2, #32
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2201      	movs	r2, #1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff fd35 	bl	80026c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c5e:	e00f      	b.n	8002c80 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	2210      	movs	r2, #16
 8002c66:	4013      	ands	r3, r2
 8002c68:	d004      	beq.n	8002c74 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff fd43 	bl	80026f8 <HAL_ADC_ErrorCallback>
}
 8002c72:	e005      	b.n	8002c80 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	4798      	blx	r3
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	fffffefe 	.word	0xfffffefe

08002c8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fd1b 	bl	80026d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	2204      	movs	r2, #4
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff fd10 	bl	80026f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	0002      	movs	r2, r0
 8002d28:	1dfb      	adds	r3, r7, #7
 8002d2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d2c:	1dfb      	adds	r3, r7, #7
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b7f      	cmp	r3, #127	; 0x7f
 8002d32:	d809      	bhi.n	8002d48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__NVIC_EnableIRQ+0x30>)
 8002d40:	2101      	movs	r1, #1
 8002d42:	4091      	lsls	r1, r2
 8002d44:	000a      	movs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b7f      	cmp	r3, #127	; 0x7f
 8002d68:	d828      	bhi.n	8002dbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <__NVIC_SetPriority+0xd4>)
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	33c0      	adds	r3, #192	; 0xc0
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	589b      	ldr	r3, [r3, r2]
 8002d7a:	1dfa      	adds	r2, r7, #7
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	0011      	movs	r1, r2
 8002d80:	2203      	movs	r2, #3
 8002d82:	400a      	ands	r2, r1
 8002d84:	00d2      	lsls	r2, r2, #3
 8002d86:	21ff      	movs	r1, #255	; 0xff
 8002d88:	4091      	lsls	r1, r2
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	43d2      	mvns	r2, r2
 8002d8e:	401a      	ands	r2, r3
 8002d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	22ff      	movs	r2, #255	; 0xff
 8002d98:	401a      	ands	r2, r3
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	2303      	movs	r3, #3
 8002da2:	4003      	ands	r3, r0
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da8:	481f      	ldr	r0, [pc, #124]	; (8002e28 <__NVIC_SetPriority+0xd4>)
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	430a      	orrs	r2, r1
 8002db4:	33c0      	adds	r3, #192	; 0xc0
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dba:	e031      	b.n	8002e20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <__NVIC_SetPriority+0xd8>)
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	3b08      	subs	r3, #8
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3306      	adds	r3, #6
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	18d3      	adds	r3, r2, r3
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1dfa      	adds	r2, r7, #7
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	0011      	movs	r1, r2
 8002ddc:	2203      	movs	r2, #3
 8002dde:	400a      	ands	r2, r1
 8002de0:	00d2      	lsls	r2, r2, #3
 8002de2:	21ff      	movs	r1, #255	; 0xff
 8002de4:	4091      	lsls	r1, r2
 8002de6:	000a      	movs	r2, r1
 8002de8:	43d2      	mvns	r2, r2
 8002dea:	401a      	ands	r2, r3
 8002dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	22ff      	movs	r2, #255	; 0xff
 8002df4:	401a      	ands	r2, r3
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	4003      	ands	r3, r0
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e04:	4809      	ldr	r0, [pc, #36]	; (8002e2c <__NVIC_SetPriority+0xd8>)
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	001c      	movs	r4, r3
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	4023      	ands	r3, r4
 8002e10:	3b08      	subs	r3, #8
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	430a      	orrs	r2, r1
 8002e16:	3306      	adds	r3, #6
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	18c3      	adds	r3, r0, r3
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	601a      	str	r2, [r3, #0]
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b003      	add	sp, #12
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1e5a      	subs	r2, r3, #1
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	045b      	lsls	r3, r3, #17
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d301      	bcc.n	8002e48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e44:	2301      	movs	r3, #1
 8002e46:	e010      	b.n	8002e6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <SysTick_Config+0x44>)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e50:	2301      	movs	r3, #1
 8002e52:	425b      	negs	r3, r3
 8002e54:	2103      	movs	r1, #3
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7ff ff7c 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x44>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x44>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	210f      	movs	r1, #15
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	1c02      	adds	r2, r0, #0
 8002e88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff ff5d 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff ff33 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff ffaf 	bl	8002e30 <SysTick_Config>
 8002ed2:	0003      	movs	r3, r0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e077      	b.n	8002fde <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <HAL_DMA_Init+0x10c>)
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	4463      	add	r3, ip
 8002ef8:	2114      	movs	r1, #20
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7fd f900 	bl	8000100 <__udivsi3>
 8002f00:	0003      	movs	r3, r0
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2225      	movs	r2, #37	; 0x25
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_DMA_Init+0x110>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f90f 	bl	800317c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d102      	bne.n	8002f70 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	213f      	movs	r1, #63	; 0x3f
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <HAL_DMA_Init+0xd8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d80d      	bhi.n	8002fb4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f91a 	bl	80031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e008      	b.n	8002fc6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2225      	movs	r2, #37	; 0x25
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	bffdfff8 	.word	0xbffdfff8
 8002fec:	ffff800f 	.word	0xffff800f

08002ff0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2317      	movs	r3, #23
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2224      	movs	r2, #36	; 0x24
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_DMA_Start_IT+0x24>
 8003010:	2302      	movs	r3, #2
 8003012:	e06f      	b.n	80030f4 <HAL_DMA_Start_IT+0x104>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	2101      	movs	r1, #1
 800301a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2225      	movs	r2, #37	; 0x25
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d157      	bne.n	80030d8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2225      	movs	r2, #37	; 0x25
 800302c:	2102      	movs	r1, #2
 800302e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	438a      	bics	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f855 	bl	80030fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	210e      	movs	r1, #14
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e00f      	b.n	800308c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2104      	movs	r1, #4
 8003078:	438a      	bics	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	210a      	movs	r1, #10
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	025b      	lsls	r3, r3, #9
 8003096:	4013      	ands	r3, r2
 8003098:	d008      	beq.n	80030ac <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0049      	lsls	r1, r1, #1
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	0049      	lsls	r1, r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e00a      	b.n	80030ee <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2224      	movs	r2, #36	; 0x24
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80030e6:	2317      	movs	r3, #23
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80030ee:	2317      	movs	r3, #23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	781b      	ldrb	r3, [r3, #0]
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b006      	add	sp, #24
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003112:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003124:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <DMA_SetConfig+0x7c>)
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	221c      	movs	r2, #28
 8003130:	4013      	ands	r3, r2
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <DMA_SetConfig+0x7c>)
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d108      	bne.n	800315e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800315c:	e007      	b.n	800316e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	60da      	str	r2, [r3, #12]
}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	40020000 	.word	0x40020000

0800317c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800318c:	4694      	mov	ip, r2
 800318e:	4463      	add	r3, ip
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	001a      	movs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	001a      	movs	r2, r3
 800319e:	23ff      	movs	r3, #255	; 0xff
 80031a0:	4013      	ands	r3, r2
 80031a2:	3b08      	subs	r3, #8
 80031a4:	2114      	movs	r1, #20
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fc ffaa 	bl	8000100 <__udivsi3>
 80031ac:	0003      	movs	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80031b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	221f      	movs	r2, #31
 80031ba:	4013      	ands	r3, r2
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	10008200 	.word	0x10008200
 80031d0:	40020880 	.word	0x40020880

080031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	223f      	movs	r2, #63	; 0x3f
 80031e2:	4013      	ands	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031ea:	4694      	mov	ip, r2
 80031ec:	4463      	add	r3, ip
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	001a      	movs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	4013      	ands	r3, r2
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b004      	add	sp, #16
 8003212:	bd80      	pop	{r7, pc}
 8003214:	1000823f 	.word	0x1000823f
 8003218:	40020940 	.word	0x40020940

0800321c <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2225      	movs	r2, #37	; 0x25
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d12c      	bne.n	800328c <HAL_DMAEx_ConfigMuxSync+0x70>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2224      	movs	r2, #36	; 0x24
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_DMAEx_ConfigMuxSync+0x24>
 800323c:	2302      	movs	r3, #2
 800323e:	e029      	b.n	8003294 <HAL_DMAEx_ConfigMuxSync+0x78>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	223f      	movs	r2, #63	; 0x3f
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	3b01      	subs	r3, #1
 800325e:	04db      	lsls	r3, r3, #19
 8003260:	431a      	orrs	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	431a      	orrs	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	7a1b      	ldrb	r3, [r3, #8]
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	7a5b      	ldrb	r3, [r3, #9]
 8003274:	025b      	lsls	r3, r3, #9
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	; 0x24
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e003      	b.n	8003294 <HAL_DMAEx_ConfigMuxSync+0x78>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
  }
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032aa:	e147      	b.n	800353c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4091      	lsls	r1, r2
 80032b6:	000a      	movs	r2, r1
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <HAL_GPIO_Init+0x28>
 80032c2:	e138      	b.n	8003536 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_GPIO_Init+0x40>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	409a      	lsls	r2, r3
 80032ea:	0013      	movs	r3, r2
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	0013      	movs	r3, r2
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
 8003318:	0013      	movs	r3, r2
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	2201      	movs	r2, #1
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	4013      	ands	r3, r2
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2203      	movs	r2, #3
 8003380:	4013      	ands	r3, r2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d123      	bne.n	80033ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	58d3      	ldr	r3, [r2, r3]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	409a      	lsls	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	43da      	mvns	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2107      	movs	r1, #7
 80033b2:	400b      	ands	r3, r1
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	6939      	ldr	r1, [r7, #16]
 80033cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2203      	movs	r2, #3
 80033ec:	401a      	ands	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	d100      	bne.n	8003410 <HAL_GPIO_Init+0x174>
 800340e:	e092      	b.n	8003536 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003410:	4a50      	ldr	r2, [pc, #320]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3318      	adds	r3, #24
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	589b      	ldr	r3, [r3, r2]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2203      	movs	r2, #3
 8003422:	4013      	ands	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	220f      	movs	r2, #15
 8003428:	409a      	lsls	r2, r3
 800342a:	0013      	movs	r3, r2
 800342c:	43da      	mvns	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	05db      	lsls	r3, r3, #23
 800343a:	429a      	cmp	r2, r3
 800343c:	d013      	beq.n	8003466 <HAL_GPIO_Init+0x1ca>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a45      	ldr	r2, [pc, #276]	; (8003558 <HAL_GPIO_Init+0x2bc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_GPIO_Init+0x1c6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a44      	ldr	r2, [pc, #272]	; (800355c <HAL_GPIO_Init+0x2c0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x1c2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a43      	ldr	r2, [pc, #268]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_GPIO_Init+0x1be>
 8003456:	2303      	movs	r3, #3
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 800345a:	2305      	movs	r3, #5
 800345c:	e004      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x1cc>
 8003466:	2300      	movs	r3, #0
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	2103      	movs	r1, #3
 800346c:	400a      	ands	r2, r1
 800346e:	00d2      	lsls	r2, r2, #3
 8003470:	4093      	lsls	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003478:	4936      	ldr	r1, [pc, #216]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3318      	adds	r3, #24
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43da      	mvns	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	035b      	lsls	r3, r3, #13
 800349e:	4013      	ands	r3, r2
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	039b      	lsls	r3, r3, #14
 80034c8:	4013      	ands	r3, r2
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 80034dc:	2384      	movs	r3, #132	; 0x84
 80034de:	58d3      	ldr	r3, [r2, r3]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	029b      	lsls	r3, r3, #10
 80034f4:	4013      	ands	r3, r2
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003500:	4914      	ldr	r1, [pc, #80]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003502:	2284      	movs	r2, #132	; 0x84
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003508:	4a12      	ldr	r2, [pc, #72]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	58d3      	ldr	r3, [r2, r3]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43da      	mvns	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	4013      	ands	r3, r2
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800352e:	4909      	ldr	r1, [pc, #36]	; (8003554 <HAL_GPIO_Init+0x2b8>)
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	40da      	lsrs	r2, r3
 8003544:	1e13      	subs	r3, r2, #0
 8003546:	d000      	beq.n	800354a <HAL_GPIO_Init+0x2ae>
 8003548:	e6b0      	b.n	80032ac <HAL_GPIO_Init+0x10>
  }
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021800 	.word	0x40021800
 8003558:	50000400 	.word	0x50000400
 800355c:	50000800 	.word	0x50000800
 8003560:	50000c00 	.word	0x50000c00

08003564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	429a      	cmp	r2, r3
 8003586:	d11f      	bne.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	0013      	movs	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	189b      	adds	r3, r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4912      	ldr	r1, [pc, #72]	; (80035e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003596:	0018      	movs	r0, r3
 8003598:	f7fc fdb2 	bl	8000100 <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a2:	e008      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e001      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e009      	b.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	401a      	ands	r2, r3
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0ed      	beq.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40007000 	.word	0x40007000
 80035d8:	fffff9ff 	.word	0xfffff9ff
 80035dc:	20000000 	.word	0x20000000
 80035e0:	000f4240 	.word	0x000f4240

080035e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e2f3      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	d100      	bne.n	8003602 <HAL_RCC_OscConfig+0x1e>
 8003600:	e07c      	b.n	80036fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003602:	4bc3      	ldr	r3, [pc, #780]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2238      	movs	r2, #56	; 0x38
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800360c:	4bc0      	ldr	r3, [pc, #768]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2203      	movs	r2, #3
 8003612:	4013      	ands	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b10      	cmp	r3, #16
 800361a:	d102      	bne.n	8003622 <HAL_RCC_OscConfig+0x3e>
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d002      	beq.n	8003628 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4bb9      	ldr	r3, [pc, #740]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	4013      	ands	r3, r2
 8003632:	d062      	beq.n	80036fa <HAL_RCC_OscConfig+0x116>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d15e      	bne.n	80036fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e2ce      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	025b      	lsls	r3, r3, #9
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x78>
 800364c:	4bb0      	ldr	r3, [pc, #704]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4baf      	ldr	r3, [pc, #700]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	0249      	lsls	r1, r1, #9
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e020      	b.n	800369e <HAL_RCC_OscConfig+0xba>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	23a0      	movs	r3, #160	; 0xa0
 8003662:	02db      	lsls	r3, r3, #11
 8003664:	429a      	cmp	r2, r3
 8003666:	d10e      	bne.n	8003686 <HAL_RCC_OscConfig+0xa2>
 8003668:	4ba9      	ldr	r3, [pc, #676]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4ba8      	ldr	r3, [pc, #672]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	02c9      	lsls	r1, r1, #11
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	4ba6      	ldr	r3, [pc, #664]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4ba5      	ldr	r3, [pc, #660]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	0249      	lsls	r1, r1, #9
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0xba>
 8003686:	4ba2      	ldr	r3, [pc, #648]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4ba1      	ldr	r3, [pc, #644]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800368c:	49a1      	ldr	r1, [pc, #644]	; (8003914 <HAL_RCC_OscConfig+0x330>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	4b9f      	ldr	r3, [pc, #636]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b9e      	ldr	r3, [pc, #632]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003698:	499f      	ldr	r1, [pc, #636]	; (8003918 <HAL_RCC_OscConfig+0x334>)
 800369a:	400a      	ands	r2, r1
 800369c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d014      	beq.n	80036d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fb63 	bl	8001d70 <HAL_GetTick>
 80036aa:	0003      	movs	r3, r0
 80036ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe fb5e 	bl	8001d70 <HAL_GetTick>
 80036b4:	0002      	movs	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e28d      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c2:	4b93      	ldr	r3, [pc, #588]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	4013      	ands	r3, r2
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0xcc>
 80036ce:	e015      	b.n	80036fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fb4e 	bl	8001d70 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036da:	f7fe fb49 	bl	8001d70 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e278      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ec:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	4013      	ands	r3, r2
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0xf6>
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2202      	movs	r2, #2
 8003702:	4013      	ands	r3, r2
 8003704:	d100      	bne.n	8003708 <HAL_RCC_OscConfig+0x124>
 8003706:	e099      	b.n	800383c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003708:	4b81      	ldr	r3, [pc, #516]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2238      	movs	r2, #56	; 0x38
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003712:	4b7f      	ldr	r3, [pc, #508]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2203      	movs	r2, #3
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b10      	cmp	r3, #16
 8003720:	d102      	bne.n	8003728 <HAL_RCC_OscConfig+0x144>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d002      	beq.n	800372e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d135      	bne.n	800379a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372e:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4013      	ands	r3, r2
 8003738:	d005      	beq.n	8003746 <HAL_RCC_OscConfig+0x162>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e24b      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a74      	ldr	r2, [pc, #464]	; (800391c <HAL_RCC_OscConfig+0x338>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	4b6e      	ldr	r3, [pc, #440]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003762:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x33c>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003776:	4b66      	ldr	r3, [pc, #408]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0adb      	lsrs	r3, r3, #11
 800377c:	2207      	movs	r2, #7
 800377e:	4013      	ands	r3, r2
 8003780:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x340>)
 8003782:	40da      	lsrs	r2, r3
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x344>)
 8003786:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003788:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_OscConfig+0x348>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0018      	movs	r0, r3
 800378e:	f7fe fa93 	bl	8001cb8 <HAL_InitTick>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d051      	beq.n	800383a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e221      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d030      	beq.n	8003804 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037a2:	4b5b      	ldr	r3, [pc, #364]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5e      	ldr	r2, [pc, #376]	; (8003920 <HAL_RCC_OscConfig+0x33c>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	4b57      	ldr	r3, [pc, #348]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b55      	ldr	r3, [pc, #340]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0049      	lsls	r1, r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fad4 	bl	8001d70 <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe facf 	bl	8001d70 <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1fe      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4013      	ands	r3, r2
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b48      	ldr	r3, [pc, #288]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	; (800391c <HAL_RCC_OscConfig+0x338>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	4b44      	ldr	r3, [pc, #272]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	e01b      	b.n	800383c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003804:	4b42      	ldr	r3, [pc, #264]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b41      	ldr	r3, [pc, #260]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800380a:	4949      	ldr	r1, [pc, #292]	; (8003930 <HAL_RCC_OscConfig+0x34c>)
 800380c:	400a      	ands	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe faae 	bl	8001d70 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fe faa9 	bl	8001d70 <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e1d8      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800382c:	4b38      	ldr	r3, [pc, #224]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4013      	ands	r3, r2
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x236>
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2208      	movs	r2, #8
 8003842:	4013      	ands	r3, r2
 8003844:	d047      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003846:	4b32      	ldr	r3, [pc, #200]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2238      	movs	r2, #56	; 0x38
 800384c:	4013      	ands	r3, r2
 800384e:	2b18      	cmp	r3, #24
 8003850:	d10a      	bne.n	8003868 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	2202      	movs	r2, #2
 8003858:	4013      	ands	r3, r2
 800385a:	d03c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2f2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d138      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e1ba      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d019      	beq.n	80038a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003872:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 8003876:	2101      	movs	r1, #1
 8003878:	430a      	orrs	r2, r1
 800387a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fa78 	bl	8001d70 <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003886:	f7fe fa73 	bl	8001d70 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e1a2      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	d0f1      	beq.n	8003886 <HAL_RCC_OscConfig+0x2a2>
 80038a2:	e018      	b.n	80038d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80038a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	438a      	bics	r2, r1
 80038ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe fa5e 	bl	8001d70 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fe fa59 	bl	8001d70 <HAL_GetTick>
 80038be:	0002      	movs	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e188      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	2202      	movs	r2, #2
 80038d2:	4013      	ands	r3, r2
 80038d4:	d1f1      	bne.n	80038ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2204      	movs	r2, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	d100      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2fe>
 80038e0:	e0c6      	b.n	8003a70 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	231f      	movs	r3, #31
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2238      	movs	r2, #56	; 0x38
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d11e      	bne.n	8003934 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_OscConfig+0x32c>)
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2202      	movs	r2, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	d100      	bne.n	8003902 <HAL_RCC_OscConfig+0x31e>
 8003900:	e0b6      	b.n	8003a70 <HAL_RCC_OscConfig+0x48c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d000      	beq.n	800390c <HAL_RCC_OscConfig+0x328>
 800390a:	e0b1      	b.n	8003a70 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e166      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
 8003910:	40021000 	.word	0x40021000
 8003914:	fffeffff 	.word	0xfffeffff
 8003918:	fffbffff 	.word	0xfffbffff
 800391c:	ffff80ff 	.word	0xffff80ff
 8003920:	ffffc7ff 	.word	0xffffc7ff
 8003924:	00f42400 	.word	0x00f42400
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004
 8003930:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003934:	4bac      	ldr	r3, [pc, #688]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	055b      	lsls	r3, r3, #21
 800393c:	4013      	ands	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_RCC_OscConfig+0x360>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x362>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d011      	beq.n	800396e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4ba7      	ldr	r3, [pc, #668]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 800394c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394e:	4ba6      	ldr	r3, [pc, #664]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0549      	lsls	r1, r1, #21
 8003954:	430a      	orrs	r2, r1
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
 8003958:	4ba3      	ldr	r3, [pc, #652]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 800395a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	055b      	lsls	r3, r3, #21
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003966:	231f      	movs	r3, #31
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396e:	4b9f      	ldr	r3, [pc, #636]	; (8003bec <HAL_RCC_OscConfig+0x608>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d11a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397a:	4b9c      	ldr	r3, [pc, #624]	; (8003bec <HAL_RCC_OscConfig+0x608>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b9b      	ldr	r3, [pc, #620]	; (8003bec <HAL_RCC_OscConfig+0x608>)
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0049      	lsls	r1, r1, #1
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003988:	f7fe f9f2 	bl	8001d70 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fe f9ed 	bl	8001d70 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e11c      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	4b91      	ldr	r3, [pc, #580]	; (8003bec <HAL_RCC_OscConfig+0x608>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3e2>
 80039b8:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039be:	2101      	movs	r1, #1
 80039c0:	430a      	orrs	r2, r1
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x41c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x404>
 80039ce:	4b86      	ldr	r3, [pc, #536]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d2:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039d4:	2104      	movs	r1, #4
 80039d6:	430a      	orrs	r2, r1
 80039d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80039da:	4b83      	ldr	r3, [pc, #524]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039de:	4b82      	ldr	r3, [pc, #520]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039e0:	2101      	movs	r1, #1
 80039e2:	430a      	orrs	r2, r1
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0x41c>
 80039e8:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ec:	4b7e      	ldr	r3, [pc, #504]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	438a      	bics	r2, r1
 80039f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039f4:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 80039fa:	2104      	movs	r1, #4
 80039fc:	438a      	bics	r2, r1
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d014      	beq.n	8003a32 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe f9b2 	bl	8001d70 <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a10:	e009      	b.n	8003a26 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe f9ad 	bl	8001d70 <HAL_GetTick>
 8003a16:	0002      	movs	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	4a74      	ldr	r2, [pc, #464]	; (8003bf0 <HAL_RCC_OscConfig+0x60c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0db      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a26:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x42e>
 8003a30:	e013      	b.n	8003a5a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fe f99d 	bl	8001d70 <HAL_GetTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fe f998 	bl	8001d70 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	4a6a      	ldr	r2, [pc, #424]	; (8003bf0 <HAL_RCC_OscConfig+0x60c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0c6      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a50:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	2202      	movs	r2, #2
 8003a56:	4013      	ands	r3, r2
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a5a:	231f      	movs	r3, #31
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b60      	ldr	r3, [pc, #384]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a68:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a6a:	4962      	ldr	r1, [pc, #392]	; (8003bf4 <HAL_RCC_OscConfig+0x610>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d100      	bne.n	8003a7a <HAL_RCC_OscConfig+0x496>
 8003a78:	e0b0      	b.n	8003bdc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2238      	movs	r2, #56	; 0x38
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d100      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4a4>
 8003a86:	e078      	b.n	8003b7a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d153      	bne.n	8003b38 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b55      	ldr	r3, [pc, #340]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b54      	ldr	r3, [pc, #336]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003a96:	4958      	ldr	r1, [pc, #352]	; (8003bf8 <HAL_RCC_OscConfig+0x614>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe f968 	bl	8001d70 <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe f963 	bl	8001d70 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e092      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	049b      	lsls	r3, r3, #18
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac4:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a4c      	ldr	r2, [pc, #304]	; (8003bfc <HAL_RCC_OscConfig+0x618>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	431a      	orrs	r2, r3
 8003aec:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003aee:	430a      	orrs	r2, r1
 8003af0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0449      	lsls	r1, r1, #17
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	0549      	lsls	r1, r1, #21
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fe f92f 	bl	8001d70 <HAL_GetTick>
 8003b12:	0003      	movs	r3, r0
 8003b14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe f92a 	bl	8001d70 <HAL_GetTick>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e059      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	049b      	lsls	r3, r3, #18
 8003b32:	4013      	ands	r3, r2
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x534>
 8003b36:	e051      	b.n	8003bdc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b3e:	492e      	ldr	r1, [pc, #184]	; (8003bf8 <HAL_RCC_OscConfig+0x614>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe f914 	bl	8001d70 <HAL_GetTick>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fe f90f 	bl	8001d70 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e03e      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	049b      	lsls	r3, r3, #18
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b72:	4923      	ldr	r1, [pc, #140]	; (8003c00 <HAL_RCC_OscConfig+0x61c>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e030      	b.n	8003bdc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e02b      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_RCC_OscConfig+0x604>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	401a      	ands	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d11e      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2270      	movs	r2, #112	; 0x70
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d117      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	23fe      	movs	r3, #254	; 0xfe
 8003bac:	01db      	lsls	r3, r3, #7
 8003bae:	401a      	ands	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	23f8      	movs	r3, #248	; 0xf8
 8003bbe:	039b      	lsls	r3, r3, #14
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	0f5b      	lsrs	r3, r3, #29
 8003bce:	075a      	lsls	r2, r3, #29
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b008      	add	sp, #32
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	00001388 	.word	0x00001388
 8003bf4:	efffffff 	.word	0xefffffff
 8003bf8:	feffffff 	.word	0xfeffffff
 8003bfc:	1fc1808c 	.word	0x1fc1808c
 8003c00:	effefffc 	.word	0xeffefffc

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0e9      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	4013      	ands	r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d91e      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b73      	ldr	r3, [pc, #460]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	4b70      	ldr	r3, [pc, #448]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c38:	f7fe f89a 	bl	8001d70 <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c40:	e009      	b.n	8003c56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c42:	f7fe f895 	bl	8001d70 <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	4a6a      	ldr	r2, [pc, #424]	; (8003df8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0ca      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d015      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2204      	movs	r2, #4
 8003c74:	4013      	ands	r3, r2
 8003c76:	d006      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c78:	4b60      	ldr	r3, [pc, #384]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b5f      	ldr	r3, [pc, #380]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	21e0      	movs	r1, #224	; 0xe0
 8003c80:	01c9      	lsls	r1, r1, #7
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4a5d      	ldr	r2, [pc, #372]	; (8003e00 <HAL_RCC_ClockConfig+0x1fc>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d057      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cac:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	029b      	lsls	r3, r3, #10
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d12b      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e097      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	049b      	lsls	r3, r3, #18
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d11f      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e08b      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cdc:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d113      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e07f      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf4:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e074      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d02:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e06d      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2207      	movs	r2, #7
 8003d16:	4393      	bics	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003d20:	430a      	orrs	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d24:	f7fe f824 	bl	8001d70 <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2c:	e009      	b.n	8003d42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2e:	f7fe f81f 	bl	8001d70 <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e054      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2238      	movs	r2, #56	; 0x38
 8003d48:	401a      	ands	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1ec      	bne.n	8003d2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2207      	movs	r2, #7
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d21e      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2207      	movs	r2, #7
 8003d68:	4393      	bics	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d74:	f7fd fffc 	bl	8001d70 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7e:	f7fd fff7 	bl	8001d70 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e02c      	b.n	8003dec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2207      	movs	r2, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2204      	movs	r2, #4
 8003da6:	4013      	ands	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <HAL_RCC_ClockConfig+0x200>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003dbe:	f000 f829 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dc2:	0001      	movs	r1, r0
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	220f      	movs	r2, #15
 8003dcc:	401a      	ands	r2, r3
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x204>)
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	58d3      	ldr	r3, [r2, r3]
 8003dd4:	221f      	movs	r2, #31
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	000a      	movs	r2, r1
 8003dda:	40da      	lsrs	r2, r3
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_ClockConfig+0x208>)
 8003dde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_ClockConfig+0x20c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fd ff67 	bl	8001cb8 <HAL_InitTick>
 8003dea:	0003      	movs	r3, r0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b004      	add	sp, #16
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40022000 	.word	0x40022000
 8003df8:	00001388 	.word	0x00001388
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	fffff0ff 	.word	0xfffff0ff
 8003e04:	ffff8fff 	.word	0xffff8fff
 8003e08:	08005054 	.word	0x08005054
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	20000004 	.word	0x20000004

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2238      	movs	r2, #56	; 0x38
 8003e20:	4013      	ands	r3, r2
 8003e22:	d10f      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	0adb      	lsrs	r3, r3, #11
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	0013      	movs	r3, r2
 8003e34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	4835      	ldr	r0, [pc, #212]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e3a:	f7fc f961 	bl	8000100 <__udivsi3>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	e05d      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2238      	movs	r2, #56	; 0x38
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d102      	bne.n	8003e56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e054      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2238      	movs	r2, #56	; 0x38
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d138      	bne.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2203      	movs	r2, #3
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	2207      	movs	r2, #7
 8003e74:	4013      	ands	r3, r2
 8003e76:	3301      	adds	r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d10d      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	4824      	ldr	r0, [pc, #144]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e84:	f7fc f93c 	bl	8000100 <__udivsi3>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	227f      	movs	r2, #127	; 0x7f
 8003e94:	4013      	ands	r3, r2
 8003e96:	434b      	muls	r3, r1
 8003e98:	617b      	str	r3, [r7, #20]
        break;
 8003e9a:	e00d      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	481c      	ldr	r0, [pc, #112]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ea0:	f7fc f92e 	bl	8000100 <__udivsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	227f      	movs	r2, #127	; 0x7f
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	434b      	muls	r3, r1
 8003eb4:	617b      	str	r3, [r7, #20]
        break;
 8003eb6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	0f5b      	lsrs	r3, r3, #29
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	6978      	ldr	r0, [r7, #20]
 8003eca:	f7fc f919 	bl	8000100 <__udivsi3>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	e015      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2238      	movs	r2, #56	; 0x38
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d103      	bne.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2238      	movs	r2, #56	; 0x38
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b18      	cmp	r3, #24
 8003ef2:	d103      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ef4:	23fa      	movs	r3, #250	; 0xfa
 8003ef6:	01db      	lsls	r3, r3, #7
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e001      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f00:	693b      	ldr	r3, [r7, #16]
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b006      	add	sp, #24
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	00f42400 	.word	0x00f42400
 8003f14:	007a1200 	.word	0x007a1200

08003f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f20:	2313      	movs	r3, #19
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f28:	2312      	movs	r3, #18
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	029b      	lsls	r3, r3, #10
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f3c:	e0a3      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3e:	2011      	movs	r0, #17
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b7f      	ldr	r3, [pc, #508]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	055b      	lsls	r3, r3, #21
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d110      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4b7c      	ldr	r3, [pc, #496]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f56:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	0549      	lsls	r1, r1, #21
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f60:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	055b      	lsls	r3, r3, #21
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	183b      	adds	r3, r7, r0
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f74:	4b74      	ldr	r3, [pc, #464]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b73      	ldr	r3, [pc, #460]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	0049      	lsls	r1, r1, #1
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fef5 	bl	8001d70 <HAL_GetTick>
 8003f86:	0003      	movs	r3, r0
 8003f88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8c:	f7fd fef0 	bl	8001d70 <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d904      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003f9a:	2313      	movs	r3, #19
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	701a      	strb	r2, [r3, #0]
        break;
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa4:	4b68      	ldr	r3, [pc, #416]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0ed      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003fb0:	2313      	movs	r3, #19
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d154      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fba:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fbe:	23c0      	movs	r3, #192	; 0xc0
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d019      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d014      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	4a5c      	ldr	r2, [pc, #368]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe0:	4b58      	ldr	r3, [pc, #352]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fe4:	4b57      	ldr	r3, [pc, #348]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	0249      	lsls	r1, r1, #9
 8003fea:	430a      	orrs	r2, r1
 8003fec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fee:	4b55      	ldr	r3, [pc, #340]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ff4:	4956      	ldr	r1, [pc, #344]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ffa:	4b52      	ldr	r3, [pc, #328]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2201      	movs	r2, #1
 8004004:	4013      	ands	r3, r2
 8004006:	d016      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd feb2 	bl	8001d70 <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004010:	e00c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fd fead 	bl	8001d70 <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	4a4d      	ldr	r2, [pc, #308]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d904      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004022:	2313      	movs	r3, #19
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	2203      	movs	r2, #3
 8004028:	701a      	strb	r2, [r3, #0]
            break;
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d0ed      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004036:	2313      	movs	r3, #19
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	4b40      	ldr	r3, [pc, #256]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	4a41      	ldr	r2, [pc, #260]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004046:	4013      	ands	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004050:	430a      	orrs	r2, r1
 8004052:	65da      	str	r2, [r3, #92]	; 0x5c
 8004054:	e00c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004056:	2312      	movs	r3, #18
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2213      	movs	r2, #19
 800405c:	18ba      	adds	r2, r7, r2
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e005      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	2312      	movs	r3, #18
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2213      	movs	r2, #19
 800406a:	18ba      	adds	r2, r7, r2
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004070:	2311      	movs	r3, #17
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407a:	4b32      	ldr	r3, [pc, #200]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800407c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407e:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004080:	4935      	ldr	r1, [pc, #212]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004082:	400a      	ands	r2, r1
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004090:	4b2c      	ldr	r3, [pc, #176]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	2203      	movs	r2, #3
 8004096:	4393      	bics	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040a0:	430a      	orrs	r2, r1
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2220      	movs	r2, #32
 80040aa:	4013      	ands	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ae:	4b25      	ldr	r3, [pc, #148]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040be:	430a      	orrs	r2, r1
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	01db      	lsls	r3, r3, #7
 80040ca:	4013      	ands	r3, r2
 80040cc:	d015      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	0899      	lsrs	r1, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	05db      	lsls	r3, r3, #23
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d106      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	0249      	lsls	r1, r1, #9
 80040f6:	430a      	orrs	r2, r1
 80040f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	4013      	ands	r3, r2
 8004104:	d016      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004116:	430a      	orrs	r2, r1
 8004118:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	01db      	lsls	r3, r3, #7
 8004122:	429a      	cmp	r2, r3
 8004124:	d106      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	0249      	lsls	r1, r1, #9
 8004130:	430a      	orrs	r2, r1
 8004132:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004134:	2312      	movs	r3, #18
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	781b      	ldrb	r3, [r3, #0]
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b006      	add	sp, #24
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	40021000 	.word	0x40021000
 8004148:	40007000 	.word	0x40007000
 800414c:	fffffcff 	.word	0xfffffcff
 8004150:	fffeffff 	.word	0xfffeffff
 8004154:	00001388 	.word	0x00001388
 8004158:	efffffff 	.word	0xefffffff
 800415c:	ffffcfff 	.word	0xffffcfff
 8004160:	ffff3fff 	.word	0xffff3fff

08004164 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e04a      	b.n	800420c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	223d      	movs	r2, #61	; 0x3d
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d107      	bne.n	8004192 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223c      	movs	r2, #60	; 0x3c
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f7fd fcb7 	bl	8001b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	223d      	movs	r2, #61	; 0x3d
 8004196:	2102      	movs	r1, #2
 8004198:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	0019      	movs	r1, r3
 80041a4:	0010      	movs	r0, r2
 80041a6:	f000 fa0d 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2248      	movs	r2, #72	; 0x48
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	223e      	movs	r2, #62	; 0x3e
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	223f      	movs	r2, #63	; 0x3f
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2240      	movs	r2, #64	; 0x40
 80041c6:	2101      	movs	r1, #1
 80041c8:	5499      	strb	r1, [r3, r2]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2241      	movs	r2, #65	; 0x41
 80041ce:	2101      	movs	r1, #1
 80041d0:	5499      	strb	r1, [r3, r2]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2242      	movs	r2, #66	; 0x42
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2243      	movs	r2, #67	; 0x43
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2244      	movs	r2, #68	; 0x44
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2245      	movs	r2, #69	; 0x45
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2246      	movs	r2, #70	; 0x46
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2247      	movs	r2, #71	; 0x47
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	223d      	movs	r2, #61	; 0x3d
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d108      	bne.n	8004236 <HAL_TIM_PWM_Start+0x22>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	223e      	movs	r2, #62	; 0x3e
 8004228:	5c9b      	ldrb	r3, [r3, r2]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	1e5a      	subs	r2, r3, #1
 8004230:	4193      	sbcs	r3, r2
 8004232:	b2db      	uxtb	r3, r3
 8004234:	e037      	b.n	80042a6 <HAL_TIM_PWM_Start+0x92>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d108      	bne.n	800424e <HAL_TIM_PWM_Start+0x3a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	223f      	movs	r2, #63	; 0x3f
 8004240:	5c9b      	ldrb	r3, [r3, r2]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	1e5a      	subs	r2, r3, #1
 8004248:	4193      	sbcs	r3, r2
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e02b      	b.n	80042a6 <HAL_TIM_PWM_Start+0x92>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d108      	bne.n	8004266 <HAL_TIM_PWM_Start+0x52>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	5c9b      	ldrb	r3, [r3, r2]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	1e5a      	subs	r2, r3, #1
 8004260:	4193      	sbcs	r3, r2
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e01f      	b.n	80042a6 <HAL_TIM_PWM_Start+0x92>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d108      	bne.n	800427e <HAL_TIM_PWM_Start+0x6a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2241      	movs	r2, #65	; 0x41
 8004270:	5c9b      	ldrb	r3, [r3, r2]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	4193      	sbcs	r3, r2
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e013      	b.n	80042a6 <HAL_TIM_PWM_Start+0x92>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b10      	cmp	r3, #16
 8004282:	d108      	bne.n	8004296 <HAL_TIM_PWM_Start+0x82>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2242      	movs	r2, #66	; 0x42
 8004288:	5c9b      	ldrb	r3, [r3, r2]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	4193      	sbcs	r3, r2
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e007      	b.n	80042a6 <HAL_TIM_PWM_Start+0x92>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2243      	movs	r2, #67	; 0x43
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	1e5a      	subs	r2, r3, #1
 80042a2:	4193      	sbcs	r3, r2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07b      	b.n	80043a6 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xaa>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223e      	movs	r2, #62	; 0x3e
 80042b8:	2102      	movs	r1, #2
 80042ba:	5499      	strb	r1, [r3, r2]
 80042bc:	e023      	b.n	8004306 <HAL_TIM_PWM_Start+0xf2>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xba>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	223f      	movs	r2, #63	; 0x3f
 80042c8:	2102      	movs	r1, #2
 80042ca:	5499      	strb	r1, [r3, r2]
 80042cc:	e01b      	b.n	8004306 <HAL_TIM_PWM_Start+0xf2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0xca>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2240      	movs	r2, #64	; 0x40
 80042d8:	2102      	movs	r1, #2
 80042da:	5499      	strb	r1, [r3, r2]
 80042dc:	e013      	b.n	8004306 <HAL_TIM_PWM_Start+0xf2>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xda>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2241      	movs	r2, #65	; 0x41
 80042e8:	2102      	movs	r1, #2
 80042ea:	5499      	strb	r1, [r3, r2]
 80042ec:	e00b      	b.n	8004306 <HAL_TIM_PWM_Start+0xf2>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xea>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2242      	movs	r2, #66	; 0x42
 80042f8:	2102      	movs	r1, #2
 80042fa:	5499      	strb	r1, [r3, r2]
 80042fc:	e003      	b.n	8004306 <HAL_TIM_PWM_Start+0xf2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2243      	movs	r2, #67	; 0x43
 8004302:	2102      	movs	r1, #2
 8004304:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	0018      	movs	r0, r3
 8004310:	f000 fc60 	bl	8004bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <HAL_TIM_PWM_Start+0x19c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIM_PWM_Start+0x11e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <HAL_TIM_PWM_Start+0x1a0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIM_PWM_Start+0x11e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <HAL_TIM_PWM_Start+0x1a4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <HAL_TIM_PWM_Start+0x122>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_TIM_PWM_Start+0x124>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	0209      	lsls	r1, r1, #8
 800434a:	430a      	orrs	r2, r1
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_TIM_PWM_Start+0x19c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIM_PWM_Start+0x14e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a17      	ldr	r2, [pc, #92]	; (80043bc <HAL_TIM_PWM_Start+0x1a8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d116      	bne.n	8004390 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_TIM_PWM_Start+0x1ac>)
 800436a:	4013      	ands	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b06      	cmp	r3, #6
 8004372:	d016      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18e>
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	025b      	lsls	r3, r3, #9
 800437a:	429a      	cmp	r2, r3
 800437c:	d011      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2101      	movs	r1, #1
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438e:	e008      	b.n	80043a2 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2101      	movs	r1, #1
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e000      	b.n	80043a4 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	0018      	movs	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b004      	add	sp, #16
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800
 80043bc:	40000400 	.word	0x40000400
 80043c0:	00010007 	.word	0x00010007

080043c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2317      	movs	r3, #23
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	223c      	movs	r2, #60	; 0x3c
 80043dc:	5c9b      	ldrb	r3, [r3, r2]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0e5      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	223c      	movs	r2, #60	; 0x3c
 80043ea:	2101      	movs	r1, #1
 80043ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b14      	cmp	r3, #20
 80043f2:	d900      	bls.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80043f4:	e0d1      	b.n	800459a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	009a      	lsls	r2, r3, #2
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80043fc:	18d3      	adds	r3, r2, r3
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0011      	movs	r1, r2
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f946 	bl	800469c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2108      	movs	r1, #8
 800441c:	430a      	orrs	r2, r1
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2104      	movs	r1, #4
 800442c:	438a      	bics	r2, r1
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	619a      	str	r2, [r3, #24]
      break;
 8004442:	e0af      	b.n	80045a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	0011      	movs	r1, r2
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f9a5 	bl	800479c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	0109      	lsls	r1, r1, #4
 8004460:	430a      	orrs	r2, r1
 8004462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4954      	ldr	r1, [pc, #336]	; (80045c0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004470:	400a      	ands	r2, r1
 8004472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
      break;
 8004488:	e08c      	b.n	80045a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0011      	movs	r1, r2
 8004492:	0018      	movs	r0, r3
 8004494:	f000 fa00 	bl	8004898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2108      	movs	r1, #8
 80044a4:	430a      	orrs	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2104      	movs	r1, #4
 80044b4:	438a      	bics	r2, r1
 80044b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69d9      	ldr	r1, [r3, #28]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	61da      	str	r2, [r3, #28]
      break;
 80044ca:	e06b      	b.n	80045a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f000 fa61 	bl	800499c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2180      	movs	r1, #128	; 0x80
 80044e6:	0109      	lsls	r1, r1, #4
 80044e8:	430a      	orrs	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69da      	ldr	r2, [r3, #28]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4932      	ldr	r1, [pc, #200]	; (80045c0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69d9      	ldr	r1, [r3, #28]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	021a      	lsls	r2, r3, #8
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	61da      	str	r2, [r3, #28]
      break;
 8004510:	e048      	b.n	80045a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	0011      	movs	r1, r2
 800451a:	0018      	movs	r0, r3
 800451c:	f000 faa2 	bl	8004a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2108      	movs	r1, #8
 800452c:	430a      	orrs	r2, r1
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2104      	movs	r1, #4
 800453c:	438a      	bics	r2, r1
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004552:	e027      	b.n	80045a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	0011      	movs	r1, r2
 800455c:	0018      	movs	r0, r3
 800455e:	f000 fadb 	bl	8004b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	0109      	lsls	r1, r1, #4
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4910      	ldr	r1, [pc, #64]	; (80045c0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004580:	400a      	ands	r2, r1
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004598:	e004      	b.n	80045a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800459a:	2317      	movs	r3, #23
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
      break;
 80045a2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	223c      	movs	r2, #60	; 0x3c
 80045a8:	2100      	movs	r1, #0
 80045aa:	5499      	strb	r1, [r3, r2]

  return status;
 80045ac:	2317      	movs	r3, #23
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	781b      	ldrb	r3, [r3, #0]
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b006      	add	sp, #24
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	08005094 	.word	0x08005094
 80045c0:	fffffbff 	.word	0xfffffbff

080045c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_Base_SetConfig+0x20>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a2a      	ldr	r2, [pc, #168]	; (8004688 <TIM_Base_SetConfig+0xc4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d108      	bne.n	80045f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2270      	movs	r2, #112	; 0x70
 80045e8:	4393      	bics	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a22      	ldr	r2, [pc, #136]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00f      	beq.n	800461e <TIM_Base_SetConfig+0x5a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a21      	ldr	r2, [pc, #132]	; (8004688 <TIM_Base_SetConfig+0xc4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <TIM_Base_SetConfig+0x5a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <TIM_Base_SetConfig+0xc8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_Base_SetConfig+0x5a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <TIM_Base_SetConfig+0xcc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_Base_SetConfig+0x5a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <TIM_Base_SetConfig+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <TIM_Base_SetConfig+0xd4>)
 8004622:	4013      	ands	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	4393      	bics	r3, r2
 8004636:	001a      	movs	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0xaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <TIM_Base_SetConfig+0xcc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0xaa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <TIM_Base_SetConfig+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d103      	bne.n	8004676 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	615a      	str	r2, [r3, #20]
}
 800467c:	46c0      	nop			; (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b004      	add	sp, #16
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40000400 	.word	0x40000400
 800468c:	40002000 	.word	0x40002000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	fffffcff 	.word	0xfffffcff

0800469c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	2201      	movs	r2, #1
 80046ac:	4393      	bics	r3, r2
 80046ae:	001a      	movs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a2e      	ldr	r2, [pc, #184]	; (8004784 <TIM_OC1_SetConfig+0xe8>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2203      	movs	r2, #3
 80046d2:	4393      	bics	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2202      	movs	r2, #2
 80046e4:	4393      	bics	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a24      	ldr	r2, [pc, #144]	; (8004788 <TIM_OC1_SetConfig+0xec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_OC1_SetConfig+0x6e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a23      	ldr	r2, [pc, #140]	; (800478c <TIM_OC1_SetConfig+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_OC1_SetConfig+0x6e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <TIM_OC1_SetConfig+0xf4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10c      	bne.n	8004724 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2208      	movs	r2, #8
 800470e:	4393      	bics	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2204      	movs	r2, #4
 8004720:	4393      	bics	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <TIM_OC1_SetConfig+0xec>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_OC1_SetConfig+0xa0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a17      	ldr	r2, [pc, #92]	; (800478c <TIM_OC1_SetConfig+0xf0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC1_SetConfig+0xa0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <TIM_OC1_SetConfig+0xf4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d111      	bne.n	8004760 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <TIM_OC1_SetConfig+0xf8>)
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <TIM_OC1_SetConfig+0xfc>)
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b006      	add	sp, #24
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	fffeff8f 	.word	0xfffeff8f
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800
 8004794:	fffffeff 	.word	0xfffffeff
 8004798:	fffffdff 	.word	0xfffffdff

0800479c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	2210      	movs	r2, #16
 80047ac:	4393      	bics	r3, r2
 80047ae:	001a      	movs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a2c      	ldr	r2, [pc, #176]	; (800487c <TIM_OC2_SetConfig+0xe0>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	; (8004880 <TIM_OC2_SetConfig+0xe4>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2220      	movs	r2, #32
 80047e6:	4393      	bics	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <TIM_OC2_SetConfig+0xe8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d10d      	bne.n	800481a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	4393      	bics	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2240      	movs	r2, #64	; 0x40
 8004816:	4393      	bics	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <TIM_OC2_SetConfig+0xe8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_OC2_SetConfig+0x96>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <TIM_OC2_SetConfig+0xec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC2_SetConfig+0x96>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <TIM_OC2_SetConfig+0xf0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d113      	bne.n	800485a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <TIM_OC2_SetConfig+0xf4>)
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <TIM_OC2_SetConfig+0xf8>)
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b006      	add	sp, #24
 800487a:	bd80      	pop	{r7, pc}
 800487c:	feff8fff 	.word	0xfeff8fff
 8004880:	fffffcff 	.word	0xfffffcff
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800
 8004890:	fffffbff 	.word	0xfffffbff
 8004894:	fffff7ff 	.word	0xfffff7ff

08004898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4a33      	ldr	r2, [pc, #204]	; (8004974 <TIM_OC3_SetConfig+0xdc>)
 80048a8:	401a      	ands	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a2d      	ldr	r2, [pc, #180]	; (8004978 <TIM_OC3_SetConfig+0xe0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2203      	movs	r2, #3
 80048cc:	4393      	bics	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <TIM_OC3_SetConfig+0xe4>)
 80048de:	4013      	ands	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a23      	ldr	r2, [pc, #140]	; (8004980 <TIM_OC3_SetConfig+0xe8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10d      	bne.n	8004912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4a22      	ldr	r2, [pc, #136]	; (8004984 <TIM_OC3_SetConfig+0xec>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <TIM_OC3_SetConfig+0xf0>)
 800490e:	4013      	ands	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <TIM_OC3_SetConfig+0xe8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_OC3_SetConfig+0x92>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1b      	ldr	r2, [pc, #108]	; (800498c <TIM_OC3_SetConfig+0xf4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_OC3_SetConfig+0x92>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1a      	ldr	r2, [pc, #104]	; (8004990 <TIM_OC3_SetConfig+0xf8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d113      	bne.n	8004952 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4a19      	ldr	r2, [pc, #100]	; (8004994 <TIM_OC3_SetConfig+0xfc>)
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <TIM_OC3_SetConfig+0x100>)
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	621a      	str	r2, [r3, #32]
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b006      	add	sp, #24
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fffffeff 	.word	0xfffffeff
 8004978:	fffeff8f 	.word	0xfffeff8f
 800497c:	fffffdff 	.word	0xfffffdff
 8004980:	40012c00 	.word	0x40012c00
 8004984:	fffff7ff 	.word	0xfffff7ff
 8004988:	fffffbff 	.word	0xfffffbff
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800
 8004994:	ffffefff 	.word	0xffffefff
 8004998:	ffffdfff 	.word	0xffffdfff

0800499c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <TIM_OC4_SetConfig+0xa8>)
 80049ac:	401a      	ands	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <TIM_OC4_SetConfig+0xac>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <TIM_OC4_SetConfig+0xb0>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <TIM_OC4_SetConfig+0xb4>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	031b      	lsls	r3, r3, #12
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <TIM_OC4_SetConfig+0xb8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_OC4_SetConfig+0x70>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a16      	ldr	r2, [pc, #88]	; (8004a58 <TIM_OC4_SetConfig+0xbc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_OC4_SetConfig+0x70>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <TIM_OC4_SetConfig+0xc0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d109      	bne.n	8004a20 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <TIM_OC4_SetConfig+0xc4>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b006      	add	sp, #24
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	ffffefff 	.word	0xffffefff
 8004a48:	feff8fff 	.word	0xfeff8fff
 8004a4c:	fffffcff 	.word	0xfffffcff
 8004a50:	ffffdfff 	.word	0xffffdfff
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	ffffbfff 	.word	0xffffbfff

08004a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <TIM_OC5_SetConfig+0x9c>)
 8004a74:	401a      	ands	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <TIM_OC5_SetConfig+0xa0>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <TIM_OC5_SetConfig+0xa4>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_OC5_SetConfig+0xa8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_OC5_SetConfig+0x66>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <TIM_OC5_SetConfig+0xac>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_OC5_SetConfig+0x66>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <TIM_OC5_SetConfig+0xb0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d109      	bne.n	8004ade <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <TIM_OC5_SetConfig+0x9c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	fffeffff 	.word	0xfffeffff
 8004b04:	fffeff8f 	.word	0xfffeff8f
 8004b08:	fffdffff 	.word	0xfffdffff
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <TIM_OC6_SetConfig+0xa0>)
 8004b28:	401a      	ands	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a1e      	ldr	r2, [pc, #120]	; (8004bbc <TIM_OC6_SetConfig+0xa4>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4a1a      	ldr	r2, [pc, #104]	; (8004bc0 <TIM_OC6_SetConfig+0xa8>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	051b      	lsls	r3, r3, #20
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <TIM_OC6_SetConfig+0xac>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_OC6_SetConfig+0x68>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <TIM_OC6_SetConfig+0xb0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_OC6_SetConfig+0x68>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <TIM_OC6_SetConfig+0xb4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d109      	bne.n	8004b94 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <TIM_OC6_SetConfig+0xb8>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	029b      	lsls	r3, r3, #10
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b006      	add	sp, #24
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	ffefffff 	.word	0xffefffff
 8004bbc:	feff8fff 	.word	0xfeff8fff
 8004bc0:	ffdfffff 	.word	0xffdfffff
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800
 8004bd0:	fffbffff 	.word	0xfffbffff

08004bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	221f      	movs	r2, #31
 8004be4:	4013      	ands	r3, r2
 8004be6:	2201      	movs	r2, #1
 8004be8:	409a      	lsls	r2, r3
 8004bea:	0013      	movs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	43d2      	mvns	r2, r2
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	211f      	movs	r1, #31
 8004c04:	400b      	ands	r3, r1
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4099      	lsls	r1, r3
 8004c0a:	000b      	movs	r3, r1
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b006      	add	sp, #24
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <HAL_TIMEx_PWMN_Start+0x22>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2244      	movs	r2, #68	; 0x44
 8004c30:	5c9b      	ldrb	r3, [r3, r2]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	4193      	sbcs	r3, r2
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	e01f      	b.n	8004c7e <HAL_TIMEx_PWMN_Start+0x62>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d108      	bne.n	8004c56 <HAL_TIMEx_PWMN_Start+0x3a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2245      	movs	r2, #69	; 0x45
 8004c48:	5c9b      	ldrb	r3, [r3, r2]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	1e5a      	subs	r2, r3, #1
 8004c50:	4193      	sbcs	r3, r2
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e013      	b.n	8004c7e <HAL_TIMEx_PWMN_Start+0x62>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIMEx_PWMN_Start+0x52>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2246      	movs	r2, #70	; 0x46
 8004c60:	5c9b      	ldrb	r3, [r3, r2]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	4193      	sbcs	r3, r2
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e007      	b.n	8004c7e <HAL_TIMEx_PWMN_Start+0x62>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2247      	movs	r2, #71	; 0x47
 8004c72:	5c9b      	ldrb	r3, [r3, r2]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	1e5a      	subs	r2, r3, #1
 8004c7a:	4193      	sbcs	r3, r2
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e057      	b.n	8004d36 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIMEx_PWMN_Start+0x7a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2244      	movs	r2, #68	; 0x44
 8004c90:	2102      	movs	r1, #2
 8004c92:	5499      	strb	r1, [r3, r2]
 8004c94:	e013      	b.n	8004cbe <HAL_TIMEx_PWMN_Start+0xa2>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIMEx_PWMN_Start+0x8a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2245      	movs	r2, #69	; 0x45
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	5499      	strb	r1, [r3, r2]
 8004ca4:	e00b      	b.n	8004cbe <HAL_TIMEx_PWMN_Start+0xa2>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIMEx_PWMN_Start+0x9a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2246      	movs	r2, #70	; 0x46
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	5499      	strb	r1, [r3, r2]
 8004cb4:	e003      	b.n	8004cbe <HAL_TIMEx_PWMN_Start+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2247      	movs	r2, #71	; 0x47
 8004cba:	2102      	movs	r1, #2
 8004cbc:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 f948 	bl	8004f5c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	0209      	lsls	r1, r1, #8
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_TIMEx_PWMN_Start+0x124>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIMEx_PWMN_Start+0xd6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <HAL_TIMEx_PWMN_Start+0x128>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d116      	bne.n	8004d20 <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <HAL_TIMEx_PWMN_Start+0x12c>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d016      	beq.n	8004d32 <HAL_TIMEx_PWMN_Start+0x116>
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	025b      	lsls	r3, r3, #9
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d011      	beq.n	8004d32 <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	e008      	b.n	8004d32 <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e000      	b.n	8004d34 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40000400 	.word	0x40000400
 8004d48:	00010007 	.word	0x00010007

08004d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223c      	movs	r2, #60	; 0x3c
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e04a      	b.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223c      	movs	r2, #60	; 0x3c
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	223d      	movs	r2, #61	; 0x3d
 8004d70:	2102      	movs	r1, #2
 8004d72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2270      	movs	r2, #112	; 0x70
 8004da4:	4393      	bics	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10c      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	4393      	bics	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	223d      	movs	r2, #61	; 0x3d
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	223c      	movs	r2, #60	; 0x3c
 8004df4:	2100      	movs	r1, #0
 8004df6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b004      	add	sp, #16
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	ff0fffff 	.word	0xff0fffff
 8004e0c:	40000400 	.word	0x40000400

08004e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	223c      	movs	r2, #60	; 0x3c
 8004e22:	5c9b      	ldrb	r3, [r3, r2]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e079      	b.n	8004f20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223c      	movs	r2, #60	; 0x3c
 8004e30:	2101      	movs	r1, #1
 8004e32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	4393      	bics	r3, r2
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004e48:	401a      	ands	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a35      	ldr	r2, [pc, #212]	; (8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004e56:	401a      	ands	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004e64:	401a      	ands	r2, r3
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a30      	ldr	r2, [pc, #192]	; (8004f34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004e72:	401a      	ands	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a2e      	ldr	r2, [pc, #184]	; (8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004e80:	401a      	ands	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	; (8004f3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004e8e:	401a      	ands	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004e9c:	401a      	ands	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a25      	ldr	r2, [pc, #148]	; (8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d121      	bne.n	8004f0e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004ece:	401a      	ands	r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	051b      	lsls	r3, r3, #20
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004ede:	401a      	ands	r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004eec:	401a      	ands	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d106      	bne.n	8004f0e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004f04:	401a      	ands	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	223c      	movs	r2, #60	; 0x3c
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b004      	add	sp, #16
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	fffffcff 	.word	0xfffffcff
 8004f2c:	fffffbff 	.word	0xfffffbff
 8004f30:	fffff7ff 	.word	0xfffff7ff
 8004f34:	ffffefff 	.word	0xffffefff
 8004f38:	ffffdfff 	.word	0xffffdfff
 8004f3c:	ffffbfff 	.word	0xffffbfff
 8004f40:	fff0ffff 	.word	0xfff0ffff
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	efffffff 	.word	0xefffffff
 8004f4c:	ff0fffff 	.word	0xff0fffff
 8004f50:	feffffff 	.word	0xfeffffff
 8004f54:	fdffffff 	.word	0xfdffffff
 8004f58:	dfffffff 	.word	0xdfffffff

08004f5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	221f      	movs	r2, #31
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2204      	movs	r2, #4
 8004f70:	409a      	lsls	r2, r3
 8004f72:	0013      	movs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	43d2      	mvns	r2, r2
 8004f7e:	401a      	ands	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1a      	ldr	r2, [r3, #32]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	211f      	movs	r1, #31
 8004f8c:	400b      	ands	r3, r1
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4099      	lsls	r1, r3
 8004f92:	000b      	movs	r3, r1
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b006      	add	sp, #24
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <__libc_init_array>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	4d0c      	ldr	r5, [pc, #48]	; (8004fdc <__libc_init_array+0x38>)
 8004faa:	4c0d      	ldr	r4, [pc, #52]	; (8004fe0 <__libc_init_array+0x3c>)
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	42a6      	cmp	r6, r4
 8004fb2:	d109      	bne.n	8004fc8 <__libc_init_array+0x24>
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	f000 f821 	bl	8004ffc <_init>
 8004fba:	4d0a      	ldr	r5, [pc, #40]	; (8004fe4 <__libc_init_array+0x40>)
 8004fbc:	4c0a      	ldr	r4, [pc, #40]	; (8004fe8 <__libc_init_array+0x44>)
 8004fbe:	1b64      	subs	r4, r4, r5
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	42a6      	cmp	r6, r4
 8004fc4:	d105      	bne.n	8004fd2 <__libc_init_array+0x2e>
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	00b3      	lsls	r3, r6, #2
 8004fca:	58eb      	ldr	r3, [r5, r3]
 8004fcc:	4798      	blx	r3
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7ee      	b.n	8004fb0 <__libc_init_array+0xc>
 8004fd2:	00b3      	lsls	r3, r6, #2
 8004fd4:	58eb      	ldr	r3, [r5, r3]
 8004fd6:	4798      	blx	r3
 8004fd8:	3601      	adds	r6, #1
 8004fda:	e7f2      	b.n	8004fc2 <__libc_init_array+0x1e>
 8004fdc:	080050e8 	.word	0x080050e8
 8004fe0:	080050e8 	.word	0x080050e8
 8004fe4:	080050e8 	.word	0x080050e8
 8004fe8:	080050ec 	.word	0x080050ec

08004fec <memset>:
 8004fec:	0003      	movs	r3, r0
 8004fee:	1882      	adds	r2, r0, r2
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	7019      	strb	r1, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
