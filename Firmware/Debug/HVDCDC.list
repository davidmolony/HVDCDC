
HVDCDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a5c  08003a5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a5c  08003a5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003a70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003a70  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126dd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d26  00000000  00000000  00032711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001598d  00000000  00000000  00037730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014643  00000000  00000000  0004d0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7ee  00000000  00000000  00061700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebeee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002094  00000000  00000000  000ebf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000cdbe  00000000  00000000  000edfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003970 	.word	0x08003970

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003970 	.word	0x08003970

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_d2uiz>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	2200      	movs	r2, #0
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <__aeabi_d2uiz+0x38>)
 800021e:	0004      	movs	r4, r0
 8000220:	000d      	movs	r5, r1
 8000222:	f000 feaf 	bl	8000f84 <__aeabi_dcmpge>
 8000226:	2800      	cmp	r0, #0
 8000228:	d104      	bne.n	8000234 <__aeabi_d2uiz+0x1c>
 800022a:	0020      	movs	r0, r4
 800022c:	0029      	movs	r1, r5
 800022e:	f000 fe0f 	bl	8000e50 <__aeabi_d2iz>
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <__aeabi_d2uiz+0x38>)
 8000236:	2200      	movs	r2, #0
 8000238:	0020      	movs	r0, r4
 800023a:	0029      	movs	r1, r5
 800023c:	f000 fa76 	bl	800072c <__aeabi_dsub>
 8000240:	f000 fe06 	bl	8000e50 <__aeabi_d2iz>
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	061b      	lsls	r3, r3, #24
 8000248:	469c      	mov	ip, r3
 800024a:	4460      	add	r0, ip
 800024c:	e7f1      	b.n	8000232 <__aeabi_d2uiz+0x1a>
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	41e00000 	.word	0x41e00000

08000254 <__aeabi_dmul>:
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	4657      	mov	r7, sl
 8000258:	464e      	mov	r6, r9
 800025a:	4645      	mov	r5, r8
 800025c:	46de      	mov	lr, fp
 800025e:	b5e0      	push	{r5, r6, r7, lr}
 8000260:	4698      	mov	r8, r3
 8000262:	030c      	lsls	r4, r1, #12
 8000264:	004b      	lsls	r3, r1, #1
 8000266:	0006      	movs	r6, r0
 8000268:	4692      	mov	sl, r2
 800026a:	b087      	sub	sp, #28
 800026c:	0b24      	lsrs	r4, r4, #12
 800026e:	0d5b      	lsrs	r3, r3, #21
 8000270:	0fcf      	lsrs	r7, r1, #31
 8000272:	2b00      	cmp	r3, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_dmul+0x24>
 8000276:	e15c      	b.n	8000532 <__aeabi_dmul+0x2de>
 8000278:	4ad9      	ldr	r2, [pc, #868]	; (80005e0 <__aeabi_dmul+0x38c>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d100      	bne.n	8000280 <__aeabi_dmul+0x2c>
 800027e:	e175      	b.n	800056c <__aeabi_dmul+0x318>
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	00e4      	lsls	r4, r4, #3
 8000284:	4314      	orrs	r4, r2
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	0412      	lsls	r2, r2, #16
 800028a:	4314      	orrs	r4, r2
 800028c:	4ad5      	ldr	r2, [pc, #852]	; (80005e4 <__aeabi_dmul+0x390>)
 800028e:	00c5      	lsls	r5, r0, #3
 8000290:	4694      	mov	ip, r2
 8000292:	4463      	add	r3, ip
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2300      	movs	r3, #0
 8000298:	4699      	mov	r9, r3
 800029a:	469b      	mov	fp, r3
 800029c:	4643      	mov	r3, r8
 800029e:	4642      	mov	r2, r8
 80002a0:	031e      	lsls	r6, r3, #12
 80002a2:	0fd2      	lsrs	r2, r2, #31
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	4650      	mov	r0, sl
 80002a8:	4690      	mov	r8, r2
 80002aa:	0b36      	lsrs	r6, r6, #12
 80002ac:	0d5b      	lsrs	r3, r3, #21
 80002ae:	d100      	bne.n	80002b2 <__aeabi_dmul+0x5e>
 80002b0:	e120      	b.n	80004f4 <__aeabi_dmul+0x2a0>
 80002b2:	4acb      	ldr	r2, [pc, #812]	; (80005e0 <__aeabi_dmul+0x38c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d100      	bne.n	80002ba <__aeabi_dmul+0x66>
 80002b8:	e162      	b.n	8000580 <__aeabi_dmul+0x32c>
 80002ba:	49ca      	ldr	r1, [pc, #808]	; (80005e4 <__aeabi_dmul+0x390>)
 80002bc:	0f42      	lsrs	r2, r0, #29
 80002be:	468c      	mov	ip, r1
 80002c0:	9900      	ldr	r1, [sp, #0]
 80002c2:	4463      	add	r3, ip
 80002c4:	00f6      	lsls	r6, r6, #3
 80002c6:	468c      	mov	ip, r1
 80002c8:	4316      	orrs	r6, r2
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	449c      	add	ip, r3
 80002ce:	0412      	lsls	r2, r2, #16
 80002d0:	4663      	mov	r3, ip
 80002d2:	4316      	orrs	r6, r2
 80002d4:	00c2      	lsls	r2, r0, #3
 80002d6:	2000      	movs	r0, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	9900      	ldr	r1, [sp, #0]
 80002dc:	4643      	mov	r3, r8
 80002de:	3101      	adds	r1, #1
 80002e0:	468c      	mov	ip, r1
 80002e2:	4649      	mov	r1, r9
 80002e4:	407b      	eors	r3, r7
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	290f      	cmp	r1, #15
 80002ea:	d826      	bhi.n	800033a <__aeabi_dmul+0xe6>
 80002ec:	4bbe      	ldr	r3, [pc, #760]	; (80005e8 <__aeabi_dmul+0x394>)
 80002ee:	0089      	lsls	r1, r1, #2
 80002f0:	5859      	ldr	r1, [r3, r1]
 80002f2:	468f      	mov	pc, r1
 80002f4:	4643      	mov	r3, r8
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	0034      	movs	r4, r6
 80002fa:	0015      	movs	r5, r2
 80002fc:	4683      	mov	fp, r0
 80002fe:	465b      	mov	r3, fp
 8000300:	2b02      	cmp	r3, #2
 8000302:	d016      	beq.n	8000332 <__aeabi_dmul+0xde>
 8000304:	2b03      	cmp	r3, #3
 8000306:	d100      	bne.n	800030a <__aeabi_dmul+0xb6>
 8000308:	e203      	b.n	8000712 <__aeabi_dmul+0x4be>
 800030a:	2b01      	cmp	r3, #1
 800030c:	d000      	beq.n	8000310 <__aeabi_dmul+0xbc>
 800030e:	e0cd      	b.n	80004ac <__aeabi_dmul+0x258>
 8000310:	2200      	movs	r2, #0
 8000312:	2400      	movs	r4, #0
 8000314:	2500      	movs	r5, #0
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	0512      	lsls	r2, r2, #20
 800031a:	4322      	orrs	r2, r4
 800031c:	07db      	lsls	r3, r3, #31
 800031e:	431a      	orrs	r2, r3
 8000320:	0028      	movs	r0, r5
 8000322:	0011      	movs	r1, r2
 8000324:	b007      	add	sp, #28
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	46bb      	mov	fp, r7
 800032a:	46b2      	mov	sl, r6
 800032c:	46a9      	mov	r9, r5
 800032e:	46a0      	mov	r8, r4
 8000330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000332:	2400      	movs	r4, #0
 8000334:	2500      	movs	r5, #0
 8000336:	4aaa      	ldr	r2, [pc, #680]	; (80005e0 <__aeabi_dmul+0x38c>)
 8000338:	e7ed      	b.n	8000316 <__aeabi_dmul+0xc2>
 800033a:	0c28      	lsrs	r0, r5, #16
 800033c:	042d      	lsls	r5, r5, #16
 800033e:	0c2d      	lsrs	r5, r5, #16
 8000340:	002b      	movs	r3, r5
 8000342:	0c11      	lsrs	r1, r2, #16
 8000344:	0412      	lsls	r2, r2, #16
 8000346:	0c12      	lsrs	r2, r2, #16
 8000348:	4353      	muls	r3, r2
 800034a:	4698      	mov	r8, r3
 800034c:	0013      	movs	r3, r2
 800034e:	002f      	movs	r7, r5
 8000350:	4343      	muls	r3, r0
 8000352:	4699      	mov	r9, r3
 8000354:	434f      	muls	r7, r1
 8000356:	444f      	add	r7, r9
 8000358:	46bb      	mov	fp, r7
 800035a:	4647      	mov	r7, r8
 800035c:	000b      	movs	r3, r1
 800035e:	0c3f      	lsrs	r7, r7, #16
 8000360:	46ba      	mov	sl, r7
 8000362:	4343      	muls	r3, r0
 8000364:	44da      	add	sl, fp
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	45d1      	cmp	r9, sl
 800036a:	d904      	bls.n	8000376 <__aeabi_dmul+0x122>
 800036c:	2780      	movs	r7, #128	; 0x80
 800036e:	027f      	lsls	r7, r7, #9
 8000370:	46b9      	mov	r9, r7
 8000372:	444b      	add	r3, r9
 8000374:	9302      	str	r3, [sp, #8]
 8000376:	4653      	mov	r3, sl
 8000378:	0c1b      	lsrs	r3, r3, #16
 800037a:	469b      	mov	fp, r3
 800037c:	4653      	mov	r3, sl
 800037e:	041f      	lsls	r7, r3, #16
 8000380:	4643      	mov	r3, r8
 8000382:	041b      	lsls	r3, r3, #16
 8000384:	0c1b      	lsrs	r3, r3, #16
 8000386:	4698      	mov	r8, r3
 8000388:	003b      	movs	r3, r7
 800038a:	4443      	add	r3, r8
 800038c:	9304      	str	r3, [sp, #16]
 800038e:	0c33      	lsrs	r3, r6, #16
 8000390:	0436      	lsls	r6, r6, #16
 8000392:	0c36      	lsrs	r6, r6, #16
 8000394:	4698      	mov	r8, r3
 8000396:	0033      	movs	r3, r6
 8000398:	4343      	muls	r3, r0
 800039a:	4699      	mov	r9, r3
 800039c:	4643      	mov	r3, r8
 800039e:	4343      	muls	r3, r0
 80003a0:	002f      	movs	r7, r5
 80003a2:	469a      	mov	sl, r3
 80003a4:	4643      	mov	r3, r8
 80003a6:	4377      	muls	r7, r6
 80003a8:	435d      	muls	r5, r3
 80003aa:	0c38      	lsrs	r0, r7, #16
 80003ac:	444d      	add	r5, r9
 80003ae:	1945      	adds	r5, r0, r5
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d903      	bls.n	80003bc <__aeabi_dmul+0x168>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	025b      	lsls	r3, r3, #9
 80003b8:	4699      	mov	r9, r3
 80003ba:	44ca      	add	sl, r9
 80003bc:	043f      	lsls	r7, r7, #16
 80003be:	0c28      	lsrs	r0, r5, #16
 80003c0:	0c3f      	lsrs	r7, r7, #16
 80003c2:	042d      	lsls	r5, r5, #16
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	0c27      	lsrs	r7, r4, #16
 80003c8:	0424      	lsls	r4, r4, #16
 80003ca:	0c24      	lsrs	r4, r4, #16
 80003cc:	0003      	movs	r3, r0
 80003ce:	0020      	movs	r0, r4
 80003d0:	4350      	muls	r0, r2
 80003d2:	437a      	muls	r2, r7
 80003d4:	4691      	mov	r9, r2
 80003d6:	003a      	movs	r2, r7
 80003d8:	4453      	add	r3, sl
 80003da:	9305      	str	r3, [sp, #20]
 80003dc:	0c03      	lsrs	r3, r0, #16
 80003de:	469a      	mov	sl, r3
 80003e0:	434a      	muls	r2, r1
 80003e2:	4361      	muls	r1, r4
 80003e4:	4449      	add	r1, r9
 80003e6:	4451      	add	r1, sl
 80003e8:	44ab      	add	fp, r5
 80003ea:	4589      	cmp	r9, r1
 80003ec:	d903      	bls.n	80003f6 <__aeabi_dmul+0x1a2>
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	025b      	lsls	r3, r3, #9
 80003f2:	4699      	mov	r9, r3
 80003f4:	444a      	add	r2, r9
 80003f6:	0400      	lsls	r0, r0, #16
 80003f8:	0c0b      	lsrs	r3, r1, #16
 80003fa:	0c00      	lsrs	r0, r0, #16
 80003fc:	0409      	lsls	r1, r1, #16
 80003fe:	1809      	adds	r1, r1, r0
 8000400:	0020      	movs	r0, r4
 8000402:	4699      	mov	r9, r3
 8000404:	4643      	mov	r3, r8
 8000406:	4370      	muls	r0, r6
 8000408:	435c      	muls	r4, r3
 800040a:	437e      	muls	r6, r7
 800040c:	435f      	muls	r7, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	4698      	mov	r8, r3
 8000412:	19a4      	adds	r4, r4, r6
 8000414:	4444      	add	r4, r8
 8000416:	444a      	add	r2, r9
 8000418:	9703      	str	r7, [sp, #12]
 800041a:	42a6      	cmp	r6, r4
 800041c:	d904      	bls.n	8000428 <__aeabi_dmul+0x1d4>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	025b      	lsls	r3, r3, #9
 8000422:	4698      	mov	r8, r3
 8000424:	4447      	add	r7, r8
 8000426:	9703      	str	r7, [sp, #12]
 8000428:	0423      	lsls	r3, r4, #16
 800042a:	9e02      	ldr	r6, [sp, #8]
 800042c:	469a      	mov	sl, r3
 800042e:	9b05      	ldr	r3, [sp, #20]
 8000430:	445e      	add	r6, fp
 8000432:	4698      	mov	r8, r3
 8000434:	42ae      	cmp	r6, r5
 8000436:	41ad      	sbcs	r5, r5
 8000438:	1876      	adds	r6, r6, r1
 800043a:	428e      	cmp	r6, r1
 800043c:	4189      	sbcs	r1, r1
 800043e:	0400      	lsls	r0, r0, #16
 8000440:	0c00      	lsrs	r0, r0, #16
 8000442:	4450      	add	r0, sl
 8000444:	4440      	add	r0, r8
 8000446:	426d      	negs	r5, r5
 8000448:	1947      	adds	r7, r0, r5
 800044a:	46b8      	mov	r8, r7
 800044c:	4693      	mov	fp, r2
 800044e:	4249      	negs	r1, r1
 8000450:	4689      	mov	r9, r1
 8000452:	44c3      	add	fp, r8
 8000454:	44d9      	add	r9, fp
 8000456:	4298      	cmp	r0, r3
 8000458:	4180      	sbcs	r0, r0
 800045a:	45a8      	cmp	r8, r5
 800045c:	41ad      	sbcs	r5, r5
 800045e:	4593      	cmp	fp, r2
 8000460:	4192      	sbcs	r2, r2
 8000462:	4589      	cmp	r9, r1
 8000464:	4189      	sbcs	r1, r1
 8000466:	426d      	negs	r5, r5
 8000468:	4240      	negs	r0, r0
 800046a:	4328      	orrs	r0, r5
 800046c:	0c24      	lsrs	r4, r4, #16
 800046e:	4252      	negs	r2, r2
 8000470:	4249      	negs	r1, r1
 8000472:	430a      	orrs	r2, r1
 8000474:	9b03      	ldr	r3, [sp, #12]
 8000476:	1900      	adds	r0, r0, r4
 8000478:	1880      	adds	r0, r0, r2
 800047a:	18c7      	adds	r7, r0, r3
 800047c:	464b      	mov	r3, r9
 800047e:	0ddc      	lsrs	r4, r3, #23
 8000480:	9b04      	ldr	r3, [sp, #16]
 8000482:	0275      	lsls	r5, r6, #9
 8000484:	431d      	orrs	r5, r3
 8000486:	1e6a      	subs	r2, r5, #1
 8000488:	4195      	sbcs	r5, r2
 800048a:	464b      	mov	r3, r9
 800048c:	0df6      	lsrs	r6, r6, #23
 800048e:	027f      	lsls	r7, r7, #9
 8000490:	4335      	orrs	r5, r6
 8000492:	025a      	lsls	r2, r3, #9
 8000494:	433c      	orrs	r4, r7
 8000496:	4315      	orrs	r5, r2
 8000498:	01fb      	lsls	r3, r7, #7
 800049a:	d400      	bmi.n	800049e <__aeabi_dmul+0x24a>
 800049c:	e11c      	b.n	80006d8 <__aeabi_dmul+0x484>
 800049e:	2101      	movs	r1, #1
 80004a0:	086a      	lsrs	r2, r5, #1
 80004a2:	400d      	ands	r5, r1
 80004a4:	4315      	orrs	r5, r2
 80004a6:	07e2      	lsls	r2, r4, #31
 80004a8:	4315      	orrs	r5, r2
 80004aa:	0864      	lsrs	r4, r4, #1
 80004ac:	494f      	ldr	r1, [pc, #316]	; (80005ec <__aeabi_dmul+0x398>)
 80004ae:	4461      	add	r1, ip
 80004b0:	2900      	cmp	r1, #0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_dmul+0x262>
 80004b4:	e0b0      	b.n	8000618 <__aeabi_dmul+0x3c4>
 80004b6:	076b      	lsls	r3, r5, #29
 80004b8:	d009      	beq.n	80004ce <__aeabi_dmul+0x27a>
 80004ba:	220f      	movs	r2, #15
 80004bc:	402a      	ands	r2, r5
 80004be:	2a04      	cmp	r2, #4
 80004c0:	d005      	beq.n	80004ce <__aeabi_dmul+0x27a>
 80004c2:	1d2a      	adds	r2, r5, #4
 80004c4:	42aa      	cmp	r2, r5
 80004c6:	41ad      	sbcs	r5, r5
 80004c8:	426d      	negs	r5, r5
 80004ca:	1964      	adds	r4, r4, r5
 80004cc:	0015      	movs	r5, r2
 80004ce:	01e3      	lsls	r3, r4, #7
 80004d0:	d504      	bpl.n	80004dc <__aeabi_dmul+0x288>
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	4a46      	ldr	r2, [pc, #280]	; (80005f0 <__aeabi_dmul+0x39c>)
 80004d6:	00c9      	lsls	r1, r1, #3
 80004d8:	4014      	ands	r4, r2
 80004da:	4461      	add	r1, ip
 80004dc:	4a45      	ldr	r2, [pc, #276]	; (80005f4 <__aeabi_dmul+0x3a0>)
 80004de:	4291      	cmp	r1, r2
 80004e0:	dd00      	ble.n	80004e4 <__aeabi_dmul+0x290>
 80004e2:	e726      	b.n	8000332 <__aeabi_dmul+0xde>
 80004e4:	0762      	lsls	r2, r4, #29
 80004e6:	08ed      	lsrs	r5, r5, #3
 80004e8:	0264      	lsls	r4, r4, #9
 80004ea:	0549      	lsls	r1, r1, #21
 80004ec:	4315      	orrs	r5, r2
 80004ee:	0b24      	lsrs	r4, r4, #12
 80004f0:	0d4a      	lsrs	r2, r1, #21
 80004f2:	e710      	b.n	8000316 <__aeabi_dmul+0xc2>
 80004f4:	4652      	mov	r2, sl
 80004f6:	4332      	orrs	r2, r6
 80004f8:	d100      	bne.n	80004fc <__aeabi_dmul+0x2a8>
 80004fa:	e07f      	b.n	80005fc <__aeabi_dmul+0x3a8>
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_dmul+0x2ae>
 8000500:	e0dc      	b.n	80006bc <__aeabi_dmul+0x468>
 8000502:	0030      	movs	r0, r6
 8000504:	f000 fd48 	bl	8000f98 <__clzsi2>
 8000508:	0002      	movs	r2, r0
 800050a:	3a0b      	subs	r2, #11
 800050c:	231d      	movs	r3, #29
 800050e:	0001      	movs	r1, r0
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	4652      	mov	r2, sl
 8000514:	3908      	subs	r1, #8
 8000516:	40da      	lsrs	r2, r3
 8000518:	408e      	lsls	r6, r1
 800051a:	4316      	orrs	r6, r2
 800051c:	4652      	mov	r2, sl
 800051e:	408a      	lsls	r2, r1
 8000520:	9b00      	ldr	r3, [sp, #0]
 8000522:	4935      	ldr	r1, [pc, #212]	; (80005f8 <__aeabi_dmul+0x3a4>)
 8000524:	1a18      	subs	r0, r3, r0
 8000526:	0003      	movs	r3, r0
 8000528:	468c      	mov	ip, r1
 800052a:	4463      	add	r3, ip
 800052c:	2000      	movs	r0, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	e6d3      	b.n	80002da <__aeabi_dmul+0x86>
 8000532:	0025      	movs	r5, r4
 8000534:	4305      	orrs	r5, r0
 8000536:	d04a      	beq.n	80005ce <__aeabi_dmul+0x37a>
 8000538:	2c00      	cmp	r4, #0
 800053a:	d100      	bne.n	800053e <__aeabi_dmul+0x2ea>
 800053c:	e0b0      	b.n	80006a0 <__aeabi_dmul+0x44c>
 800053e:	0020      	movs	r0, r4
 8000540:	f000 fd2a 	bl	8000f98 <__clzsi2>
 8000544:	0001      	movs	r1, r0
 8000546:	0002      	movs	r2, r0
 8000548:	390b      	subs	r1, #11
 800054a:	231d      	movs	r3, #29
 800054c:	0010      	movs	r0, r2
 800054e:	1a5b      	subs	r3, r3, r1
 8000550:	0031      	movs	r1, r6
 8000552:	0035      	movs	r5, r6
 8000554:	3808      	subs	r0, #8
 8000556:	4084      	lsls	r4, r0
 8000558:	40d9      	lsrs	r1, r3
 800055a:	4085      	lsls	r5, r0
 800055c:	430c      	orrs	r4, r1
 800055e:	4826      	ldr	r0, [pc, #152]	; (80005f8 <__aeabi_dmul+0x3a4>)
 8000560:	1a83      	subs	r3, r0, r2
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	4699      	mov	r9, r3
 8000568:	469b      	mov	fp, r3
 800056a:	e697      	b.n	800029c <__aeabi_dmul+0x48>
 800056c:	0005      	movs	r5, r0
 800056e:	4325      	orrs	r5, r4
 8000570:	d126      	bne.n	80005c0 <__aeabi_dmul+0x36c>
 8000572:	2208      	movs	r2, #8
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2302      	movs	r3, #2
 8000578:	2400      	movs	r4, #0
 800057a:	4691      	mov	r9, r2
 800057c:	469b      	mov	fp, r3
 800057e:	e68d      	b.n	800029c <__aeabi_dmul+0x48>
 8000580:	4652      	mov	r2, sl
 8000582:	9b00      	ldr	r3, [sp, #0]
 8000584:	4332      	orrs	r2, r6
 8000586:	d110      	bne.n	80005aa <__aeabi_dmul+0x356>
 8000588:	4915      	ldr	r1, [pc, #84]	; (80005e0 <__aeabi_dmul+0x38c>)
 800058a:	2600      	movs	r6, #0
 800058c:	468c      	mov	ip, r1
 800058e:	4463      	add	r3, ip
 8000590:	4649      	mov	r1, r9
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2302      	movs	r3, #2
 8000596:	4319      	orrs	r1, r3
 8000598:	4689      	mov	r9, r1
 800059a:	2002      	movs	r0, #2
 800059c:	e69d      	b.n	80002da <__aeabi_dmul+0x86>
 800059e:	465b      	mov	r3, fp
 80005a0:	9701      	str	r7, [sp, #4]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d000      	beq.n	80005a8 <__aeabi_dmul+0x354>
 80005a6:	e6ad      	b.n	8000304 <__aeabi_dmul+0xb0>
 80005a8:	e6c3      	b.n	8000332 <__aeabi_dmul+0xde>
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <__aeabi_dmul+0x38c>)
 80005ac:	2003      	movs	r0, #3
 80005ae:	4694      	mov	ip, r2
 80005b0:	4463      	add	r3, ip
 80005b2:	464a      	mov	r2, r9
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2303      	movs	r3, #3
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4691      	mov	r9, r2
 80005bc:	4652      	mov	r2, sl
 80005be:	e68c      	b.n	80002da <__aeabi_dmul+0x86>
 80005c0:	220c      	movs	r2, #12
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2303      	movs	r3, #3
 80005c6:	0005      	movs	r5, r0
 80005c8:	4691      	mov	r9, r2
 80005ca:	469b      	mov	fp, r3
 80005cc:	e666      	b.n	800029c <__aeabi_dmul+0x48>
 80005ce:	2304      	movs	r3, #4
 80005d0:	4699      	mov	r9, r3
 80005d2:	2300      	movs	r3, #0
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	2400      	movs	r4, #0
 80005da:	469b      	mov	fp, r3
 80005dc:	e65e      	b.n	800029c <__aeabi_dmul+0x48>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	000007ff 	.word	0x000007ff
 80005e4:	fffffc01 	.word	0xfffffc01
 80005e8:	08003988 	.word	0x08003988
 80005ec:	000003ff 	.word	0x000003ff
 80005f0:	feffffff 	.word	0xfeffffff
 80005f4:	000007fe 	.word	0x000007fe
 80005f8:	fffffc0d 	.word	0xfffffc0d
 80005fc:	4649      	mov	r1, r9
 80005fe:	2301      	movs	r3, #1
 8000600:	4319      	orrs	r1, r3
 8000602:	4689      	mov	r9, r1
 8000604:	2600      	movs	r6, #0
 8000606:	2001      	movs	r0, #1
 8000608:	e667      	b.n	80002da <__aeabi_dmul+0x86>
 800060a:	2300      	movs	r3, #0
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	2500      	movs	r5, #0
 8000610:	4a43      	ldr	r2, [pc, #268]	; (8000720 <__aeabi_dmul+0x4cc>)
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	0324      	lsls	r4, r4, #12
 8000616:	e67e      	b.n	8000316 <__aeabi_dmul+0xc2>
 8000618:	2001      	movs	r0, #1
 800061a:	1a40      	subs	r0, r0, r1
 800061c:	2838      	cmp	r0, #56	; 0x38
 800061e:	dd00      	ble.n	8000622 <__aeabi_dmul+0x3ce>
 8000620:	e676      	b.n	8000310 <__aeabi_dmul+0xbc>
 8000622:	281f      	cmp	r0, #31
 8000624:	dd5b      	ble.n	80006de <__aeabi_dmul+0x48a>
 8000626:	221f      	movs	r2, #31
 8000628:	0023      	movs	r3, r4
 800062a:	4252      	negs	r2, r2
 800062c:	1a51      	subs	r1, r2, r1
 800062e:	40cb      	lsrs	r3, r1
 8000630:	0019      	movs	r1, r3
 8000632:	2820      	cmp	r0, #32
 8000634:	d003      	beq.n	800063e <__aeabi_dmul+0x3ea>
 8000636:	4a3b      	ldr	r2, [pc, #236]	; (8000724 <__aeabi_dmul+0x4d0>)
 8000638:	4462      	add	r2, ip
 800063a:	4094      	lsls	r4, r2
 800063c:	4325      	orrs	r5, r4
 800063e:	1e6a      	subs	r2, r5, #1
 8000640:	4195      	sbcs	r5, r2
 8000642:	002a      	movs	r2, r5
 8000644:	430a      	orrs	r2, r1
 8000646:	2107      	movs	r1, #7
 8000648:	000d      	movs	r5, r1
 800064a:	2400      	movs	r4, #0
 800064c:	4015      	ands	r5, r2
 800064e:	4211      	tst	r1, r2
 8000650:	d05b      	beq.n	800070a <__aeabi_dmul+0x4b6>
 8000652:	210f      	movs	r1, #15
 8000654:	2400      	movs	r4, #0
 8000656:	4011      	ands	r1, r2
 8000658:	2904      	cmp	r1, #4
 800065a:	d053      	beq.n	8000704 <__aeabi_dmul+0x4b0>
 800065c:	1d11      	adds	r1, r2, #4
 800065e:	4291      	cmp	r1, r2
 8000660:	4192      	sbcs	r2, r2
 8000662:	4252      	negs	r2, r2
 8000664:	18a4      	adds	r4, r4, r2
 8000666:	000a      	movs	r2, r1
 8000668:	0223      	lsls	r3, r4, #8
 800066a:	d54b      	bpl.n	8000704 <__aeabi_dmul+0x4b0>
 800066c:	2201      	movs	r2, #1
 800066e:	2400      	movs	r4, #0
 8000670:	2500      	movs	r5, #0
 8000672:	e650      	b.n	8000316 <__aeabi_dmul+0xc2>
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	421c      	tst	r4, r3
 800067a:	d009      	beq.n	8000690 <__aeabi_dmul+0x43c>
 800067c:	421e      	tst	r6, r3
 800067e:	d107      	bne.n	8000690 <__aeabi_dmul+0x43c>
 8000680:	4333      	orrs	r3, r6
 8000682:	031c      	lsls	r4, r3, #12
 8000684:	4643      	mov	r3, r8
 8000686:	0015      	movs	r5, r2
 8000688:	0b24      	lsrs	r4, r4, #12
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <__aeabi_dmul+0x4cc>)
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	e642      	b.n	8000316 <__aeabi_dmul+0xc2>
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0312      	lsls	r2, r2, #12
 8000694:	4314      	orrs	r4, r2
 8000696:	0324      	lsls	r4, r4, #12
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <__aeabi_dmul+0x4cc>)
 800069a:	0b24      	lsrs	r4, r4, #12
 800069c:	9701      	str	r7, [sp, #4]
 800069e:	e63a      	b.n	8000316 <__aeabi_dmul+0xc2>
 80006a0:	f000 fc7a 	bl	8000f98 <__clzsi2>
 80006a4:	0001      	movs	r1, r0
 80006a6:	0002      	movs	r2, r0
 80006a8:	3115      	adds	r1, #21
 80006aa:	3220      	adds	r2, #32
 80006ac:	291c      	cmp	r1, #28
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_dmul+0x45e>
 80006b0:	e74b      	b.n	800054a <__aeabi_dmul+0x2f6>
 80006b2:	0034      	movs	r4, r6
 80006b4:	3808      	subs	r0, #8
 80006b6:	2500      	movs	r5, #0
 80006b8:	4084      	lsls	r4, r0
 80006ba:	e750      	b.n	800055e <__aeabi_dmul+0x30a>
 80006bc:	f000 fc6c 	bl	8000f98 <__clzsi2>
 80006c0:	0003      	movs	r3, r0
 80006c2:	001a      	movs	r2, r3
 80006c4:	3215      	adds	r2, #21
 80006c6:	3020      	adds	r0, #32
 80006c8:	2a1c      	cmp	r2, #28
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_dmul+0x47a>
 80006cc:	e71e      	b.n	800050c <__aeabi_dmul+0x2b8>
 80006ce:	4656      	mov	r6, sl
 80006d0:	3b08      	subs	r3, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	409e      	lsls	r6, r3
 80006d6:	e723      	b.n	8000520 <__aeabi_dmul+0x2cc>
 80006d8:	9b00      	ldr	r3, [sp, #0]
 80006da:	469c      	mov	ip, r3
 80006dc:	e6e6      	b.n	80004ac <__aeabi_dmul+0x258>
 80006de:	4912      	ldr	r1, [pc, #72]	; (8000728 <__aeabi_dmul+0x4d4>)
 80006e0:	0022      	movs	r2, r4
 80006e2:	4461      	add	r1, ip
 80006e4:	002e      	movs	r6, r5
 80006e6:	408d      	lsls	r5, r1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	40c6      	lsrs	r6, r0
 80006ec:	1e69      	subs	r1, r5, #1
 80006ee:	418d      	sbcs	r5, r1
 80006f0:	4332      	orrs	r2, r6
 80006f2:	432a      	orrs	r2, r5
 80006f4:	40c4      	lsrs	r4, r0
 80006f6:	0753      	lsls	r3, r2, #29
 80006f8:	d0b6      	beq.n	8000668 <__aeabi_dmul+0x414>
 80006fa:	210f      	movs	r1, #15
 80006fc:	4011      	ands	r1, r2
 80006fe:	2904      	cmp	r1, #4
 8000700:	d1ac      	bne.n	800065c <__aeabi_dmul+0x408>
 8000702:	e7b1      	b.n	8000668 <__aeabi_dmul+0x414>
 8000704:	0765      	lsls	r5, r4, #29
 8000706:	0264      	lsls	r4, r4, #9
 8000708:	0b24      	lsrs	r4, r4, #12
 800070a:	08d2      	lsrs	r2, r2, #3
 800070c:	4315      	orrs	r5, r2
 800070e:	2200      	movs	r2, #0
 8000710:	e601      	b.n	8000316 <__aeabi_dmul+0xc2>
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0312      	lsls	r2, r2, #12
 8000716:	4314      	orrs	r4, r2
 8000718:	0324      	lsls	r4, r4, #12
 800071a:	4a01      	ldr	r2, [pc, #4]	; (8000720 <__aeabi_dmul+0x4cc>)
 800071c:	0b24      	lsrs	r4, r4, #12
 800071e:	e5fa      	b.n	8000316 <__aeabi_dmul+0xc2>
 8000720:	000007ff 	.word	0x000007ff
 8000724:	0000043e 	.word	0x0000043e
 8000728:	0000041e 	.word	0x0000041e

0800072c <__aeabi_dsub>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	4657      	mov	r7, sl
 8000730:	464e      	mov	r6, r9
 8000732:	4645      	mov	r5, r8
 8000734:	46de      	mov	lr, fp
 8000736:	b5e0      	push	{r5, r6, r7, lr}
 8000738:	001e      	movs	r6, r3
 800073a:	0017      	movs	r7, r2
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	030b      	lsls	r3, r1, #12
 8000740:	0d52      	lsrs	r2, r2, #21
 8000742:	0a5b      	lsrs	r3, r3, #9
 8000744:	4690      	mov	r8, r2
 8000746:	0f42      	lsrs	r2, r0, #29
 8000748:	431a      	orrs	r2, r3
 800074a:	0fcd      	lsrs	r5, r1, #31
 800074c:	4ccd      	ldr	r4, [pc, #820]	; (8000a84 <__aeabi_dsub+0x358>)
 800074e:	0331      	lsls	r1, r6, #12
 8000750:	00c3      	lsls	r3, r0, #3
 8000752:	4694      	mov	ip, r2
 8000754:	0070      	lsls	r0, r6, #1
 8000756:	0f7a      	lsrs	r2, r7, #29
 8000758:	0a49      	lsrs	r1, r1, #9
 800075a:	00ff      	lsls	r7, r7, #3
 800075c:	469a      	mov	sl, r3
 800075e:	46b9      	mov	r9, r7
 8000760:	0d40      	lsrs	r0, r0, #21
 8000762:	0ff6      	lsrs	r6, r6, #31
 8000764:	4311      	orrs	r1, r2
 8000766:	42a0      	cmp	r0, r4
 8000768:	d100      	bne.n	800076c <__aeabi_dsub+0x40>
 800076a:	e0b1      	b.n	80008d0 <__aeabi_dsub+0x1a4>
 800076c:	2201      	movs	r2, #1
 800076e:	4056      	eors	r6, r2
 8000770:	46b3      	mov	fp, r6
 8000772:	42b5      	cmp	r5, r6
 8000774:	d100      	bne.n	8000778 <__aeabi_dsub+0x4c>
 8000776:	e088      	b.n	800088a <__aeabi_dsub+0x15e>
 8000778:	4642      	mov	r2, r8
 800077a:	1a12      	subs	r2, r2, r0
 800077c:	2a00      	cmp	r2, #0
 800077e:	dc00      	bgt.n	8000782 <__aeabi_dsub+0x56>
 8000780:	e0ae      	b.n	80008e0 <__aeabi_dsub+0x1b4>
 8000782:	2800      	cmp	r0, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_dsub+0x5c>
 8000786:	e0c1      	b.n	800090c <__aeabi_dsub+0x1e0>
 8000788:	48be      	ldr	r0, [pc, #760]	; (8000a84 <__aeabi_dsub+0x358>)
 800078a:	4580      	cmp	r8, r0
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x64>
 800078e:	e151      	b.n	8000a34 <__aeabi_dsub+0x308>
 8000790:	2080      	movs	r0, #128	; 0x80
 8000792:	0400      	lsls	r0, r0, #16
 8000794:	4301      	orrs	r1, r0
 8000796:	2a38      	cmp	r2, #56	; 0x38
 8000798:	dd00      	ble.n	800079c <__aeabi_dsub+0x70>
 800079a:	e17b      	b.n	8000a94 <__aeabi_dsub+0x368>
 800079c:	2a1f      	cmp	r2, #31
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dsub+0x76>
 80007a0:	e1ee      	b.n	8000b80 <__aeabi_dsub+0x454>
 80007a2:	2020      	movs	r0, #32
 80007a4:	003e      	movs	r6, r7
 80007a6:	1a80      	subs	r0, r0, r2
 80007a8:	000c      	movs	r4, r1
 80007aa:	40d6      	lsrs	r6, r2
 80007ac:	40d1      	lsrs	r1, r2
 80007ae:	4087      	lsls	r7, r0
 80007b0:	4662      	mov	r2, ip
 80007b2:	4084      	lsls	r4, r0
 80007b4:	1a52      	subs	r2, r2, r1
 80007b6:	1e78      	subs	r0, r7, #1
 80007b8:	4187      	sbcs	r7, r0
 80007ba:	4694      	mov	ip, r2
 80007bc:	4334      	orrs	r4, r6
 80007be:	4327      	orrs	r7, r4
 80007c0:	1bdc      	subs	r4, r3, r7
 80007c2:	42a3      	cmp	r3, r4
 80007c4:	419b      	sbcs	r3, r3
 80007c6:	4662      	mov	r2, ip
 80007c8:	425b      	negs	r3, r3
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	4699      	mov	r9, r3
 80007ce:	464b      	mov	r3, r9
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	d400      	bmi.n	80007d6 <__aeabi_dsub+0xaa>
 80007d4:	e118      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 80007d6:	464b      	mov	r3, r9
 80007d8:	0258      	lsls	r0, r3, #9
 80007da:	0a43      	lsrs	r3, r0, #9
 80007dc:	4699      	mov	r9, r3
 80007de:	464b      	mov	r3, r9
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dsub+0xba>
 80007e4:	e137      	b.n	8000a56 <__aeabi_dsub+0x32a>
 80007e6:	4648      	mov	r0, r9
 80007e8:	f000 fbd6 	bl	8000f98 <__clzsi2>
 80007ec:	0001      	movs	r1, r0
 80007ee:	3908      	subs	r1, #8
 80007f0:	2320      	movs	r3, #32
 80007f2:	0022      	movs	r2, r4
 80007f4:	4648      	mov	r0, r9
 80007f6:	1a5b      	subs	r3, r3, r1
 80007f8:	40da      	lsrs	r2, r3
 80007fa:	4088      	lsls	r0, r1
 80007fc:	408c      	lsls	r4, r1
 80007fe:	4643      	mov	r3, r8
 8000800:	4310      	orrs	r0, r2
 8000802:	4588      	cmp	r8, r1
 8000804:	dd00      	ble.n	8000808 <__aeabi_dsub+0xdc>
 8000806:	e136      	b.n	8000a76 <__aeabi_dsub+0x34a>
 8000808:	1ac9      	subs	r1, r1, r3
 800080a:	1c4b      	adds	r3, r1, #1
 800080c:	2b1f      	cmp	r3, #31
 800080e:	dd00      	ble.n	8000812 <__aeabi_dsub+0xe6>
 8000810:	e0ea      	b.n	80009e8 <__aeabi_dsub+0x2bc>
 8000812:	2220      	movs	r2, #32
 8000814:	0026      	movs	r6, r4
 8000816:	1ad2      	subs	r2, r2, r3
 8000818:	0001      	movs	r1, r0
 800081a:	4094      	lsls	r4, r2
 800081c:	40de      	lsrs	r6, r3
 800081e:	40d8      	lsrs	r0, r3
 8000820:	2300      	movs	r3, #0
 8000822:	4091      	lsls	r1, r2
 8000824:	1e62      	subs	r2, r4, #1
 8000826:	4194      	sbcs	r4, r2
 8000828:	4681      	mov	r9, r0
 800082a:	4698      	mov	r8, r3
 800082c:	4331      	orrs	r1, r6
 800082e:	430c      	orrs	r4, r1
 8000830:	0763      	lsls	r3, r4, #29
 8000832:	d009      	beq.n	8000848 <__aeabi_dsub+0x11c>
 8000834:	230f      	movs	r3, #15
 8000836:	4023      	ands	r3, r4
 8000838:	2b04      	cmp	r3, #4
 800083a:	d005      	beq.n	8000848 <__aeabi_dsub+0x11c>
 800083c:	1d23      	adds	r3, r4, #4
 800083e:	42a3      	cmp	r3, r4
 8000840:	41a4      	sbcs	r4, r4
 8000842:	4264      	negs	r4, r4
 8000844:	44a1      	add	r9, r4
 8000846:	001c      	movs	r4, r3
 8000848:	464b      	mov	r3, r9
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	d400      	bmi.n	8000850 <__aeabi_dsub+0x124>
 800084e:	e0de      	b.n	8000a0e <__aeabi_dsub+0x2e2>
 8000850:	4641      	mov	r1, r8
 8000852:	4b8c      	ldr	r3, [pc, #560]	; (8000a84 <__aeabi_dsub+0x358>)
 8000854:	3101      	adds	r1, #1
 8000856:	4299      	cmp	r1, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dsub+0x130>
 800085a:	e0e7      	b.n	8000a2c <__aeabi_dsub+0x300>
 800085c:	464b      	mov	r3, r9
 800085e:	488a      	ldr	r0, [pc, #552]	; (8000a88 <__aeabi_dsub+0x35c>)
 8000860:	08e4      	lsrs	r4, r4, #3
 8000862:	4003      	ands	r3, r0
 8000864:	0018      	movs	r0, r3
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	075b      	lsls	r3, r3, #29
 800086a:	0240      	lsls	r0, r0, #9
 800086c:	4323      	orrs	r3, r4
 800086e:	0d4a      	lsrs	r2, r1, #21
 8000870:	0b04      	lsrs	r4, r0, #12
 8000872:	0512      	lsls	r2, r2, #20
 8000874:	07ed      	lsls	r5, r5, #31
 8000876:	4322      	orrs	r2, r4
 8000878:	432a      	orrs	r2, r5
 800087a:	0018      	movs	r0, r3
 800087c:	0011      	movs	r1, r2
 800087e:	bcf0      	pop	{r4, r5, r6, r7}
 8000880:	46bb      	mov	fp, r7
 8000882:	46b2      	mov	sl, r6
 8000884:	46a9      	mov	r9, r5
 8000886:	46a0      	mov	r8, r4
 8000888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800088a:	4642      	mov	r2, r8
 800088c:	1a12      	subs	r2, r2, r0
 800088e:	2a00      	cmp	r2, #0
 8000890:	dd52      	ble.n	8000938 <__aeabi_dsub+0x20c>
 8000892:	2800      	cmp	r0, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_dsub+0x16c>
 8000896:	e09c      	b.n	80009d2 <__aeabi_dsub+0x2a6>
 8000898:	45a0      	cmp	r8, r4
 800089a:	d100      	bne.n	800089e <__aeabi_dsub+0x172>
 800089c:	e0ca      	b.n	8000a34 <__aeabi_dsub+0x308>
 800089e:	2080      	movs	r0, #128	; 0x80
 80008a0:	0400      	lsls	r0, r0, #16
 80008a2:	4301      	orrs	r1, r0
 80008a4:	2a38      	cmp	r2, #56	; 0x38
 80008a6:	dd00      	ble.n	80008aa <__aeabi_dsub+0x17e>
 80008a8:	e149      	b.n	8000b3e <__aeabi_dsub+0x412>
 80008aa:	2a1f      	cmp	r2, #31
 80008ac:	dc00      	bgt.n	80008b0 <__aeabi_dsub+0x184>
 80008ae:	e197      	b.n	8000be0 <__aeabi_dsub+0x4b4>
 80008b0:	0010      	movs	r0, r2
 80008b2:	000e      	movs	r6, r1
 80008b4:	3820      	subs	r0, #32
 80008b6:	40c6      	lsrs	r6, r0
 80008b8:	2a20      	cmp	r2, #32
 80008ba:	d004      	beq.n	80008c6 <__aeabi_dsub+0x19a>
 80008bc:	2040      	movs	r0, #64	; 0x40
 80008be:	1a82      	subs	r2, r0, r2
 80008c0:	4091      	lsls	r1, r2
 80008c2:	430f      	orrs	r7, r1
 80008c4:	46b9      	mov	r9, r7
 80008c6:	464c      	mov	r4, r9
 80008c8:	1e62      	subs	r2, r4, #1
 80008ca:	4194      	sbcs	r4, r2
 80008cc:	4334      	orrs	r4, r6
 80008ce:	e13a      	b.n	8000b46 <__aeabi_dsub+0x41a>
 80008d0:	000a      	movs	r2, r1
 80008d2:	433a      	orrs	r2, r7
 80008d4:	d028      	beq.n	8000928 <__aeabi_dsub+0x1fc>
 80008d6:	46b3      	mov	fp, r6
 80008d8:	42b5      	cmp	r5, r6
 80008da:	d02b      	beq.n	8000934 <__aeabi_dsub+0x208>
 80008dc:	4a6b      	ldr	r2, [pc, #428]	; (8000a8c <__aeabi_dsub+0x360>)
 80008de:	4442      	add	r2, r8
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	d05d      	beq.n	80009a0 <__aeabi_dsub+0x274>
 80008e4:	4642      	mov	r2, r8
 80008e6:	4644      	mov	r4, r8
 80008e8:	1a82      	subs	r2, r0, r2
 80008ea:	2c00      	cmp	r4, #0
 80008ec:	d000      	beq.n	80008f0 <__aeabi_dsub+0x1c4>
 80008ee:	e0f5      	b.n	8000adc <__aeabi_dsub+0x3b0>
 80008f0:	4665      	mov	r5, ip
 80008f2:	431d      	orrs	r5, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dsub+0x1cc>
 80008f6:	e19c      	b.n	8000c32 <__aeabi_dsub+0x506>
 80008f8:	1e55      	subs	r5, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dsub+0x1d4>
 80008fe:	e1fb      	b.n	8000cf8 <__aeabi_dsub+0x5cc>
 8000900:	4c60      	ldr	r4, [pc, #384]	; (8000a84 <__aeabi_dsub+0x358>)
 8000902:	42a2      	cmp	r2, r4
 8000904:	d100      	bne.n	8000908 <__aeabi_dsub+0x1dc>
 8000906:	e1bd      	b.n	8000c84 <__aeabi_dsub+0x558>
 8000908:	002a      	movs	r2, r5
 800090a:	e0f0      	b.n	8000aee <__aeabi_dsub+0x3c2>
 800090c:	0008      	movs	r0, r1
 800090e:	4338      	orrs	r0, r7
 8000910:	d100      	bne.n	8000914 <__aeabi_dsub+0x1e8>
 8000912:	e0c3      	b.n	8000a9c <__aeabi_dsub+0x370>
 8000914:	1e50      	subs	r0, r2, #1
 8000916:	2a01      	cmp	r2, #1
 8000918:	d100      	bne.n	800091c <__aeabi_dsub+0x1f0>
 800091a:	e1a8      	b.n	8000c6e <__aeabi_dsub+0x542>
 800091c:	4c59      	ldr	r4, [pc, #356]	; (8000a84 <__aeabi_dsub+0x358>)
 800091e:	42a2      	cmp	r2, r4
 8000920:	d100      	bne.n	8000924 <__aeabi_dsub+0x1f8>
 8000922:	e087      	b.n	8000a34 <__aeabi_dsub+0x308>
 8000924:	0002      	movs	r2, r0
 8000926:	e736      	b.n	8000796 <__aeabi_dsub+0x6a>
 8000928:	2201      	movs	r2, #1
 800092a:	4056      	eors	r6, r2
 800092c:	46b3      	mov	fp, r6
 800092e:	42b5      	cmp	r5, r6
 8000930:	d000      	beq.n	8000934 <__aeabi_dsub+0x208>
 8000932:	e721      	b.n	8000778 <__aeabi_dsub+0x4c>
 8000934:	4a55      	ldr	r2, [pc, #340]	; (8000a8c <__aeabi_dsub+0x360>)
 8000936:	4442      	add	r2, r8
 8000938:	2a00      	cmp	r2, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dsub+0x212>
 800093c:	e0b5      	b.n	8000aaa <__aeabi_dsub+0x37e>
 800093e:	4642      	mov	r2, r8
 8000940:	4644      	mov	r4, r8
 8000942:	1a82      	subs	r2, r0, r2
 8000944:	2c00      	cmp	r4, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dsub+0x21e>
 8000948:	e138      	b.n	8000bbc <__aeabi_dsub+0x490>
 800094a:	4e4e      	ldr	r6, [pc, #312]	; (8000a84 <__aeabi_dsub+0x358>)
 800094c:	42b0      	cmp	r0, r6
 800094e:	d100      	bne.n	8000952 <__aeabi_dsub+0x226>
 8000950:	e1de      	b.n	8000d10 <__aeabi_dsub+0x5e4>
 8000952:	2680      	movs	r6, #128	; 0x80
 8000954:	4664      	mov	r4, ip
 8000956:	0436      	lsls	r6, r6, #16
 8000958:	4334      	orrs	r4, r6
 800095a:	46a4      	mov	ip, r4
 800095c:	2a38      	cmp	r2, #56	; 0x38
 800095e:	dd00      	ble.n	8000962 <__aeabi_dsub+0x236>
 8000960:	e196      	b.n	8000c90 <__aeabi_dsub+0x564>
 8000962:	2a1f      	cmp	r2, #31
 8000964:	dd00      	ble.n	8000968 <__aeabi_dsub+0x23c>
 8000966:	e224      	b.n	8000db2 <__aeabi_dsub+0x686>
 8000968:	2620      	movs	r6, #32
 800096a:	1ab4      	subs	r4, r6, r2
 800096c:	46a2      	mov	sl, r4
 800096e:	4664      	mov	r4, ip
 8000970:	4656      	mov	r6, sl
 8000972:	40b4      	lsls	r4, r6
 8000974:	46a1      	mov	r9, r4
 8000976:	001c      	movs	r4, r3
 8000978:	464e      	mov	r6, r9
 800097a:	40d4      	lsrs	r4, r2
 800097c:	4326      	orrs	r6, r4
 800097e:	0034      	movs	r4, r6
 8000980:	4656      	mov	r6, sl
 8000982:	40b3      	lsls	r3, r6
 8000984:	1e5e      	subs	r6, r3, #1
 8000986:	41b3      	sbcs	r3, r6
 8000988:	431c      	orrs	r4, r3
 800098a:	4663      	mov	r3, ip
 800098c:	40d3      	lsrs	r3, r2
 800098e:	18c9      	adds	r1, r1, r3
 8000990:	19e4      	adds	r4, r4, r7
 8000992:	42bc      	cmp	r4, r7
 8000994:	41bf      	sbcs	r7, r7
 8000996:	427f      	negs	r7, r7
 8000998:	46b9      	mov	r9, r7
 800099a:	4680      	mov	r8, r0
 800099c:	4489      	add	r9, r1
 800099e:	e0d8      	b.n	8000b52 <__aeabi_dsub+0x426>
 80009a0:	4640      	mov	r0, r8
 80009a2:	4c3b      	ldr	r4, [pc, #236]	; (8000a90 <__aeabi_dsub+0x364>)
 80009a4:	3001      	adds	r0, #1
 80009a6:	4220      	tst	r0, r4
 80009a8:	d000      	beq.n	80009ac <__aeabi_dsub+0x280>
 80009aa:	e0b4      	b.n	8000b16 <__aeabi_dsub+0x3ea>
 80009ac:	4640      	mov	r0, r8
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dsub+0x288>
 80009b2:	e144      	b.n	8000c3e <__aeabi_dsub+0x512>
 80009b4:	4660      	mov	r0, ip
 80009b6:	4318      	orrs	r0, r3
 80009b8:	d100      	bne.n	80009bc <__aeabi_dsub+0x290>
 80009ba:	e190      	b.n	8000cde <__aeabi_dsub+0x5b2>
 80009bc:	0008      	movs	r0, r1
 80009be:	4338      	orrs	r0, r7
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dsub+0x298>
 80009c2:	e1aa      	b.n	8000d1a <__aeabi_dsub+0x5ee>
 80009c4:	4661      	mov	r1, ip
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	0749      	lsls	r1, r1, #29
 80009ca:	430b      	orrs	r3, r1
 80009cc:	4661      	mov	r1, ip
 80009ce:	08cc      	lsrs	r4, r1, #3
 80009d0:	e027      	b.n	8000a22 <__aeabi_dsub+0x2f6>
 80009d2:	0008      	movs	r0, r1
 80009d4:	4338      	orrs	r0, r7
 80009d6:	d061      	beq.n	8000a9c <__aeabi_dsub+0x370>
 80009d8:	1e50      	subs	r0, r2, #1
 80009da:	2a01      	cmp	r2, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dsub+0x2b4>
 80009de:	e139      	b.n	8000c54 <__aeabi_dsub+0x528>
 80009e0:	42a2      	cmp	r2, r4
 80009e2:	d027      	beq.n	8000a34 <__aeabi_dsub+0x308>
 80009e4:	0002      	movs	r2, r0
 80009e6:	e75d      	b.n	80008a4 <__aeabi_dsub+0x178>
 80009e8:	0002      	movs	r2, r0
 80009ea:	391f      	subs	r1, #31
 80009ec:	40ca      	lsrs	r2, r1
 80009ee:	0011      	movs	r1, r2
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d003      	beq.n	80009fc <__aeabi_dsub+0x2d0>
 80009f4:	2240      	movs	r2, #64	; 0x40
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	4098      	lsls	r0, r3
 80009fa:	4304      	orrs	r4, r0
 80009fc:	1e63      	subs	r3, r4, #1
 80009fe:	419c      	sbcs	r4, r3
 8000a00:	2300      	movs	r3, #0
 8000a02:	4699      	mov	r9, r3
 8000a04:	4698      	mov	r8, r3
 8000a06:	430c      	orrs	r4, r1
 8000a08:	0763      	lsls	r3, r4, #29
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_dsub+0x2e2>
 8000a0c:	e712      	b.n	8000834 <__aeabi_dsub+0x108>
 8000a0e:	464b      	mov	r3, r9
 8000a10:	464a      	mov	r2, r9
 8000a12:	08e4      	lsrs	r4, r4, #3
 8000a14:	075b      	lsls	r3, r3, #29
 8000a16:	4323      	orrs	r3, r4
 8000a18:	08d4      	lsrs	r4, r2, #3
 8000a1a:	4642      	mov	r2, r8
 8000a1c:	4919      	ldr	r1, [pc, #100]	; (8000a84 <__aeabi_dsub+0x358>)
 8000a1e:	428a      	cmp	r2, r1
 8000a20:	d00e      	beq.n	8000a40 <__aeabi_dsub+0x314>
 8000a22:	0324      	lsls	r4, r4, #12
 8000a24:	0552      	lsls	r2, r2, #21
 8000a26:	0b24      	lsrs	r4, r4, #12
 8000a28:	0d52      	lsrs	r2, r2, #21
 8000a2a:	e722      	b.n	8000872 <__aeabi_dsub+0x146>
 8000a2c:	000a      	movs	r2, r1
 8000a2e:	2400      	movs	r4, #0
 8000a30:	2300      	movs	r3, #0
 8000a32:	e71e      	b.n	8000872 <__aeabi_dsub+0x146>
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	4662      	mov	r2, ip
 8000a38:	0752      	lsls	r2, r2, #29
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	08d4      	lsrs	r4, r2, #3
 8000a40:	001a      	movs	r2, r3
 8000a42:	4322      	orrs	r2, r4
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x31c>
 8000a46:	e1fc      	b.n	8000e42 <__aeabi_dsub+0x716>
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	0312      	lsls	r2, r2, #12
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	0324      	lsls	r4, r4, #12
 8000a50:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <__aeabi_dsub+0x358>)
 8000a52:	0b24      	lsrs	r4, r4, #12
 8000a54:	e70d      	b.n	8000872 <__aeabi_dsub+0x146>
 8000a56:	0020      	movs	r0, r4
 8000a58:	f000 fa9e 	bl	8000f98 <__clzsi2>
 8000a5c:	0001      	movs	r1, r0
 8000a5e:	3118      	adds	r1, #24
 8000a60:	291f      	cmp	r1, #31
 8000a62:	dc00      	bgt.n	8000a66 <__aeabi_dsub+0x33a>
 8000a64:	e6c4      	b.n	80007f0 <__aeabi_dsub+0xc4>
 8000a66:	3808      	subs	r0, #8
 8000a68:	4084      	lsls	r4, r0
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	2400      	movs	r4, #0
 8000a70:	4588      	cmp	r8, r1
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_dsub+0x34a>
 8000a74:	e6c8      	b.n	8000808 <__aeabi_dsub+0xdc>
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__aeabi_dsub+0x35c>)
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	4010      	ands	r0, r2
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	4681      	mov	r9, r0
 8000a80:	e6d6      	b.n	8000830 <__aeabi_dsub+0x104>
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	000007ff 	.word	0x000007ff
 8000a88:	ff7fffff 	.word	0xff7fffff
 8000a8c:	fffff801 	.word	0xfffff801
 8000a90:	000007fe 	.word	0x000007fe
 8000a94:	430f      	orrs	r7, r1
 8000a96:	1e7a      	subs	r2, r7, #1
 8000a98:	4197      	sbcs	r7, r2
 8000a9a:	e691      	b.n	80007c0 <__aeabi_dsub+0x94>
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	0749      	lsls	r1, r1, #29
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	4661      	mov	r1, ip
 8000aa6:	08cc      	lsrs	r4, r1, #3
 8000aa8:	e7b8      	b.n	8000a1c <__aeabi_dsub+0x2f0>
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4cd3      	ldr	r4, [pc, #844]	; (8000dfc <__aeabi_dsub+0x6d0>)
 8000aae:	3001      	adds	r0, #1
 8000ab0:	4220      	tst	r0, r4
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_dsub+0x38a>
 8000ab4:	e0a2      	b.n	8000bfc <__aeabi_dsub+0x4d0>
 8000ab6:	4640      	mov	r0, r8
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d000      	beq.n	8000abe <__aeabi_dsub+0x392>
 8000abc:	e101      	b.n	8000cc2 <__aeabi_dsub+0x596>
 8000abe:	4660      	mov	r0, ip
 8000ac0:	4318      	orrs	r0, r3
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dsub+0x39a>
 8000ac4:	e15e      	b.n	8000d84 <__aeabi_dsub+0x658>
 8000ac6:	0008      	movs	r0, r1
 8000ac8:	4338      	orrs	r0, r7
 8000aca:	d000      	beq.n	8000ace <__aeabi_dsub+0x3a2>
 8000acc:	e15f      	b.n	8000d8e <__aeabi_dsub+0x662>
 8000ace:	4661      	mov	r1, ip
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	0749      	lsls	r1, r1, #29
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	4661      	mov	r1, ip
 8000ad8:	08cc      	lsrs	r4, r1, #3
 8000ada:	e7a2      	b.n	8000a22 <__aeabi_dsub+0x2f6>
 8000adc:	4dc8      	ldr	r5, [pc, #800]	; (8000e00 <__aeabi_dsub+0x6d4>)
 8000ade:	42a8      	cmp	r0, r5
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dsub+0x3b8>
 8000ae2:	e0cf      	b.n	8000c84 <__aeabi_dsub+0x558>
 8000ae4:	2580      	movs	r5, #128	; 0x80
 8000ae6:	4664      	mov	r4, ip
 8000ae8:	042d      	lsls	r5, r5, #16
 8000aea:	432c      	orrs	r4, r5
 8000aec:	46a4      	mov	ip, r4
 8000aee:	2a38      	cmp	r2, #56	; 0x38
 8000af0:	dc56      	bgt.n	8000ba0 <__aeabi_dsub+0x474>
 8000af2:	2a1f      	cmp	r2, #31
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_dsub+0x3cc>
 8000af6:	e0d1      	b.n	8000c9c <__aeabi_dsub+0x570>
 8000af8:	2520      	movs	r5, #32
 8000afa:	001e      	movs	r6, r3
 8000afc:	1aad      	subs	r5, r5, r2
 8000afe:	4664      	mov	r4, ip
 8000b00:	40ab      	lsls	r3, r5
 8000b02:	40ac      	lsls	r4, r5
 8000b04:	40d6      	lsrs	r6, r2
 8000b06:	1e5d      	subs	r5, r3, #1
 8000b08:	41ab      	sbcs	r3, r5
 8000b0a:	4334      	orrs	r4, r6
 8000b0c:	4323      	orrs	r3, r4
 8000b0e:	4664      	mov	r4, ip
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	1b09      	subs	r1, r1, r4
 8000b14:	e049      	b.n	8000baa <__aeabi_dsub+0x47e>
 8000b16:	4660      	mov	r0, ip
 8000b18:	1bdc      	subs	r4, r3, r7
 8000b1a:	1a46      	subs	r6, r0, r1
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	4180      	sbcs	r0, r0
 8000b20:	4240      	negs	r0, r0
 8000b22:	4681      	mov	r9, r0
 8000b24:	0030      	movs	r0, r6
 8000b26:	464e      	mov	r6, r9
 8000b28:	1b80      	subs	r0, r0, r6
 8000b2a:	4681      	mov	r9, r0
 8000b2c:	0200      	lsls	r0, r0, #8
 8000b2e:	d476      	bmi.n	8000c1e <__aeabi_dsub+0x4f2>
 8000b30:	464b      	mov	r3, r9
 8000b32:	4323      	orrs	r3, r4
 8000b34:	d000      	beq.n	8000b38 <__aeabi_dsub+0x40c>
 8000b36:	e652      	b.n	80007de <__aeabi_dsub+0xb2>
 8000b38:	2400      	movs	r4, #0
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	e771      	b.n	8000a22 <__aeabi_dsub+0x2f6>
 8000b3e:	4339      	orrs	r1, r7
 8000b40:	000c      	movs	r4, r1
 8000b42:	1e62      	subs	r2, r4, #1
 8000b44:	4194      	sbcs	r4, r2
 8000b46:	18e4      	adds	r4, r4, r3
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	419b      	sbcs	r3, r3
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	4463      	add	r3, ip
 8000b50:	4699      	mov	r9, r3
 8000b52:	464b      	mov	r3, r9
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	d400      	bmi.n	8000b5a <__aeabi_dsub+0x42e>
 8000b58:	e756      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	469c      	mov	ip, r3
 8000b5e:	4ba8      	ldr	r3, [pc, #672]	; (8000e00 <__aeabi_dsub+0x6d4>)
 8000b60:	44e0      	add	r8, ip
 8000b62:	4598      	cmp	r8, r3
 8000b64:	d038      	beq.n	8000bd8 <__aeabi_dsub+0x4ac>
 8000b66:	464b      	mov	r3, r9
 8000b68:	48a6      	ldr	r0, [pc, #664]	; (8000e04 <__aeabi_dsub+0x6d8>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4003      	ands	r3, r0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	0863      	lsrs	r3, r4, #1
 8000b72:	4014      	ands	r4, r2
 8000b74:	431c      	orrs	r4, r3
 8000b76:	07c3      	lsls	r3, r0, #31
 8000b78:	431c      	orrs	r4, r3
 8000b7a:	0843      	lsrs	r3, r0, #1
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	e657      	b.n	8000830 <__aeabi_dsub+0x104>
 8000b80:	0010      	movs	r0, r2
 8000b82:	000e      	movs	r6, r1
 8000b84:	3820      	subs	r0, #32
 8000b86:	40c6      	lsrs	r6, r0
 8000b88:	2a20      	cmp	r2, #32
 8000b8a:	d004      	beq.n	8000b96 <__aeabi_dsub+0x46a>
 8000b8c:	2040      	movs	r0, #64	; 0x40
 8000b8e:	1a82      	subs	r2, r0, r2
 8000b90:	4091      	lsls	r1, r2
 8000b92:	430f      	orrs	r7, r1
 8000b94:	46b9      	mov	r9, r7
 8000b96:	464f      	mov	r7, r9
 8000b98:	1e7a      	subs	r2, r7, #1
 8000b9a:	4197      	sbcs	r7, r2
 8000b9c:	4337      	orrs	r7, r6
 8000b9e:	e60f      	b.n	80007c0 <__aeabi_dsub+0x94>
 8000ba0:	4662      	mov	r2, ip
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	4193      	sbcs	r3, r2
 8000baa:	1afc      	subs	r4, r7, r3
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	41bf      	sbcs	r7, r7
 8000bb0:	427f      	negs	r7, r7
 8000bb2:	1bcb      	subs	r3, r1, r7
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	465d      	mov	r5, fp
 8000bb8:	4680      	mov	r8, r0
 8000bba:	e608      	b.n	80007ce <__aeabi_dsub+0xa2>
 8000bbc:	4666      	mov	r6, ip
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dsub+0x498>
 8000bc2:	e0be      	b.n	8000d42 <__aeabi_dsub+0x616>
 8000bc4:	1e56      	subs	r6, r2, #1
 8000bc6:	2a01      	cmp	r2, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dsub+0x4a0>
 8000bca:	e109      	b.n	8000de0 <__aeabi_dsub+0x6b4>
 8000bcc:	4c8c      	ldr	r4, [pc, #560]	; (8000e00 <__aeabi_dsub+0x6d4>)
 8000bce:	42a2      	cmp	r2, r4
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x4a8>
 8000bd2:	e119      	b.n	8000e08 <__aeabi_dsub+0x6dc>
 8000bd4:	0032      	movs	r2, r6
 8000bd6:	e6c1      	b.n	800095c <__aeabi_dsub+0x230>
 8000bd8:	4642      	mov	r2, r8
 8000bda:	2400      	movs	r4, #0
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e648      	b.n	8000872 <__aeabi_dsub+0x146>
 8000be0:	2020      	movs	r0, #32
 8000be2:	000c      	movs	r4, r1
 8000be4:	1a80      	subs	r0, r0, r2
 8000be6:	003e      	movs	r6, r7
 8000be8:	4087      	lsls	r7, r0
 8000bea:	4084      	lsls	r4, r0
 8000bec:	40d6      	lsrs	r6, r2
 8000bee:	1e78      	subs	r0, r7, #1
 8000bf0:	4187      	sbcs	r7, r0
 8000bf2:	40d1      	lsrs	r1, r2
 8000bf4:	4334      	orrs	r4, r6
 8000bf6:	433c      	orrs	r4, r7
 8000bf8:	448c      	add	ip, r1
 8000bfa:	e7a4      	b.n	8000b46 <__aeabi_dsub+0x41a>
 8000bfc:	4a80      	ldr	r2, [pc, #512]	; (8000e00 <__aeabi_dsub+0x6d4>)
 8000bfe:	4290      	cmp	r0, r2
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dsub+0x4d8>
 8000c02:	e0e9      	b.n	8000dd8 <__aeabi_dsub+0x6ac>
 8000c04:	19df      	adds	r7, r3, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4461      	add	r1, ip
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	18c9      	adds	r1, r1, r3
 8000c10:	07cc      	lsls	r4, r1, #31
 8000c12:	087f      	lsrs	r7, r7, #1
 8000c14:	084b      	lsrs	r3, r1, #1
 8000c16:	4699      	mov	r9, r3
 8000c18:	4680      	mov	r8, r0
 8000c1a:	433c      	orrs	r4, r7
 8000c1c:	e6f4      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 8000c1e:	1afc      	subs	r4, r7, r3
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	41bf      	sbcs	r7, r7
 8000c24:	4663      	mov	r3, ip
 8000c26:	427f      	negs	r7, r7
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	1bcb      	subs	r3, r1, r7
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	465d      	mov	r5, fp
 8000c30:	e5d5      	b.n	80007de <__aeabi_dsub+0xb2>
 8000c32:	08ff      	lsrs	r7, r7, #3
 8000c34:	074b      	lsls	r3, r1, #29
 8000c36:	465d      	mov	r5, fp
 8000c38:	433b      	orrs	r3, r7
 8000c3a:	08cc      	lsrs	r4, r1, #3
 8000c3c:	e6ee      	b.n	8000a1c <__aeabi_dsub+0x2f0>
 8000c3e:	4662      	mov	r2, ip
 8000c40:	431a      	orrs	r2, r3
 8000c42:	d000      	beq.n	8000c46 <__aeabi_dsub+0x51a>
 8000c44:	e082      	b.n	8000d4c <__aeabi_dsub+0x620>
 8000c46:	000b      	movs	r3, r1
 8000c48:	433b      	orrs	r3, r7
 8000c4a:	d11b      	bne.n	8000c84 <__aeabi_dsub+0x558>
 8000c4c:	2480      	movs	r4, #128	; 0x80
 8000c4e:	2500      	movs	r5, #0
 8000c50:	0324      	lsls	r4, r4, #12
 8000c52:	e6f9      	b.n	8000a48 <__aeabi_dsub+0x31c>
 8000c54:	19dc      	adds	r4, r3, r7
 8000c56:	429c      	cmp	r4, r3
 8000c58:	419b      	sbcs	r3, r3
 8000c5a:	4461      	add	r1, ip
 8000c5c:	4689      	mov	r9, r1
 8000c5e:	425b      	negs	r3, r3
 8000c60:	4499      	add	r9, r3
 8000c62:	464b      	mov	r3, r9
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	d444      	bmi.n	8000cf2 <__aeabi_dsub+0x5c6>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	e6cc      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 8000c6e:	1bdc      	subs	r4, r3, r7
 8000c70:	4662      	mov	r2, ip
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	419b      	sbcs	r3, r3
 8000c76:	1a51      	subs	r1, r2, r1
 8000c78:	425b      	negs	r3, r3
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	e5a4      	b.n	80007ce <__aeabi_dsub+0xa2>
 8000c84:	08ff      	lsrs	r7, r7, #3
 8000c86:	074b      	lsls	r3, r1, #29
 8000c88:	465d      	mov	r5, fp
 8000c8a:	433b      	orrs	r3, r7
 8000c8c:	08cc      	lsrs	r4, r1, #3
 8000c8e:	e6d7      	b.n	8000a40 <__aeabi_dsub+0x314>
 8000c90:	4662      	mov	r2, ip
 8000c92:	431a      	orrs	r2, r3
 8000c94:	0014      	movs	r4, r2
 8000c96:	1e63      	subs	r3, r4, #1
 8000c98:	419c      	sbcs	r4, r3
 8000c9a:	e679      	b.n	8000990 <__aeabi_dsub+0x264>
 8000c9c:	0015      	movs	r5, r2
 8000c9e:	4664      	mov	r4, ip
 8000ca0:	3d20      	subs	r5, #32
 8000ca2:	40ec      	lsrs	r4, r5
 8000ca4:	46a0      	mov	r8, r4
 8000ca6:	2a20      	cmp	r2, #32
 8000ca8:	d005      	beq.n	8000cb6 <__aeabi_dsub+0x58a>
 8000caa:	2540      	movs	r5, #64	; 0x40
 8000cac:	4664      	mov	r4, ip
 8000cae:	1aaa      	subs	r2, r5, r2
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	4654      	mov	r4, sl
 8000cb8:	1e63      	subs	r3, r4, #1
 8000cba:	419c      	sbcs	r4, r3
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	4323      	orrs	r3, r4
 8000cc0:	e773      	b.n	8000baa <__aeabi_dsub+0x47e>
 8000cc2:	4662      	mov	r2, ip
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	d023      	beq.n	8000d10 <__aeabi_dsub+0x5e4>
 8000cc8:	000a      	movs	r2, r1
 8000cca:	433a      	orrs	r2, r7
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_dsub+0x5a4>
 8000cce:	e0a0      	b.n	8000e12 <__aeabi_dsub+0x6e6>
 8000cd0:	4662      	mov	r2, ip
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	0752      	lsls	r2, r2, #29
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	4662      	mov	r2, ip
 8000cda:	08d4      	lsrs	r4, r2, #3
 8000cdc:	e6b0      	b.n	8000a40 <__aeabi_dsub+0x314>
 8000cde:	000b      	movs	r3, r1
 8000ce0:	433b      	orrs	r3, r7
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dsub+0x5ba>
 8000ce4:	e728      	b.n	8000b38 <__aeabi_dsub+0x40c>
 8000ce6:	08ff      	lsrs	r7, r7, #3
 8000ce8:	074b      	lsls	r3, r1, #29
 8000cea:	465d      	mov	r5, fp
 8000cec:	433b      	orrs	r3, r7
 8000cee:	08cc      	lsrs	r4, r1, #3
 8000cf0:	e697      	b.n	8000a22 <__aeabi_dsub+0x2f6>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	4698      	mov	r8, r3
 8000cf6:	e736      	b.n	8000b66 <__aeabi_dsub+0x43a>
 8000cf8:	1afc      	subs	r4, r7, r3
 8000cfa:	42a7      	cmp	r7, r4
 8000cfc:	41bf      	sbcs	r7, r7
 8000cfe:	4663      	mov	r3, ip
 8000d00:	427f      	negs	r7, r7
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	1bcb      	subs	r3, r1, r7
 8000d06:	4699      	mov	r9, r3
 8000d08:	2301      	movs	r3, #1
 8000d0a:	465d      	mov	r5, fp
 8000d0c:	4698      	mov	r8, r3
 8000d0e:	e55e      	b.n	80007ce <__aeabi_dsub+0xa2>
 8000d10:	074b      	lsls	r3, r1, #29
 8000d12:	08ff      	lsrs	r7, r7, #3
 8000d14:	433b      	orrs	r3, r7
 8000d16:	08cc      	lsrs	r4, r1, #3
 8000d18:	e692      	b.n	8000a40 <__aeabi_dsub+0x314>
 8000d1a:	1bdc      	subs	r4, r3, r7
 8000d1c:	4660      	mov	r0, ip
 8000d1e:	42a3      	cmp	r3, r4
 8000d20:	41b6      	sbcs	r6, r6
 8000d22:	1a40      	subs	r0, r0, r1
 8000d24:	4276      	negs	r6, r6
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	4681      	mov	r9, r0
 8000d2a:	0200      	lsls	r0, r0, #8
 8000d2c:	d560      	bpl.n	8000df0 <__aeabi_dsub+0x6c4>
 8000d2e:	1afc      	subs	r4, r7, r3
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	41bf      	sbcs	r7, r7
 8000d34:	4663      	mov	r3, ip
 8000d36:	427f      	negs	r7, r7
 8000d38:	1ac9      	subs	r1, r1, r3
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	4699      	mov	r9, r3
 8000d3e:	465d      	mov	r5, fp
 8000d40:	e576      	b.n	8000830 <__aeabi_dsub+0x104>
 8000d42:	08ff      	lsrs	r7, r7, #3
 8000d44:	074b      	lsls	r3, r1, #29
 8000d46:	433b      	orrs	r3, r7
 8000d48:	08cc      	lsrs	r4, r1, #3
 8000d4a:	e667      	b.n	8000a1c <__aeabi_dsub+0x2f0>
 8000d4c:	000a      	movs	r2, r1
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	433a      	orrs	r2, r7
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dsub+0x62a>
 8000d54:	e66f      	b.n	8000a36 <__aeabi_dsub+0x30a>
 8000d56:	4662      	mov	r2, ip
 8000d58:	0752      	lsls	r2, r2, #29
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	4662      	mov	r2, ip
 8000d5e:	08d4      	lsrs	r4, r2, #3
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	0312      	lsls	r2, r2, #12
 8000d64:	4214      	tst	r4, r2
 8000d66:	d007      	beq.n	8000d78 <__aeabi_dsub+0x64c>
 8000d68:	08c8      	lsrs	r0, r1, #3
 8000d6a:	4210      	tst	r0, r2
 8000d6c:	d104      	bne.n	8000d78 <__aeabi_dsub+0x64c>
 8000d6e:	465d      	mov	r5, fp
 8000d70:	0004      	movs	r4, r0
 8000d72:	08fb      	lsrs	r3, r7, #3
 8000d74:	0749      	lsls	r1, r1, #29
 8000d76:	430b      	orrs	r3, r1
 8000d78:	0f5a      	lsrs	r2, r3, #29
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	0752      	lsls	r2, r2, #29
 8000d80:	4313      	orrs	r3, r2
 8000d82:	e65d      	b.n	8000a40 <__aeabi_dsub+0x314>
 8000d84:	074b      	lsls	r3, r1, #29
 8000d86:	08ff      	lsrs	r7, r7, #3
 8000d88:	433b      	orrs	r3, r7
 8000d8a:	08cc      	lsrs	r4, r1, #3
 8000d8c:	e649      	b.n	8000a22 <__aeabi_dsub+0x2f6>
 8000d8e:	19dc      	adds	r4, r3, r7
 8000d90:	429c      	cmp	r4, r3
 8000d92:	419b      	sbcs	r3, r3
 8000d94:	4461      	add	r1, ip
 8000d96:	4689      	mov	r9, r1
 8000d98:	425b      	negs	r3, r3
 8000d9a:	4499      	add	r9, r3
 8000d9c:	464b      	mov	r3, r9
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	d400      	bmi.n	8000da4 <__aeabi_dsub+0x678>
 8000da2:	e631      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 8000da4:	464a      	mov	r2, r9
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <__aeabi_dsub+0x6d8>)
 8000da8:	401a      	ands	r2, r3
 8000daa:	2301      	movs	r3, #1
 8000dac:	4691      	mov	r9, r2
 8000dae:	4698      	mov	r8, r3
 8000db0:	e62a      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 8000db2:	0016      	movs	r6, r2
 8000db4:	4664      	mov	r4, ip
 8000db6:	3e20      	subs	r6, #32
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	46a0      	mov	r8, r4
 8000dbc:	2a20      	cmp	r2, #32
 8000dbe:	d005      	beq.n	8000dcc <__aeabi_dsub+0x6a0>
 8000dc0:	2640      	movs	r6, #64	; 0x40
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	1ab2      	subs	r2, r6, r2
 8000dc6:	4094      	lsls	r4, r2
 8000dc8:	4323      	orrs	r3, r4
 8000dca:	469a      	mov	sl, r3
 8000dcc:	4654      	mov	r4, sl
 8000dce:	1e63      	subs	r3, r4, #1
 8000dd0:	419c      	sbcs	r4, r3
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	e5db      	b.n	8000990 <__aeabi_dsub+0x264>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	2400      	movs	r4, #0
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e548      	b.n	8000872 <__aeabi_dsub+0x146>
 8000de0:	19dc      	adds	r4, r3, r7
 8000de2:	42bc      	cmp	r4, r7
 8000de4:	41bf      	sbcs	r7, r7
 8000de6:	4461      	add	r1, ip
 8000de8:	4689      	mov	r9, r1
 8000dea:	427f      	negs	r7, r7
 8000dec:	44b9      	add	r9, r7
 8000dee:	e738      	b.n	8000c62 <__aeabi_dsub+0x536>
 8000df0:	464b      	mov	r3, r9
 8000df2:	4323      	orrs	r3, r4
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dsub+0x6cc>
 8000df6:	e69f      	b.n	8000b38 <__aeabi_dsub+0x40c>
 8000df8:	e606      	b.n	8000a08 <__aeabi_dsub+0x2dc>
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	000007fe 	.word	0x000007fe
 8000e00:	000007ff 	.word	0x000007ff
 8000e04:	ff7fffff 	.word	0xff7fffff
 8000e08:	08ff      	lsrs	r7, r7, #3
 8000e0a:	074b      	lsls	r3, r1, #29
 8000e0c:	433b      	orrs	r3, r7
 8000e0e:	08cc      	lsrs	r4, r1, #3
 8000e10:	e616      	b.n	8000a40 <__aeabi_dsub+0x314>
 8000e12:	4662      	mov	r2, ip
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	0752      	lsls	r2, r2, #29
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	08d4      	lsrs	r4, r2, #3
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	0312      	lsls	r2, r2, #12
 8000e22:	4214      	tst	r4, r2
 8000e24:	d007      	beq.n	8000e36 <__aeabi_dsub+0x70a>
 8000e26:	08c8      	lsrs	r0, r1, #3
 8000e28:	4210      	tst	r0, r2
 8000e2a:	d104      	bne.n	8000e36 <__aeabi_dsub+0x70a>
 8000e2c:	465d      	mov	r5, fp
 8000e2e:	0004      	movs	r4, r0
 8000e30:	08fb      	lsrs	r3, r7, #3
 8000e32:	0749      	lsls	r1, r1, #29
 8000e34:	430b      	orrs	r3, r1
 8000e36:	0f5a      	lsrs	r2, r3, #29
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	0752      	lsls	r2, r2, #29
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	e5fe      	b.n	8000a40 <__aeabi_dsub+0x314>
 8000e42:	2300      	movs	r3, #0
 8000e44:	4a01      	ldr	r2, [pc, #4]	; (8000e4c <__aeabi_dsub+0x720>)
 8000e46:	001c      	movs	r4, r3
 8000e48:	e513      	b.n	8000872 <__aeabi_dsub+0x146>
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	000007ff 	.word	0x000007ff

08000e50 <__aeabi_d2iz>:
 8000e50:	000a      	movs	r2, r1
 8000e52:	b530      	push	{r4, r5, lr}
 8000e54:	4c13      	ldr	r4, [pc, #76]	; (8000ea4 <__aeabi_d2iz+0x54>)
 8000e56:	0053      	lsls	r3, r2, #1
 8000e58:	0309      	lsls	r1, r1, #12
 8000e5a:	0005      	movs	r5, r0
 8000e5c:	0b09      	lsrs	r1, r1, #12
 8000e5e:	2000      	movs	r0, #0
 8000e60:	0d5b      	lsrs	r3, r3, #21
 8000e62:	0fd2      	lsrs	r2, r2, #31
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	dd04      	ble.n	8000e72 <__aeabi_d2iz+0x22>
 8000e68:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <__aeabi_d2iz+0x58>)
 8000e6a:	4283      	cmp	r3, r0
 8000e6c:	dd02      	ble.n	8000e74 <__aeabi_d2iz+0x24>
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <__aeabi_d2iz+0x5c>)
 8000e70:	18d0      	adds	r0, r2, r3
 8000e72:	bd30      	pop	{r4, r5, pc}
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	0340      	lsls	r0, r0, #13
 8000e78:	4301      	orrs	r1, r0
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <__aeabi_d2iz+0x60>)
 8000e7c:	1ac0      	subs	r0, r0, r3
 8000e7e:	281f      	cmp	r0, #31
 8000e80:	dd08      	ble.n	8000e94 <__aeabi_d2iz+0x44>
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <__aeabi_d2iz+0x64>)
 8000e84:	1ac3      	subs	r3, r0, r3
 8000e86:	40d9      	lsrs	r1, r3
 8000e88:	000b      	movs	r3, r1
 8000e8a:	4258      	negs	r0, r3
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	d1f0      	bne.n	8000e72 <__aeabi_d2iz+0x22>
 8000e90:	0018      	movs	r0, r3
 8000e92:	e7ee      	b.n	8000e72 <__aeabi_d2iz+0x22>
 8000e94:	4c08      	ldr	r4, [pc, #32]	; (8000eb8 <__aeabi_d2iz+0x68>)
 8000e96:	40c5      	lsrs	r5, r0
 8000e98:	46a4      	mov	ip, r4
 8000e9a:	4463      	add	r3, ip
 8000e9c:	4099      	lsls	r1, r3
 8000e9e:	000b      	movs	r3, r1
 8000ea0:	432b      	orrs	r3, r5
 8000ea2:	e7f2      	b.n	8000e8a <__aeabi_d2iz+0x3a>
 8000ea4:	000003fe 	.word	0x000003fe
 8000ea8:	0000041d 	.word	0x0000041d
 8000eac:	7fffffff 	.word	0x7fffffff
 8000eb0:	00000433 	.word	0x00000433
 8000eb4:	00000413 	.word	0x00000413
 8000eb8:	fffffbed 	.word	0xfffffbed

08000ebc <__aeabi_i2d>:
 8000ebc:	b570      	push	{r4, r5, r6, lr}
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d016      	beq.n	8000ef0 <__aeabi_i2d+0x34>
 8000ec2:	17c3      	asrs	r3, r0, #31
 8000ec4:	18c5      	adds	r5, r0, r3
 8000ec6:	405d      	eors	r5, r3
 8000ec8:	0fc4      	lsrs	r4, r0, #31
 8000eca:	0028      	movs	r0, r5
 8000ecc:	f000 f864 	bl	8000f98 <__clzsi2>
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <__aeabi_i2d+0x5c>)
 8000ed2:	1a12      	subs	r2, r2, r0
 8000ed4:	280a      	cmp	r0, #10
 8000ed6:	dc16      	bgt.n	8000f06 <__aeabi_i2d+0x4a>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	002e      	movs	r6, r5
 8000edc:	3315      	adds	r3, #21
 8000ede:	409e      	lsls	r6, r3
 8000ee0:	230b      	movs	r3, #11
 8000ee2:	1a18      	subs	r0, r3, r0
 8000ee4:	40c5      	lsrs	r5, r0
 8000ee6:	0552      	lsls	r2, r2, #21
 8000ee8:	032d      	lsls	r5, r5, #12
 8000eea:	0b2d      	lsrs	r5, r5, #12
 8000eec:	0d53      	lsrs	r3, r2, #21
 8000eee:	e003      	b.n	8000ef8 <__aeabi_i2d+0x3c>
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	051b      	lsls	r3, r3, #20
 8000efa:	432b      	orrs	r3, r5
 8000efc:	07e4      	lsls	r4, r4, #31
 8000efe:	4323      	orrs	r3, r4
 8000f00:	0030      	movs	r0, r6
 8000f02:	0019      	movs	r1, r3
 8000f04:	bd70      	pop	{r4, r5, r6, pc}
 8000f06:	380b      	subs	r0, #11
 8000f08:	4085      	lsls	r5, r0
 8000f0a:	0552      	lsls	r2, r2, #21
 8000f0c:	032d      	lsls	r5, r5, #12
 8000f0e:	2600      	movs	r6, #0
 8000f10:	0b2d      	lsrs	r5, r5, #12
 8000f12:	0d53      	lsrs	r3, r2, #21
 8000f14:	e7f0      	b.n	8000ef8 <__aeabi_i2d+0x3c>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	0000041e 	.word	0x0000041e

08000f1c <__aeabi_cdrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	0010      	movs	r0, r2
 8000f20:	4662      	mov	r2, ip
 8000f22:	468c      	mov	ip, r1
 8000f24:	0019      	movs	r1, r3
 8000f26:	4663      	mov	r3, ip
 8000f28:	e000      	b.n	8000f2c <__aeabi_cdcmpeq>
 8000f2a:	46c0      	nop			; (mov r8, r8)

08000f2c <__aeabi_cdcmpeq>:
 8000f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f2e:	f000 f8f9 	bl	8001124 <__ledf2>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d401      	bmi.n	8000f3a <__aeabi_cdcmpeq+0xe>
 8000f36:	2100      	movs	r1, #0
 8000f38:	42c8      	cmn	r0, r1
 8000f3a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f3c <__aeabi_dcmpeq>:
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	f000 f849 	bl	8000fd4 <__eqdf2>
 8000f42:	4240      	negs	r0, r0
 8000f44:	3001      	adds	r0, #1
 8000f46:	bd10      	pop	{r4, pc}

08000f48 <__aeabi_dcmplt>:
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	f000 f8eb 	bl	8001124 <__ledf2>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	db01      	blt.n	8000f56 <__aeabi_dcmplt+0xe>
 8000f52:	2000      	movs	r0, #0
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	2001      	movs	r0, #1
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)

08000f5c <__aeabi_dcmple>:
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	f000 f8e1 	bl	8001124 <__ledf2>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	dd01      	ble.n	8000f6a <__aeabi_dcmple+0xe>
 8000f66:	2000      	movs	r0, #0
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)

08000f70 <__aeabi_dcmpgt>:
 8000f70:	b510      	push	{r4, lr}
 8000f72:	f000 f871 	bl	8001058 <__gedf2>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	dc01      	bgt.n	8000f7e <__aeabi_dcmpgt+0xe>
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	2001      	movs	r0, #1
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)

08000f84 <__aeabi_dcmpge>:
 8000f84:	b510      	push	{r4, lr}
 8000f86:	f000 f867 	bl	8001058 <__gedf2>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	da01      	bge.n	8000f92 <__aeabi_dcmpge+0xe>
 8000f8e:	2000      	movs	r0, #0
 8000f90:	bd10      	pop	{r4, pc}
 8000f92:	2001      	movs	r0, #1
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)

08000f98 <__clzsi2>:
 8000f98:	211c      	movs	r1, #28
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d301      	bcc.n	8000fa6 <__clzsi2+0xe>
 8000fa2:	0c00      	lsrs	r0, r0, #16
 8000fa4:	3910      	subs	r1, #16
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	d301      	bcc.n	8000fb0 <__clzsi2+0x18>
 8000fac:	0a00      	lsrs	r0, r0, #8
 8000fae:	3908      	subs	r1, #8
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	4298      	cmp	r0, r3
 8000fb4:	d301      	bcc.n	8000fba <__clzsi2+0x22>
 8000fb6:	0900      	lsrs	r0, r0, #4
 8000fb8:	3904      	subs	r1, #4
 8000fba:	a202      	add	r2, pc, #8	; (adr r2, 8000fc4 <__clzsi2+0x2c>)
 8000fbc:	5c10      	ldrb	r0, [r2, r0]
 8000fbe:	1840      	adds	r0, r0, r1
 8000fc0:	4770      	bx	lr
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	02020304 	.word	0x02020304
 8000fc8:	01010101 	.word	0x01010101
	...

08000fd4 <__eqdf2>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	464e      	mov	r6, r9
 8000fd8:	4645      	mov	r5, r8
 8000fda:	46de      	mov	lr, fp
 8000fdc:	4657      	mov	r7, sl
 8000fde:	4690      	mov	r8, r2
 8000fe0:	b5e0      	push	{r5, r6, r7, lr}
 8000fe2:	0017      	movs	r7, r2
 8000fe4:	031a      	lsls	r2, r3, #12
 8000fe6:	0b12      	lsrs	r2, r2, #12
 8000fe8:	0005      	movs	r5, r0
 8000fea:	4684      	mov	ip, r0
 8000fec:	4819      	ldr	r0, [pc, #100]	; (8001054 <__eqdf2+0x80>)
 8000fee:	030e      	lsls	r6, r1, #12
 8000ff0:	004c      	lsls	r4, r1, #1
 8000ff2:	4691      	mov	r9, r2
 8000ff4:	005a      	lsls	r2, r3, #1
 8000ff6:	0fdb      	lsrs	r3, r3, #31
 8000ff8:	469b      	mov	fp, r3
 8000ffa:	0b36      	lsrs	r6, r6, #12
 8000ffc:	0d64      	lsrs	r4, r4, #21
 8000ffe:	0fc9      	lsrs	r1, r1, #31
 8001000:	0d52      	lsrs	r2, r2, #21
 8001002:	4284      	cmp	r4, r0
 8001004:	d019      	beq.n	800103a <__eqdf2+0x66>
 8001006:	4282      	cmp	r2, r0
 8001008:	d010      	beq.n	800102c <__eqdf2+0x58>
 800100a:	2001      	movs	r0, #1
 800100c:	4294      	cmp	r4, r2
 800100e:	d10e      	bne.n	800102e <__eqdf2+0x5a>
 8001010:	454e      	cmp	r6, r9
 8001012:	d10c      	bne.n	800102e <__eqdf2+0x5a>
 8001014:	2001      	movs	r0, #1
 8001016:	45c4      	cmp	ip, r8
 8001018:	d109      	bne.n	800102e <__eqdf2+0x5a>
 800101a:	4559      	cmp	r1, fp
 800101c:	d017      	beq.n	800104e <__eqdf2+0x7a>
 800101e:	2c00      	cmp	r4, #0
 8001020:	d105      	bne.n	800102e <__eqdf2+0x5a>
 8001022:	0030      	movs	r0, r6
 8001024:	4328      	orrs	r0, r5
 8001026:	1e43      	subs	r3, r0, #1
 8001028:	4198      	sbcs	r0, r3
 800102a:	e000      	b.n	800102e <__eqdf2+0x5a>
 800102c:	2001      	movs	r0, #1
 800102e:	bcf0      	pop	{r4, r5, r6, r7}
 8001030:	46bb      	mov	fp, r7
 8001032:	46b2      	mov	sl, r6
 8001034:	46a9      	mov	r9, r5
 8001036:	46a0      	mov	r8, r4
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103a:	0033      	movs	r3, r6
 800103c:	2001      	movs	r0, #1
 800103e:	432b      	orrs	r3, r5
 8001040:	d1f5      	bne.n	800102e <__eqdf2+0x5a>
 8001042:	42a2      	cmp	r2, r4
 8001044:	d1f3      	bne.n	800102e <__eqdf2+0x5a>
 8001046:	464b      	mov	r3, r9
 8001048:	433b      	orrs	r3, r7
 800104a:	d1f0      	bne.n	800102e <__eqdf2+0x5a>
 800104c:	e7e2      	b.n	8001014 <__eqdf2+0x40>
 800104e:	2000      	movs	r0, #0
 8001050:	e7ed      	b.n	800102e <__eqdf2+0x5a>
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	000007ff 	.word	0x000007ff

08001058 <__gedf2>:
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	4647      	mov	r7, r8
 800105c:	46ce      	mov	lr, r9
 800105e:	0004      	movs	r4, r0
 8001060:	0018      	movs	r0, r3
 8001062:	0016      	movs	r6, r2
 8001064:	031b      	lsls	r3, r3, #12
 8001066:	0b1b      	lsrs	r3, r3, #12
 8001068:	4d2d      	ldr	r5, [pc, #180]	; (8001120 <__gedf2+0xc8>)
 800106a:	004a      	lsls	r2, r1, #1
 800106c:	4699      	mov	r9, r3
 800106e:	b580      	push	{r7, lr}
 8001070:	0043      	lsls	r3, r0, #1
 8001072:	030f      	lsls	r7, r1, #12
 8001074:	46a4      	mov	ip, r4
 8001076:	46b0      	mov	r8, r6
 8001078:	0b3f      	lsrs	r7, r7, #12
 800107a:	0d52      	lsrs	r2, r2, #21
 800107c:	0fc9      	lsrs	r1, r1, #31
 800107e:	0d5b      	lsrs	r3, r3, #21
 8001080:	0fc0      	lsrs	r0, r0, #31
 8001082:	42aa      	cmp	r2, r5
 8001084:	d021      	beq.n	80010ca <__gedf2+0x72>
 8001086:	42ab      	cmp	r3, r5
 8001088:	d013      	beq.n	80010b2 <__gedf2+0x5a>
 800108a:	2a00      	cmp	r2, #0
 800108c:	d122      	bne.n	80010d4 <__gedf2+0x7c>
 800108e:	433c      	orrs	r4, r7
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <__gedf2+0x42>
 8001094:	464d      	mov	r5, r9
 8001096:	432e      	orrs	r6, r5
 8001098:	d022      	beq.n	80010e0 <__gedf2+0x88>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d010      	beq.n	80010c0 <__gedf2+0x68>
 800109e:	4281      	cmp	r1, r0
 80010a0:	d022      	beq.n	80010e8 <__gedf2+0x90>
 80010a2:	2002      	movs	r0, #2
 80010a4:	3901      	subs	r1, #1
 80010a6:	4008      	ands	r0, r1
 80010a8:	3801      	subs	r0, #1
 80010aa:	bcc0      	pop	{r6, r7}
 80010ac:	46b9      	mov	r9, r7
 80010ae:	46b0      	mov	r8, r6
 80010b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b2:	464d      	mov	r5, r9
 80010b4:	432e      	orrs	r6, r5
 80010b6:	d129      	bne.n	800110c <__gedf2+0xb4>
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d1f0      	bne.n	800109e <__gedf2+0x46>
 80010bc:	433c      	orrs	r4, r7
 80010be:	d1ee      	bne.n	800109e <__gedf2+0x46>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d1f2      	bne.n	80010aa <__gedf2+0x52>
 80010c4:	2001      	movs	r0, #1
 80010c6:	4240      	negs	r0, r0
 80010c8:	e7ef      	b.n	80010aa <__gedf2+0x52>
 80010ca:	003d      	movs	r5, r7
 80010cc:	4325      	orrs	r5, r4
 80010ce:	d11d      	bne.n	800110c <__gedf2+0xb4>
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d0ee      	beq.n	80010b2 <__gedf2+0x5a>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e2      	bne.n	800109e <__gedf2+0x46>
 80010d8:	464c      	mov	r4, r9
 80010da:	4326      	orrs	r6, r4
 80010dc:	d1df      	bne.n	800109e <__gedf2+0x46>
 80010de:	e7e0      	b.n	80010a2 <__gedf2+0x4a>
 80010e0:	2000      	movs	r0, #0
 80010e2:	2c00      	cmp	r4, #0
 80010e4:	d0e1      	beq.n	80010aa <__gedf2+0x52>
 80010e6:	e7dc      	b.n	80010a2 <__gedf2+0x4a>
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dc0a      	bgt.n	8001102 <__gedf2+0xaa>
 80010ec:	dbe8      	blt.n	80010c0 <__gedf2+0x68>
 80010ee:	454f      	cmp	r7, r9
 80010f0:	d8d7      	bhi.n	80010a2 <__gedf2+0x4a>
 80010f2:	d00e      	beq.n	8001112 <__gedf2+0xba>
 80010f4:	2000      	movs	r0, #0
 80010f6:	454f      	cmp	r7, r9
 80010f8:	d2d7      	bcs.n	80010aa <__gedf2+0x52>
 80010fa:	2900      	cmp	r1, #0
 80010fc:	d0e2      	beq.n	80010c4 <__gedf2+0x6c>
 80010fe:	0008      	movs	r0, r1
 8001100:	e7d3      	b.n	80010aa <__gedf2+0x52>
 8001102:	4243      	negs	r3, r0
 8001104:	4158      	adcs	r0, r3
 8001106:	0040      	lsls	r0, r0, #1
 8001108:	3801      	subs	r0, #1
 800110a:	e7ce      	b.n	80010aa <__gedf2+0x52>
 800110c:	2002      	movs	r0, #2
 800110e:	4240      	negs	r0, r0
 8001110:	e7cb      	b.n	80010aa <__gedf2+0x52>
 8001112:	45c4      	cmp	ip, r8
 8001114:	d8c5      	bhi.n	80010a2 <__gedf2+0x4a>
 8001116:	2000      	movs	r0, #0
 8001118:	45c4      	cmp	ip, r8
 800111a:	d2c6      	bcs.n	80010aa <__gedf2+0x52>
 800111c:	e7ed      	b.n	80010fa <__gedf2+0xa2>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff

08001124 <__ledf2>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	4647      	mov	r7, r8
 8001128:	46ce      	mov	lr, r9
 800112a:	0004      	movs	r4, r0
 800112c:	0018      	movs	r0, r3
 800112e:	0016      	movs	r6, r2
 8001130:	031b      	lsls	r3, r3, #12
 8001132:	0b1b      	lsrs	r3, r3, #12
 8001134:	4d2c      	ldr	r5, [pc, #176]	; (80011e8 <__ledf2+0xc4>)
 8001136:	004a      	lsls	r2, r1, #1
 8001138:	4699      	mov	r9, r3
 800113a:	b580      	push	{r7, lr}
 800113c:	0043      	lsls	r3, r0, #1
 800113e:	030f      	lsls	r7, r1, #12
 8001140:	46a4      	mov	ip, r4
 8001142:	46b0      	mov	r8, r6
 8001144:	0b3f      	lsrs	r7, r7, #12
 8001146:	0d52      	lsrs	r2, r2, #21
 8001148:	0fc9      	lsrs	r1, r1, #31
 800114a:	0d5b      	lsrs	r3, r3, #21
 800114c:	0fc0      	lsrs	r0, r0, #31
 800114e:	42aa      	cmp	r2, r5
 8001150:	d00d      	beq.n	800116e <__ledf2+0x4a>
 8001152:	42ab      	cmp	r3, r5
 8001154:	d010      	beq.n	8001178 <__ledf2+0x54>
 8001156:	2a00      	cmp	r2, #0
 8001158:	d127      	bne.n	80011aa <__ledf2+0x86>
 800115a:	433c      	orrs	r4, r7
 800115c:	2b00      	cmp	r3, #0
 800115e:	d111      	bne.n	8001184 <__ledf2+0x60>
 8001160:	464d      	mov	r5, r9
 8001162:	432e      	orrs	r6, r5
 8001164:	d10e      	bne.n	8001184 <__ledf2+0x60>
 8001166:	2000      	movs	r0, #0
 8001168:	2c00      	cmp	r4, #0
 800116a:	d015      	beq.n	8001198 <__ledf2+0x74>
 800116c:	e00e      	b.n	800118c <__ledf2+0x68>
 800116e:	003d      	movs	r5, r7
 8001170:	4325      	orrs	r5, r4
 8001172:	d110      	bne.n	8001196 <__ledf2+0x72>
 8001174:	4293      	cmp	r3, r2
 8001176:	d118      	bne.n	80011aa <__ledf2+0x86>
 8001178:	464d      	mov	r5, r9
 800117a:	432e      	orrs	r6, r5
 800117c:	d10b      	bne.n	8001196 <__ledf2+0x72>
 800117e:	2a00      	cmp	r2, #0
 8001180:	d102      	bne.n	8001188 <__ledf2+0x64>
 8001182:	433c      	orrs	r4, r7
 8001184:	2c00      	cmp	r4, #0
 8001186:	d00b      	beq.n	80011a0 <__ledf2+0x7c>
 8001188:	4281      	cmp	r1, r0
 800118a:	d014      	beq.n	80011b6 <__ledf2+0x92>
 800118c:	2002      	movs	r0, #2
 800118e:	3901      	subs	r1, #1
 8001190:	4008      	ands	r0, r1
 8001192:	3801      	subs	r0, #1
 8001194:	e000      	b.n	8001198 <__ledf2+0x74>
 8001196:	2002      	movs	r0, #2
 8001198:	bcc0      	pop	{r6, r7}
 800119a:	46b9      	mov	r9, r7
 800119c:	46b0      	mov	r8, r6
 800119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d1f9      	bne.n	8001198 <__ledf2+0x74>
 80011a4:	2001      	movs	r0, #1
 80011a6:	4240      	negs	r0, r0
 80011a8:	e7f6      	b.n	8001198 <__ledf2+0x74>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ec      	bne.n	8001188 <__ledf2+0x64>
 80011ae:	464c      	mov	r4, r9
 80011b0:	4326      	orrs	r6, r4
 80011b2:	d1e9      	bne.n	8001188 <__ledf2+0x64>
 80011b4:	e7ea      	b.n	800118c <__ledf2+0x68>
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dd04      	ble.n	80011c4 <__ledf2+0xa0>
 80011ba:	4243      	negs	r3, r0
 80011bc:	4158      	adcs	r0, r3
 80011be:	0040      	lsls	r0, r0, #1
 80011c0:	3801      	subs	r0, #1
 80011c2:	e7e9      	b.n	8001198 <__ledf2+0x74>
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbeb      	blt.n	80011a0 <__ledf2+0x7c>
 80011c8:	454f      	cmp	r7, r9
 80011ca:	d8df      	bhi.n	800118c <__ledf2+0x68>
 80011cc:	d006      	beq.n	80011dc <__ledf2+0xb8>
 80011ce:	2000      	movs	r0, #0
 80011d0:	454f      	cmp	r7, r9
 80011d2:	d2e1      	bcs.n	8001198 <__ledf2+0x74>
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d0e5      	beq.n	80011a4 <__ledf2+0x80>
 80011d8:	0008      	movs	r0, r1
 80011da:	e7dd      	b.n	8001198 <__ledf2+0x74>
 80011dc:	45c4      	cmp	ip, r8
 80011de:	d8d5      	bhi.n	800118c <__ledf2+0x68>
 80011e0:	2000      	movs	r0, #0
 80011e2:	45c4      	cmp	ip, r8
 80011e4:	d2d8      	bcs.n	8001198 <__ledf2+0x74>
 80011e6:	e7f5      	b.n	80011d4 <__ledf2+0xb0>
 80011e8:	000007ff 	.word	0x000007ff

080011ec <fast_loop>:


//Put this into the PWM interrupt to control the currents and disable/enable the PWM
void fast_loop(){
static int doPID;
	if((ADC_Buffer[VOUT_CH]>RAW_OVERVOLTAGE)||(ADC_Buffer[IOUT_CH]>RAW_CURR_MAX)){
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <fast_loop+0x13c>)
 80011ee:	494f      	ldr	r1, [pc, #316]	; (800132c <fast_loop+0x140>)
 80011f0:	8813      	ldrh	r3, [r2, #0]
void fast_loop(){
 80011f2:	b510      	push	{r4, lr}
	if((ADC_Buffer[VOUT_CH]>RAW_OVERVOLTAGE)||(ADC_Buffer[IOUT_CH]>RAW_CURR_MAX)){
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d846      	bhi.n	8001286 <fast_loop+0x9a>
 80011f8:	8850      	ldrh	r0, [r2, #2]
 80011fa:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <fast_loop+0x144>)
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d91a      	bls.n	8001236 <fast_loop+0x4a>
}

// Turn all phase U FETs off, Tristate the HBridge output
uint32_t tmpccmrx;  // Temporary buffer which is used to turn on/off phase PWMs
  void phU_Break() {
    tmpccmrx = htim1.Instance->CCMR1;
 8001200:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <fast_loop+0x148>)
    tmpccmrx &= ~TIM_CCMR1_OC1M;
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001202:	494d      	ldr	r1, [pc, #308]	; (8001338 <fast_loop+0x14c>)
    tmpccmrx = htim1.Instance->CCMR1;
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699a      	ldr	r2, [r3, #24]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001208:	400a      	ands	r2, r1
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	430a      	orrs	r2, r1
 800120e:	494b      	ldr	r1, [pc, #300]	; (800133c <fast_loop+0x150>)
    htim1.Instance->CCMR1 = tmpccmrx;
 8001210:	619a      	str	r2, [r3, #24]
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8001212:	600a      	str	r2, [r1, #0]
    htim1.Instance->CCER &= ~TIM_CCER_CC1E;   // disable
 8001214:	2101      	movs	r1, #1
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	438a      	bics	r2, r1
 800121a:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  // disable
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	3103      	adds	r1, #3
 8001220:	438a      	bics	r2, r1
		doPID = 0;
 8001222:	2100      	movs	r1, #0
    htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  // disable
 8001224:	621a      	str	r2, [r3, #32]
		doPID = 0;
 8001226:	4a46      	ldr	r2, [pc, #280]	; (8001340 <fast_loop+0x154>)
 8001228:	6011      	str	r1, [r2, #0]
			htim1.Instance->CCR1 = 2; //Reset the CCR so it has to ramp up
 800122a:	2202      	movs	r2, #2
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
			Overcurrent_occurred = 1;
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <fast_loop+0x158>)
 8001230:	3a01      	subs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
}
 8001234:	bd10      	pop	{r4, pc}
	}else if((ADC_Buffer[VOUT_CH]<RAW_RECOVERYVOLTAGE)||((ADC_Buffer[VOUT_CH]<RAW_OVERVOLTAGE)&&(ADC_Buffer[IOUT_CH]<RAW_CURR_MAX))){
 8001236:	4c44      	ldr	r4, [pc, #272]	; (8001348 <fast_loop+0x15c>)
 8001238:	42a3      	cmp	r3, r4
 800123a:	d93e      	bls.n	80012ba <fast_loop+0xce>
 800123c:	428b      	cmp	r3, r1
 800123e:	d06d      	beq.n	800131c <fast_loop+0x130>
 8001240:	4290      	cmp	r0, r2
 8001242:	d13a      	bne.n	80012ba <fast_loop+0xce>
	if(doPID){
 8001244:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <fast_loop+0x154>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	2a00      	cmp	r2, #0
 800124a:	d0f3      	beq.n	8001234 <fast_loop+0x48>
		if(ADC_Buffer[VOUT_CH]>RAW_SETPOINT){
 800124c:	4a3f      	ldr	r2, [pc, #252]	; (800134c <fast_loop+0x160>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d94a      	bls.n	80012e8 <fast_loop+0xfc>
			PWMout = PWMout-1;
 8001252:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <fast_loop+0x164>)
 8001254:	6811      	ldr	r1, [r2, #0]
 8001256:	3901      	subs	r1, #1
 8001258:	6011      	str	r1, [r2, #0]
			if(PWMout<20){
 800125a:	6811      	ldr	r1, [r2, #0]
 800125c:	2913      	cmp	r1, #19
 800125e:	d801      	bhi.n	8001264 <fast_loop+0x78>
				PWMout = 20;
 8001260:	2114      	movs	r1, #20
 8001262:	6011      	str	r1, [r2, #0]
			P_PWMout = ADC_Buffer[VOUT_CH]-RAW_SETPOINT;
 8001264:	493b      	ldr	r1, [pc, #236]	; (8001354 <fast_loop+0x168>)
 8001266:	468c      	mov	ip, r1
 8001268:	493b      	ldr	r1, [pc, #236]	; (8001358 <fast_loop+0x16c>)
 800126a:	4463      	add	r3, ip
 800126c:	600b      	str	r3, [r1, #0]
			if(P_PWMout>18){
 800126e:	680b      	ldr	r3, [r1, #0]
 8001270:	2b12      	cmp	r3, #18
 8001272:	d901      	bls.n	8001278 <fast_loop+0x8c>
				P_PWMout = 18;
 8001274:	2312      	movs	r3, #18
 8001276:	600b      	str	r3, [r1, #0]
			htim1.Instance->CCR1 = PWMout-P_PWMout;
 8001278:	6813      	ldr	r3, [r2, #0]
 800127a:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <fast_loop+0x148>)
 800127c:	6809      	ldr	r1, [r1, #0]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	1a5b      	subs	r3, r3, r1
 8001282:	6353      	str	r3, [r2, #52]	; 0x34
		if(ADC_Buffer[VOUT_CH]<RAW_SETPOINT){
 8001284:	e7d6      	b.n	8001234 <fast_loop+0x48>
    tmpccmrx = htim1.Instance->CCMR1;
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <fast_loop+0x148>)
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001288:	482b      	ldr	r0, [pc, #172]	; (8001338 <fast_loop+0x14c>)
    tmpccmrx = htim1.Instance->CCMR1;
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6999      	ldr	r1, [r3, #24]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 800128e:	4001      	ands	r1, r0
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8001290:	2040      	movs	r0, #64	; 0x40
 8001292:	4301      	orrs	r1, r0
 8001294:	4829      	ldr	r0, [pc, #164]	; (800133c <fast_loop+0x150>)
    htim1.Instance->CCMR1 = tmpccmrx;
 8001296:	6199      	str	r1, [r3, #24]
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8001298:	6001      	str	r1, [r0, #0]
    htim1.Instance->CCER &= ~TIM_CCER_CC1E;   // disable
 800129a:	2001      	movs	r0, #1
 800129c:	6a19      	ldr	r1, [r3, #32]
 800129e:	4381      	bics	r1, r0
 80012a0:	6219      	str	r1, [r3, #32]
    htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  // disable
 80012a2:	6a19      	ldr	r1, [r3, #32]
 80012a4:	3003      	adds	r0, #3
 80012a6:	4381      	bics	r1, r0
		doPID = 0;
 80012a8:	2000      	movs	r0, #0
    htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  // disable
 80012aa:	6219      	str	r1, [r3, #32]
		doPID = 0;
 80012ac:	4924      	ldr	r1, [pc, #144]	; (8001340 <fast_loop+0x154>)
 80012ae:	6008      	str	r0, [r1, #0]
		if((ADC_Buffer[IOUT_CH]>RAW_CURR_MAX)){//We have an overcurrent event...
 80012b0:	8852      	ldrh	r2, [r2, #2]
 80012b2:	491f      	ldr	r1, [pc, #124]	; (8001330 <fast_loop+0x144>)
 80012b4:	428a      	cmp	r2, r1
 80012b6:	d9bd      	bls.n	8001234 <fast_loop+0x48>
 80012b8:	e7b7      	b.n	800122a <fast_loop+0x3e>
  }
  // Basically un-break phase U, opposite of above...
  void phU_Enable() {
    tmpccmrx = htim1.Instance->CCMR1;
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <fast_loop+0x148>)
    tmpccmrx &= ~TIM_CCMR1_OC1M;
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 80012bc:	481e      	ldr	r0, [pc, #120]	; (8001338 <fast_loop+0x14c>)
    tmpccmrx = htim1.Instance->CCMR1;
 80012be:	6812      	ldr	r2, [r2, #0]
    tmpccmrx |= TIM_OCMODE_PWM1;
    htim1.Instance->CCMR1 = tmpccmrx;
    htim1.Instance->CCER |= TIM_CCER_CC1E;   // enable
    htim1.Instance->CCER |= TIM_CCER_CC1NE;  // enable
 80012c0:	2404      	movs	r4, #4
    tmpccmrx = htim1.Instance->CCMR1;
 80012c2:	6991      	ldr	r1, [r2, #24]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 80012c4:	4001      	ands	r1, r0
    tmpccmrx |= TIM_OCMODE_PWM1;
 80012c6:	2060      	movs	r0, #96	; 0x60
 80012c8:	4301      	orrs	r1, r0
 80012ca:	481c      	ldr	r0, [pc, #112]	; (800133c <fast_loop+0x150>)
    htim1.Instance->CCMR1 = tmpccmrx;
 80012cc:	6191      	str	r1, [r2, #24]
    tmpccmrx |= TIM_OCMODE_PWM1;
 80012ce:	6001      	str	r1, [r0, #0]
    htim1.Instance->CCER |= TIM_CCER_CC1E;   // enable
 80012d0:	2001      	movs	r0, #1
 80012d2:	6a11      	ldr	r1, [r2, #32]
 80012d4:	4301      	orrs	r1, r0
 80012d6:	6211      	str	r1, [r2, #32]
    htim1.Instance->CCER |= TIM_CCER_CC1NE;  // enable
 80012d8:	6a11      	ldr	r1, [r2, #32]
 80012da:	4321      	orrs	r1, r4
 80012dc:	6211      	str	r1, [r2, #32]
		doPID = 1;
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <fast_loop+0x154>)
 80012e0:	6010      	str	r0, [r2, #0]
		if(ADC_Buffer[VOUT_CH]>RAW_SETPOINT){
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <fast_loop+0x160>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d8b4      	bhi.n	8001252 <fast_loop+0x66>
		if(ADC_Buffer[VOUT_CH]<RAW_SETPOINT){
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0a3      	beq.n	8001234 <fast_loop+0x48>
			PWMout = PWMout+1;
 80012ec:	4a18      	ldr	r2, [pc, #96]	; (8001350 <fast_loop+0x164>)
 80012ee:	6813      	ldr	r3, [r2, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	6013      	str	r3, [r2, #0]
			if(PWMout>PWM_FF_lim){
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <fast_loop+0x170>)
 80012f6:	6810      	ldr	r0, [r2, #0]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	4288      	cmp	r0, r1
 80012fc:	d901      	bls.n	8001302 <fast_loop+0x116>
				PWMout = PWM_FF_lim;
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6013      	str	r3, [r2, #0]
			if(P_PWMout>18){
 8001302:	4915      	ldr	r1, [pc, #84]	; (8001358 <fast_loop+0x16c>)
 8001304:	680b      	ldr	r3, [r1, #0]
 8001306:	2b12      	cmp	r3, #18
 8001308:	d901      	bls.n	800130e <fast_loop+0x122>
				P_PWMout = 18;
 800130a:	2312      	movs	r3, #18
 800130c:	600b      	str	r3, [r1, #0]
			htim1.Instance->CCR1 = PWMout+ P_PWMout;
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <fast_loop+0x148>)
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	185b      	adds	r3, r3, r1
 8001318:	6353      	str	r3, [r2, #52]	; 0x34
}
 800131a:	e78b      	b.n	8001234 <fast_loop+0x48>
	if(doPID){
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <fast_loop+0x154>)
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	2a00      	cmp	r2, #0
 8001322:	d196      	bne.n	8001252 <fast_loop+0x66>
 8001324:	e786      	b.n	8001234 <fast_loop+0x48>
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000054 	.word	0x20000054
 800132c:	00000a8c 	.word	0x00000a8c
 8001330:	0000041a 	.word	0x0000041a
 8001334:	2000011c 	.word	0x2000011c
 8001338:	fffeff8c 	.word	0xfffeff8c
 800133c:	20000050 	.word	0x20000050
 8001340:	2000004c 	.word	0x2000004c
 8001344:	20000038 	.word	0x20000038
 8001348:	00000a27 	.word	0x00000a27
 800134c:	00000a5a 	.word	0x00000a5a
 8001350:	20000044 	.word	0x20000044
 8001354:	fffff5a6 	.word	0xfffff5a6
 8001358:	20000048 	.word	0x20000048
 800135c:	20000040 	.word	0x20000040

08001360 <whileoneloop>:
void whileoneloop(){
 8001360:	b570      	push	{r4, r5, r6, lr}
  	Converted_ADC[VOUT_CH] = ADC_Buffer[VOUT_CH]*MICROVOLTSOUTPERCOUNT;
 8001362:	4d1f      	ldr	r5, [pc, #124]	; (80013e0 <whileoneloop+0x80>)
 8001364:	4c1f      	ldr	r4, [pc, #124]	; (80013e4 <whileoneloop+0x84>)
 8001366:	882a      	ldrh	r2, [r5, #0]
  	Converted_ADC[IOUT_CH] = ADC_Buffer[IOUT_CH]*MICROAMPSPERCOUNT;
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <whileoneloop+0x88>)
  	Converted_ADC[VOUT_CH] = ADC_Buffer[VOUT_CH]*MICROVOLTSOUTPERCOUNT;
 800136a:	0193      	lsls	r3, r2, #6
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	6023      	str	r3, [r4, #0]
  	Converted_ADC[IOUT_CH] = ADC_Buffer[IOUT_CH]*MICROAMPSPERCOUNT;
 8001376:	886b      	ldrh	r3, [r5, #2]
 8001378:	4358      	muls	r0, r3
 800137a:	f7ff fd9f 	bl	8000ebc <__aeabi_i2d>
 800137e:	23fd      	movs	r3, #253	; 0xfd
 8001380:	2200      	movs	r2, #0
 8001382:	059b      	lsls	r3, r3, #22
 8001384:	f7fe ff66 	bl	8000254 <__aeabi_dmul>
 8001388:	f7fe ff46 	bl	8000218 <__aeabi_d2uiz>
 800138c:	6060      	str	r0, [r4, #4]
  	Converted_ADC[VIN_CH] = ADC_Buffer[VIN_CH]*MICROVOLTSINPERCOUNT;
 800138e:	88aa      	ldrh	r2, [r5, #4]
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <whileoneloop+0x8c>)
 8001392:	4353      	muls	r3, r2
 8001394:	60a3      	str	r3, [r4, #8]
  	PWM_FF = (htim1.Instance->ARR*(Converted_ADC[VOUT_CH]>>4))/(Converted_ADC[VIN_CH]>>4);
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <whileoneloop+0x90>)
 8001398:	681d      	ldr	r5, [r3, #0]
 800139a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	68a1      	ldr	r1, [r4, #8]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	4358      	muls	r0, r3
 80013a4:	0909      	lsrs	r1, r1, #4
 80013a6:	f7fe feab 	bl	8000100 <__udivsi3>
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <whileoneloop+0x94>)
 80013ac:	6018      	str	r0, [r3, #0]
  	PWM_FF_lim = (htim1.Instance->ARR*((SETPOINT*1000000)>>4))/(Converted_ADC[VIN_CH]>>4)+100;
 80013ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <whileoneloop+0x98>)
 80013b2:	68a1      	ldr	r1, [r4, #8]
 80013b4:	4358      	muls	r0, r3
 80013b6:	0909      	lsrs	r1, r1, #4
 80013b8:	f7fe fea2 	bl	8000100 <__udivsi3>
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <whileoneloop+0x9c>)
 80013be:	3064      	adds	r0, #100	; 0x64
 80013c0:	6018      	str	r0, [r3, #0]
  	if(PWM_FF_lim>htim1.Instance->ARR-100){
 80013c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	3a64      	subs	r2, #100	; 0x64
 80013c8:	428a      	cmp	r2, r1
 80013ca:	d202      	bcs.n	80013d2 <whileoneloop+0x72>
  		PWM_FF_lim=htim1.Instance->ARR-100;
 80013cc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80013ce:	3a64      	subs	r2, #100	; 0x64
 80013d0:	601a      	str	r2, [r3, #0]
  	if(PWM_FF_lim<100){
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2a63      	cmp	r2, #99	; 0x63
 80013d6:	d801      	bhi.n	80013dc <whileoneloop+0x7c>
  		PWM_FF_lim=100;
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	20000054 	.word	0x20000054
 80013e4:	20000028 	.word	0x20000028
 80013e8:	00325aa0 	.word	0x00325aa0
 80013ec:	00013ddc 	.word	0x00013ddc
 80013f0:	2000011c 	.word	0x2000011c
 80013f4:	2000003c 	.word	0x2000003c
 80013f8:	000b71b0 	.word	0x000b71b0
 80013fc:	20000040 	.word	0x20000040

08001400 <phU_Break>:
    tmpccmrx = htim1.Instance->CCMR1;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <phU_Break+0x28>)
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <phU_Break+0x2c>)
    tmpccmrx = htim1.Instance->CCMR1;
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699a      	ldr	r2, [r3, #24]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001408:	400a      	ands	r2, r1
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	430a      	orrs	r2, r1
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <phU_Break+0x30>)
    htim1.Instance->CCMR1 = tmpccmrx;
 8001410:	619a      	str	r2, [r3, #24]
    tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 8001412:	600a      	str	r2, [r1, #0]
    htim1.Instance->CCER &= ~TIM_CCER_CC1E;   // disable
 8001414:	2101      	movs	r1, #1
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	438a      	bics	r2, r1
 800141a:	621a      	str	r2, [r3, #32]
    htim1.Instance->CCER &= ~TIM_CCER_CC1NE;  // disable
 800141c:	6a1a      	ldr	r2, [r3, #32]
 800141e:	3103      	adds	r1, #3
 8001420:	438a      	bics	r2, r1
 8001422:	621a      	str	r2, [r3, #32]
  }
 8001424:	4770      	bx	lr
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	2000011c 	.word	0x2000011c
 800142c:	fffeff8c 	.word	0xfffeff8c
 8001430:	20000050 	.word	0x20000050

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b510      	push	{r4, lr}
 8001436:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001438:	2234      	movs	r2, #52	; 0x34
 800143a:	2100      	movs	r1, #0
 800143c:	a805      	add	r0, sp, #20
 800143e:	f002 fa8f 	bl	8003960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001442:	2210      	movs	r2, #16
 8001444:	2100      	movs	r1, #0
 8001446:	a801      	add	r0, sp, #4
 8001448:	f002 fa8a 	bl	8003960 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	0080      	lsls	r0, r0, #2
 8001450:	f001 fa42 	bl	80028d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800145e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001460:	3308      	adds	r3, #8
 8001462:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146e:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001470:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001474:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001478:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800147c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f001 fa95 	bl	80029ac <HAL_RCC_OscConfig>
 8001482:	2800      	cmp	r0, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001486:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001490:	2102      	movs	r1, #2
 8001492:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001498:	f001 fcf0 	bl	8002e7c <HAL_RCC_ClockConfig>
 800149c:	2800      	cmp	r0, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x70>
 80014a0:	b672      	cpsid	i
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <SystemClock_Config+0x6e>
}
 80014a4:	b012      	add	sp, #72	; 0x48
 80014a6:	bd10      	pop	{r4, pc}

080014a8 <main>:
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2501      	movs	r5, #1
{
 80014ac:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 80014ae:	f000 fa49 	bl	8001944 <HAL_Init>
  SystemClock_Config();
 80014b2:	f7ff ffbf 	bl	8001434 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b73      	ldr	r3, [pc, #460]	; (8001684 <main+0x1dc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b8:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 80014bc:	a80d      	add	r0, sp, #52	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	432a      	orrs	r2, r5
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014c4:	2608      	movs	r6, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	402a      	ands	r2, r5
 80014c8:	9202      	str	r2, [sp, #8]
 80014ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 4;
 80014ce:	2704      	movs	r7, #4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d0:	432a      	orrs	r2, r5
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d8:	402b      	ands	r3, r5
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014de:	f002 fa3f 	bl	8003960 <memset>
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e2:	2280      	movs	r2, #128	; 0x80
  hadc1.Instance = ADC1;
 80014e4:	4c68      	ldr	r4, [pc, #416]	; (8001688 <main+0x1e0>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e6:	0392      	lsls	r2, r2, #14
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e8:	2120      	movs	r1, #32
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ea:	6122      	str	r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ec:	2200      	movs	r2, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ee:	5462      	strb	r2, [r4, r1]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 80014f0:	2188      	movs	r1, #136	; 0x88
  hadc1.Instance = ADC1;
 80014f2:	4b66      	ldr	r3, [pc, #408]	; (800168c <main+0x1e4>)
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 80014f4:	00c9      	lsls	r1, r1, #3
  hadc1.Instance = ADC1;
 80014f6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f8:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC4;
 80014fa:	6261      	str	r1, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014fc:	3940      	subs	r1, #64	; 0x40
 80014fe:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001500:	212c      	movs	r1, #44	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001502:	05db      	lsls	r3, r3, #23
 8001504:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001506:	2300      	movs	r3, #0
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001508:	5465      	strb	r5, [r4, r1]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 800150a:	392a      	subs	r1, #42	; 0x2a
 800150c:	6361      	str	r1, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 800150e:	3101      	adds	r1, #1
 8001510:	63a1      	str	r1, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001512:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8001514:	3139      	adds	r1, #57	; 0x39
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001516:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001518:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151a:	60e3      	str	r3, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800151c:	6166      	str	r6, [r4, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151e:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.NbrOfConversion = 4;
 8001520:	61e7      	str	r7, [r4, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001522:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8001524:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001526:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001528:	f000 fa44 	bl	80019b4 <HAL_ADC_Init>
 800152c:	2800      	cmp	r0, #0
 800152e:	d001      	beq.n	8001534 <main+0x8c>
 8001530:	b672      	cpsid	i
  while (1)
 8001532:	e7fe      	b.n	8001532 <main+0x8a>
  sConfig.Channel = ADC_CHANNEL_1;
 8001534:	4b56      	ldr	r3, [pc, #344]	; (8001690 <main+0x1e8>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001536:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001538:	a90d      	add	r1, sp, #52	; 0x34
 800153a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800153c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800153e:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	f000 fc68 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8001544:	2800      	cmp	r0, #0
 8001546:	d001      	beq.n	800154c <main+0xa4>
 8001548:	b672      	cpsid	i
  while (1)
 800154a:	e7fe      	b.n	800154a <main+0xa2>
  sConfig.Channel = ADC_CHANNEL_2;
 800154c:	4b51      	ldr	r3, [pc, #324]	; (8001694 <main+0x1ec>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	0020      	movs	r0, r4
 8001550:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Channel = ADC_CHANNEL_2;
 8001552:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001554:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	f000 fc5d 	bl	8001e14 <HAL_ADC_ConfigChannel>
 800155a:	2800      	cmp	r0, #0
 800155c:	d001      	beq.n	8001562 <main+0xba>
 800155e:	b672      	cpsid	i
  while (1)
 8001560:	e7fe      	b.n	8001560 <main+0xb8>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001562:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <main+0x1f0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001566:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001568:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156a:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800156c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	f000 fc51 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8001572:	1e07      	subs	r7, r0, #0
 8001574:	d001      	beq.n	800157a <main+0xd2>
 8001576:	b672      	cpsid	i
  while (1)
 8001578:	e7fe      	b.n	8001578 <main+0xd0>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	0001      	movs	r1, r0
 800157c:	220c      	movs	r2, #12
 800157e:	a803      	add	r0, sp, #12
 8001580:	f002 f9ee 	bl	8003960 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001584:	221c      	movs	r2, #28
 8001586:	0039      	movs	r1, r7
 8001588:	a806      	add	r0, sp, #24
 800158a:	f002 f9e9 	bl	8003960 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800158e:	2234      	movs	r2, #52	; 0x34
 8001590:	0039      	movs	r1, r7
 8001592:	a80d      	add	r0, sp, #52	; 0x34
 8001594:	f002 f9e4 	bl	8003960 <memset>
  htim1.Instance = TIM1;
 8001598:	4d40      	ldr	r5, [pc, #256]	; (800169c <main+0x1f4>)
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <main+0x1f8>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800159c:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 800159e:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 640;
 80015a0:	23a0      	movs	r3, #160	; 0xa0
 80015a2:	009b      	lsls	r3, r3, #2
  htim1.Init.Prescaler = 0;
 80015a4:	606f      	str	r7, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	60af      	str	r7, [r5, #8]
  htim1.Init.Period = 640;
 80015a8:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	612f      	str	r7, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ac:	616f      	str	r7, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b0:	f001 ffd0 	bl	8003554 <HAL_TIM_PWM_Init>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d001      	beq.n	80015bc <main+0x114>
 80015b8:	b672      	cpsid	i
  while (1)
 80015ba:	e7fe      	b.n	80015ba <main+0x112>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80015bc:	2370      	movs	r3, #112	; 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015be:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c2:	a903      	add	r1, sp, #12
 80015c4:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80015c6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c8:	f002 f910 	bl	80037ec <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	1e02      	subs	r2, r0, #0
 80015ce:	d001      	beq.n	80015d4 <main+0x12c>
 80015d0:	b672      	cpsid	i
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <main+0x12a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80015d6:	9007      	str	r0, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d8:	9008      	str	r0, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015da:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015dc:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015de:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e0:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	a906      	add	r1, sp, #24
 80015e4:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e6:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	f002 f820 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d001      	beq.n	80015f4 <main+0x14c>
 80015f0:	b672      	cpsid	i
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <main+0x14a>
  sConfigOC.Pulse = 500;
 80015f4:	23fa      	movs	r3, #250	; 0xfa
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f6:	220c      	movs	r2, #12
  sConfigOC.Pulse = 500;
 80015f8:	005b      	lsls	r3, r3, #1
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015fa:	0028      	movs	r0, r5
 80015fc:	a906      	add	r1, sp, #24
  sConfigOC.Pulse = 500;
 80015fe:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001600:	f002 f814 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8001604:	2800      	cmp	r0, #0
 8001606:	d001      	beq.n	800160c <main+0x164>
 8001608:	b672      	cpsid	i
  while (1)
 800160a:	e7fe      	b.n	800160a <main+0x162>
  sBreakDeadTimeConfig.DeadTime = 20;
 800160c:	2314      	movs	r3, #20
 800160e:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	019b      	lsls	r3, r3, #6
 8001614:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001616:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001618:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800161a:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800161c:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161e:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001620:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001622:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001624:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001626:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001628:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800162a:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162c:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162e:	a90d      	add	r1, sp, #52	; 0x34
 8001630:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001632:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001634:	f002 f910 	bl	8003858 <HAL_TIMEx_ConfigBreakDeadTime>
 8001638:	1e07      	subs	r7, r0, #0
 800163a:	d001      	beq.n	8001640 <main+0x198>
 800163c:	b672      	cpsid	i
  while (1)
 800163e:	e7fe      	b.n	800163e <main+0x196>
  HAL_TIM_MspPostInit(&htim1);
 8001640:	0028      	movs	r0, r5
 8001642:	f000 f8d9 	bl	80017f8 <HAL_TIM_MspPostInit>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001646:	0020      	movs	r0, r4
 8001648:	f000 fe22 	bl	8002290 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(5);
 800164c:	2005      	movs	r0, #5
 800164e:	f000 f99f 	bl	8001990 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 4);
 8001652:	2204      	movs	r2, #4
 8001654:	4913      	ldr	r1, [pc, #76]	; (80016a4 <main+0x1fc>)
 8001656:	0020      	movs	r0, r4
 8001658:	f000 fd7c 	bl	8002154 <HAL_ADC_Start_DMA>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800165c:	0039      	movs	r1, r7
 800165e:	0028      	movs	r0, r5
 8001660:	f001 ff2e 	bl	80034c0 <HAL_TIM_PWM_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001664:	0039      	movs	r1, r7
 8001666:	0028      	movs	r0, r5
 8001668:	f002 f8bc 	bl	80037e4 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800166c:	210c      	movs	r1, #12
 800166e:	0028      	movs	r0, r5
 8001670:	f001 ff26 	bl	80034c0 <HAL_TIM_PWM_Start>
__HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_EOS);
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4316      	orrs	r6, r2
 800167a:	605e      	str	r6, [r3, #4]
whileoneloop();
 800167c:	f7ff fe70 	bl	8001360 <whileoneloop>
  while (1)
 8001680:	e7fc      	b.n	800167c <main+0x1d4>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40021000 	.word	0x40021000
 8001688:	2000005c 	.word	0x2000005c
 800168c:	40012400 	.word	0x40012400
 8001690:	04000002 	.word	0x04000002
 8001694:	08000004 	.word	0x08000004
 8001698:	b0001000 	.word	0xb0001000
 800169c:	2000011c 	.word	0x2000011c
 80016a0:	40012c00 	.word	0x40012c00
 80016a4:	20000054 	.word	0x20000054

080016a8 <Error_Handler>:
 80016a8:	b672      	cpsid	i
  while (1)
 80016aa:	e7fe      	b.n	80016aa <Error_Handler+0x2>

080016ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	2201      	movs	r2, #1
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_MspInit+0x2c>)
{
 80016b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016b4:	4311      	orrs	r1, r2
 80016b6:	6419      	str	r1, [r3, #64]	; 0x40
 80016b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016ba:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	9200      	str	r2, [sp, #0]
 80016c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c4:	0549      	lsls	r1, r1, #21
 80016c6:	430a      	orrs	r2, r1
 80016c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	400b      	ands	r3, r1
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	b002      	add	sp, #8
 80016d4:	4770      	bx	lr
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	0004      	movs	r4, r0
 80016e0:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	2214      	movs	r2, #20
 80016e4:	2100      	movs	r1, #0
 80016e6:	a807      	add	r0, sp, #28
 80016e8:	f002 f93a 	bl	8003960 <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	2218      	movs	r2, #24
 80016ee:	2100      	movs	r1, #0
 80016f0:	a80c      	add	r0, sp, #48	; 0x30
 80016f2:	f002 f935 	bl	8003960 <memset>
  if(hadc->Instance==ADC1)
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_ADC_MspInit+0xe0>)
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fe:	b012      	add	sp, #72	; 0x48
 8001700:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001702:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170a:	f001 fc91 	bl	8003030 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	2800      	cmp	r0, #0
 8001710:	d14b      	bne.n	80017aa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC_CLK_ENABLE();
 8001712:	2080      	movs	r0, #128	; 0x80
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_ADC_MspInit+0xe4>)
 8001716:	0340      	lsls	r0, r0, #13
 8001718:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 800171c:	4301      	orrs	r1, r0
 800171e:	6419      	str	r1, [r3, #64]	; 0x40
 8001720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001722:	4002      	ands	r2, r0
 8001724:	9201      	str	r2, [sp, #4]
 8001726:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	2201      	movs	r2, #1
 800172a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4311      	orrs	r1, r2
 8001730:	6359      	str	r1, [r3, #52]	; 0x34
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	401a      	ands	r2, r3
 8001738:	9202      	str	r2, [sp, #8]
 800173a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800173c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001740:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001742:	3b04      	subs	r3, #4
 8001744:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f000 ffb8 	bl	80026bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800174c:	4d1d      	ldr	r5, [pc, #116]	; (80017c4 <HAL_ADC_MspInit+0xe8>)
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_ADC_MspInit+0xec>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001750:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8001752:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001754:	2305      	movs	r3, #5
 8001756:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	337b      	adds	r3, #123	; 0x7b
 800175a:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175c:	3380      	adds	r3, #128	; 0x80
 800175e:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001766:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001768:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800176c:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800176e:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001770:	f000 febc 	bl	80024ec <HAL_DMA_Init>
 8001774:	2800      	cmp	r0, #0
 8001776:	d11e      	bne.n	80017b6 <HAL_ADC_MspInit+0xda>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001778:	2300      	movs	r3, #0
 800177a:	9303      	str	r3, [sp, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800177c:	9304      	str	r3, [sp, #16]
    pSyncConfig.SyncEnable = DISABLE;
 800177e:	3301      	adds	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001780:	a903      	add	r1, sp, #12
    pSyncConfig.SyncEnable = DISABLE;
 8001782:	33ff      	adds	r3, #255	; 0xff
 8001784:	810b      	strh	r3, [r1, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001786:	0028      	movs	r0, r5
    pSyncConfig.RequestNumber = 1;
 8001788:	3bff      	subs	r3, #255	; 0xff
 800178a:	60cb      	str	r3, [r1, #12]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 800178c:	f000 ff70 	bl	8002670 <HAL_DMAEx_ConfigMuxSync>
 8001790:	2800      	cmp	r0, #0
 8001792:	d10d      	bne.n	80017b0 <HAL_ADC_MspInit+0xd4>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800179a:	6525      	str	r5, [r4, #80]	; 0x50
 800179c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800179e:	f000 fe2d 	bl	80023fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80017a2:	200c      	movs	r0, #12
 80017a4:	f000 fe5c 	bl	8002460 <HAL_NVIC_EnableIRQ>
}
 80017a8:	e7a9      	b.n	80016fe <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80017aa:	f7ff ff7d 	bl	80016a8 <Error_Handler>
 80017ae:	e7b0      	b.n	8001712 <HAL_ADC_MspInit+0x36>
      Error_Handler();
 80017b0:	f7ff ff7a 	bl	80016a8 <Error_Handler>
 80017b4:	e7ee      	b.n	8001794 <HAL_ADC_MspInit+0xb8>
      Error_Handler();
 80017b6:	f7ff ff77 	bl	80016a8 <Error_Handler>
 80017ba:	e7dd      	b.n	8001778 <HAL_ADC_MspInit+0x9c>
 80017bc:	40012400 	.word	0x40012400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	200000c0 	.word	0x200000c0
 80017c8:	40020008 	.word	0x40020008

080017cc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_TIM_PWM_MspInit+0x24>)
 80017ce:	6802      	ldr	r2, [r0, #0]
{
 80017d0:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_TIM_PWM_MspInit+0xe>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017d6:	b002      	add	sp, #8
 80017d8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	2080      	movs	r0, #128	; 0x80
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_TIM_PWM_MspInit+0x28>)
 80017de:	0100      	lsls	r0, r0, #4
 80017e0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80017e2:	4301      	orrs	r1, r0
 80017e4:	6411      	str	r1, [r2, #64]	; 0x40
 80017e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017e8:	4003      	ands	r3, r0
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	9b01      	ldr	r3, [sp, #4]
}
 80017ee:	e7f2      	b.n	80017d6 <HAL_TIM_PWM_MspInit+0xa>
 80017f0:	40012c00 	.word	0x40012c00
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	0004      	movs	r4, r0
 80017fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	2214      	movs	r2, #20
 8001800:	2100      	movs	r1, #0
 8001802:	a801      	add	r0, sp, #4
 8001804:	f002 f8ac 	bl	8003960 <memset>
  if(htim->Instance==TIM1)
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_TIM_MspPostInit+0x48>)
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001810:	b006      	add	sp, #24
 8001812:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	2301      	movs	r3, #1
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4319      	orrs	r1, r3
 8001820:	6351      	str	r1, [r2, #52]	; 0x34
 8001822:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4013      	ands	r3, r2
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	3b7f      	subs	r3, #127	; 0x7f
 8001834:	3bff      	subs	r3, #255	; 0xff
 8001836:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001838:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f000 ff3f 	bl	80026bc <HAL_GPIO_Init>
}
 800183e:	e7e7      	b.n	8001810 <HAL_TIM_MspPostInit+0x18>
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40021000 	.word	0x40021000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b510      	push	{r4, lr}

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
	  phU_Break();
 800184a:	f7ff fdd9 	bl	8001400 <phU_Break>
  while (1)
 800184e:	e7fc      	b.n	800184a <NMI_Handler+0x2>

08001850 <HardFault_Handler>:
 8001850:	b510      	push	{r4, lr}
 8001852:	f7ff fdd5 	bl	8001400 <phU_Break>
 8001856:	e7fc      	b.n	8001852 <HardFault_Handler+0x2>

08001858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */
	  phU_Break();
 800185a:	f7ff fdd1 	bl	8001400 <phU_Break>
  /* USER CODE END SVC_IRQn 1 */
}
 800185e:	bd10      	pop	{r4, pc}

08001860 <PendSV_Handler>:
 8001860:	b510      	push	{r4, lr}
 8001862:	f7ff fdcd 	bl	8001400 <phU_Break>
 8001866:	bd10      	pop	{r4, pc}

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f000 f87f 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bd10      	pop	{r4, pc}

08001870 <ADC1_IRQHandler>:
  * @brief This function handles ADC1 interrupt.
  */

volatile static int entry, exit;
void ADC1_IRQHandler(void)
{
 8001870:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */
	entry = htim1.Instance-> CNT;
 8001872:	4c07      	ldr	r4, [pc, #28]	; (8001890 <ADC1_IRQHandler+0x20>)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <ADC1_IRQHandler+0x24>)
 800187a:	601a      	str	r2, [r3, #0]
fast_loop();
 800187c:	f7ff fcb6 	bl	80011ec <fast_loop>
  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <ADC1_IRQHandler+0x28>)
 8001882:	f000 fa15 	bl	8001cb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
	exit = htim1.Instance-> CNT;
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <ADC1_IRQHandler+0x2c>)
 800188c:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_IRQn 1 */
}
 800188e:	bd10      	pop	{r4, pc}
 8001890:	2000011c 	.word	0x2000011c
 8001894:	20000168 	.word	0x20000168
 8001898:	2000005c 	.word	0x2000005c
 800189c:	2000016c 	.word	0x2000016c

080018a0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	4770      	bx	lr
 80018a2:	46c0      	nop			; (mov r8, r8)

080018a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a8:	f7ff fffa 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	; (80018e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <LoopForever+0xe>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <LoopForever+0x16>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018d2:	f002 f821 	bl	8003918 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018d6:	f7ff fde7 	bl	80014a8 <main>

080018da <LoopForever>:

LoopForever:
  b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   r0, =_estack
 80018dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018e8:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 80018ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f0:	20000174 	.word	0x20000174

080018f4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_InitTick+0x40>)
{
 80018fc:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 80018fe:	7819      	ldrb	r1, [r3, #0]
 8001900:	2900      	cmp	r1, #0
 8001902:	d101      	bne.n	8001908 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001904:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001906:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001908:	20fa      	movs	r0, #250	; 0xfa
 800190a:	0080      	lsls	r0, r0, #2
 800190c:	f7fe fbf8 	bl	8000100 <__udivsi3>
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_InitTick+0x44>)
 8001912:	0001      	movs	r1, r0
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	f7fe fbf3 	bl	8000100 <__udivsi3>
 800191a:	f000 fdad 	bl	8002478 <HAL_SYSTICK_Config>
 800191e:	2800      	cmp	r0, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	2c03      	cmp	r4, #3
 8001924:	d8ee      	bhi.n	8001904 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001926:	3801      	subs	r0, #1
 8001928:	2200      	movs	r2, #0
 800192a:	0021      	movs	r1, r4
 800192c:	f000 fd66 	bl	80023fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_InitTick+0x48>)
 8001932:	2000      	movs	r0, #0
 8001934:	601c      	str	r4, [r3, #0]
  return status;
 8001936:	e7e6      	b.n	8001906 <HAL_InitTick+0xe>
 8001938:	20000004 	.word	0x20000004
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_Init+0x24>)
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	6811      	ldr	r1, [r2, #0]
{
 800194c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001950:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001952:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001954:	f7ff ffd0 	bl	80018f8 <HAL_InitTick>
 8001958:	1e04      	subs	r4, r0, #0
 800195a:	d002      	beq.n	8001962 <HAL_Init+0x1e>
    status = HAL_ERROR;
 800195c:	2401      	movs	r4, #1
}
 800195e:	0020      	movs	r0, r4
 8001960:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001962:	f7ff fea3 	bl	80016ac <HAL_MspInit>
 8001966:	e7fa      	b.n	800195e <HAL_Init+0x1a>
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_IncTick+0x10>)
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_IncTick+0x14>)
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	185b      	adds	r3, r3, r1
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	4770      	bx	lr
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	20000170 	.word	0x20000170
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <HAL_GetTick+0x8>)
 8001986:	6818      	ldr	r0, [r3, #0]
}
 8001988:	4770      	bx	lr
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	20000170 	.word	0x20000170

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fff6 	bl	8001984 <HAL_GetTick>
 8001998:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	1c63      	adds	r3, r4, #1
 800199c:	d002      	beq.n	80019a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_Delay+0x20>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	1b40      	subs	r0, r0, r5
 80019aa:	42a0      	cmp	r0, r4
 80019ac:	d3fa      	bcc.n	80019a4 <HAL_Delay+0x14>
  {
  }
}
 80019ae:	bd70      	pop	{r4, r5, r6, pc}
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	46c6      	mov	lr, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019b8:	2300      	movs	r3, #0
{
 80019ba:	b500      	push	{lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80019c0:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80019c2:	d100      	bne.n	80019c6 <HAL_ADC_Init+0x12>
 80019c4:	e0db      	b.n	8001b7e <HAL_ADC_Init+0x1ca>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d100      	bne.n	80019ce <HAL_ADC_Init+0x1a>
 80019cc:	e0ab      	b.n	8001b26 <HAL_ADC_Init+0x172>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019ce:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d0:	6825      	ldr	r5, [r4, #0]
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	68aa      	ldr	r2, [r5, #8]
 80019d6:	421a      	tst	r2, r3
 80019d8:	d115      	bne.n	8001a06 <HAL_ADC_Init+0x52>
  MODIFY_REG(ADCx->CR,
 80019da:	68aa      	ldr	r2, [r5, #8]
 80019dc:	497e      	ldr	r1, [pc, #504]	; (8001bd8 <HAL_ADC_Init+0x224>)
 80019de:	400a      	ands	r2, r1
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019e4:	4b7d      	ldr	r3, [pc, #500]	; (8001bdc <HAL_ADC_Init+0x228>)
 80019e6:	497e      	ldr	r1, [pc, #504]	; (8001be0 <HAL_ADC_Init+0x22c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f7fe fb89 	bl	8000100 <__udivsi3>
 80019ee:	3001      	adds	r0, #1
 80019f0:	0040      	lsls	r0, r0, #1
 80019f2:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_ADC_Init+0x52>
    {
      wait_loop_index--;
 80019fa:	9b01      	ldr	r3, [sp, #4]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001a00:	9b01      	ldr	r3, [sp, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f9      	bne.n	80019fa <HAL_ADC_Init+0x46>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a06:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a08:	2000      	movs	r0, #0
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	d400      	bmi.n	8001a10 <HAL_ADC_Init+0x5c>
 8001a0e:	e07d      	b.n	8001b0c <HAL_ADC_Init+0x158>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a10:	68ab      	ldr	r3, [r5, #8]
 8001a12:	075b      	lsls	r3, r3, #29
 8001a14:	d509      	bpl.n	8001a2a <HAL_ADC_Init+0x76>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a16:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a18:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8001a22:	b002      	add	sp, #8
 8001a24:	bc80      	pop	{r7}
 8001a26:	46b8      	mov	r8, r7
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a2c:	06db      	lsls	r3, r3, #27
 8001a2e:	d4f3      	bmi.n	8001a18 <HAL_ADC_Init+0x64>
    ADC_STATE_CLR_SET(hadc->State,
 8001a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a32:	4a6c      	ldr	r2, [pc, #432]	; (8001be4 <HAL_ADC_Init+0x230>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	3206      	adds	r2, #6
 8001a38:	32ff      	adds	r2, #255	; 0xff
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a3e:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a40:	07db      	lsls	r3, r3, #31
 8001a42:	d476      	bmi.n	8001b32 <HAL_ADC_Init+0x17e>
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a44:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a46:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a48:	0377      	lsls	r7, r6, #13
 8001a4a:	46bc      	mov	ip, r7
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a4c:	7e21      	ldrb	r1, [r4, #24]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a4e:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a50:	03db      	lsls	r3, r3, #15
 8001a52:	4698      	mov	r8, r3
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001a54:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a56:	0389      	lsls	r1, r1, #14
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a58:	2f00      	cmp	r7, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_ADC_Init+0xac>
 8001a5c:	2780      	movs	r7, #128	; 0x80
 8001a5e:	017f      	lsls	r7, r7, #5
 8001a60:	68e3      	ldr	r3, [r4, #12]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	4643      	mov	r3, r8
 8001a66:	430a      	orrs	r2, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	4663      	mov	r3, ip
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a6c:	6921      	ldr	r1, [r4, #16]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	2900      	cmp	r1, #0
 8001a72:	da00      	bge.n	8001a76 <HAL_ADC_Init+0xc2>
 8001a74:	e09f      	b.n	8001bb6 <HAL_ADC_Init+0x202>
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	039b      	lsls	r3, r3, #14
 8001a7a:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a7c:	232c      	movs	r3, #44	; 0x2c
 8001a7e:	5ce3      	ldrb	r3, [r4, r3]
 8001a80:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a82:	4313      	orrs	r3, r2
 8001a84:	433b      	orrs	r3, r7
 8001a86:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a88:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a8a:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8c:	5de2      	ldrb	r2, [r4, r7]
 8001a8e:	2a01      	cmp	r2, #1
 8001a90:	d100      	bne.n	8001a94 <HAL_ADC_Init+0xe0>
 8001a92:	e094      	b.n	8001bbe <HAL_ADC_Init+0x20a>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a96:	2a00      	cmp	r2, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a9a:	26e0      	movs	r6, #224	; 0xe0
 8001a9c:	0076      	lsls	r6, r6, #1
 8001a9e:	4032      	ands	r2, r6
 8001aa0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001aa2:	4332      	orrs	r2, r6
 8001aa4:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aa6:	68ea      	ldr	r2, [r5, #12]
 8001aa8:	4e4f      	ldr	r6, [pc, #316]	; (8001be8 <HAL_ADC_Init+0x234>)
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001aaa:	6867      	ldr	r7, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aac:	4032      	ands	r2, r6
 8001aae:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ab0:	0fbe      	lsrs	r6, r7, #30
 8001ab2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ab4:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ab6:	07b3      	lsls	r3, r6, #30
 8001ab8:	4698      	mov	r8, r3
 8001aba:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8001abc:	233c      	movs	r3, #60	; 0x3c
 8001abe:	5ce3      	ldrb	r3, [r4, r3]
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x126>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001aca:	4333      	orrs	r3, r6
 8001acc:	4313      	orrs	r3, r2
 8001ace:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	4662      	mov	r2, ip
 8001ad8:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8001ada:	692b      	ldr	r3, [r5, #16]
 8001adc:	4e43      	ldr	r6, [pc, #268]	; (8001bec <HAL_ADC_Init+0x238>)
 8001ade:	4033      	ands	r3, r6
 8001ae0:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ae2:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8001ae4:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ae6:	007b      	lsls	r3, r7, #1
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	05d2      	lsls	r2, r2, #23
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d021      	beq.n	8001b34 <HAL_ADC_Init+0x180>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	061b      	lsls	r3, r3, #24
 8001af4:	429f      	cmp	r7, r3
 8001af6:	d01d      	beq.n	8001b34 <HAL_ADC_Init+0x180>
        MODIFY_REG(ADC1_COMMON->CCR,
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <HAL_ADC_Init+0x23c>)
 8001afa:	4e3e      	ldr	r6, [pc, #248]	; (8001bf4 <HAL_ADC_Init+0x240>)
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	4033      	ands	r3, r6
 8001b00:	26f0      	movs	r6, #240	; 0xf0
 8001b02:	03b6      	lsls	r6, r6, #14
 8001b04:	4037      	ands	r7, r6
 8001b06:	431f      	orrs	r7, r3
 8001b08:	6017      	str	r7, [r2, #0]
 8001b0a:	e013      	b.n	8001b34 <HAL_ADC_Init+0x180>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	4313      	orrs	r3, r2
 8001b14:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b18:	3a0f      	subs	r2, #15
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b1e:	68ab      	ldr	r3, [r5, #8]
 8001b20:	075b      	lsls	r3, r3, #29
 8001b22:	d582      	bpl.n	8001a2a <HAL_ADC_Init+0x76>
 8001b24:	e777      	b.n	8001a16 <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 8001b26:	f7ff fdd9 	bl	80016dc <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001b2e:	54e5      	strb	r5, [r4, r3]
 8001b30:	e74d      	b.n	80019ce <HAL_ADC_Init+0x1a>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b32:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8001b34:	2207      	movs	r2, #7
 8001b36:	2770      	movs	r7, #112	; 0x70
 8001b38:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001b3a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	4333      	orrs	r3, r6
 8001b40:	616b      	str	r3, [r5, #20]
 8001b42:	696a      	ldr	r2, [r5, #20]
 8001b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b46:	43ba      	bics	r2, r7
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d117      	bne.n	8001b82 <HAL_ADC_Init+0x1ce>
      SET_BIT(hadc->Instance->CHSELR,
 8001b52:	2310      	movs	r3, #16
 8001b54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001b56:	425b      	negs	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	696a      	ldr	r2, [r5, #20]
 8001b60:	4013      	ands	r3, r2
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b62:	429e      	cmp	r6, r3
 8001b64:	d01e      	beq.n	8001ba4 <HAL_ADC_Init+0x1f0>
      ADC_STATE_CLR_SET(hadc->State,
 8001b66:	2212      	movs	r2, #18
 8001b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	3a02      	subs	r2, #2
 8001b70:	4313      	orrs	r3, r2
 8001b72:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b76:	3a0f      	subs	r2, #15
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8001b7c:	e751      	b.n	8001a22 <HAL_ADC_Init+0x6e>
    return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e74f      	b.n	8001a22 <HAL_ADC_Init+0x6e>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	4299      	cmp	r1, r3
 8001b88:	d1e8      	bne.n	8001b5c <HAL_ADC_Init+0x1a8>
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b8a:	221c      	movs	r2, #28
 8001b8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b8e:	69e3      	ldr	r3, [r4, #28]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	401a      	ands	r2, r3
 8001b96:	2310      	movs	r3, #16
 8001b98:	425b      	negs	r3, r3
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	62ab      	str	r3, [r5, #40]	; 0x28
 8001ba2:	e7db      	b.n	8001b5c <HAL_ADC_Init+0x1a8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba4:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba8:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bac:	4393      	bics	r3, r2
 8001bae:	3a02      	subs	r2, #2
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001bb4:	e735      	b.n	8001a22 <HAL_ADC_Init+0x6e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bb6:	004b      	lsls	r3, r1, #1
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	469c      	mov	ip, r3
 8001bbc:	e75e      	b.n	8001a7c <HAL_ADC_Init+0xc8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bbe:	2e00      	cmp	r6, #0
 8001bc0:	d103      	bne.n	8001bca <HAL_ADC_Init+0x216>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	0252      	lsls	r2, r2, #9
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	e764      	b.n	8001a94 <HAL_ADC_Init+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bca:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8001bcc:	4337      	orrs	r7, r6
 8001bce:	65a7      	str	r7, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd0:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8001bd2:	4332      	orrs	r2, r6
 8001bd4:	65e2      	str	r2, [r4, #92]	; 0x5c
 8001bd6:	e75d      	b.n	8001a94 <HAL_ADC_Init+0xe0>
 8001bd8:	6fffffe8 	.word	0x6fffffe8
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	00030d40 	.word	0x00030d40
 8001be4:	fffffefd 	.word	0xfffffefd
 8001be8:	fffe0201 	.word	0xfffe0201
 8001bec:	1ffffc02 	.word	0x1ffffc02
 8001bf0:	40012708 	.word	0x40012708
 8001bf4:	ffc3ffff 	.word	0xffc3ffff

08001bf8 <HAL_ADC_ConvCpltCallback>:
 8001bf8:	4770      	bx	lr
 8001bfa:	46c0      	nop			; (mov r8, r8)

08001bfc <HAL_ADC_ConvHalfCpltCallback>:
 8001bfc:	4770      	bx	lr
 8001bfe:	46c0      	nop			; (mov r8, r8)

08001c00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c00:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c04:	f7ff fffa 	bl	8001bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)

08001c0c <HAL_ADC_LevelOutOfWindowCallback>:
 8001c0c:	4770      	bx	lr
 8001c0e:	46c0      	nop			; (mov r8, r8)

08001c10 <HAL_ADC_ErrorCallback>:
 8001c10:	4770      	bx	lr
 8001c12:	46c0      	nop			; (mov r8, r8)

08001c14 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c14:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c16:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001c18:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c1a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c20:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001c22:	3a3c      	subs	r2, #60	; 0x3c
 8001c24:	4313      	orrs	r3, r2
 8001c26:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c28:	f7ff fff2 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)

08001c30 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c30:	2150      	movs	r1, #80	; 0x50
{
 8001c32:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c34:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001c36:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c38:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001c3a:	4211      	tst	r1, r2
 8001c3c:	d10d      	bne.n	8001c5a <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c46:	22c0      	movs	r2, #192	; 0xc0
 8001c48:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c4a:	6803      	ldr	r3, [r0, #0]
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	4211      	tst	r1, r2
 8001c52:	d00a      	beq.n	8001c6a <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8001c54:	f7ff ffd0 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
}
 8001c58:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c5a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001c5c:	06d2      	lsls	r2, r2, #27
 8001c5e:	d416      	bmi.n	8001c8e <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c60:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001c62:	0018      	movs	r0, r3
 8001c64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c66:	4790      	blx	r2
}
 8001c68:	e7f6      	b.n	8001c58 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c6a:	7e82      	ldrb	r2, [r0, #26]
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d1f1      	bne.n	8001c54 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	0712      	lsls	r2, r2, #28
 8001c74:	d5ee      	bpl.n	8001c54 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	0752      	lsls	r2, r2, #29
 8001c7a:	d50b      	bpl.n	8001c94 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001c80:	4313      	orrs	r3, r2
 8001c82:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001c86:	3a1f      	subs	r2, #31
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001c8c:	e7e2      	b.n	8001c54 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 8001c8e:	f7ff ffbf 	bl	8001c10 <HAL_ADC_ErrorCallback>
 8001c92:	e7e1      	b.n	8001c58 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c94:	210c      	movs	r1, #12
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	438a      	bics	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <ADC_DMAConvCplt+0x7c>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	3204      	adds	r2, #4
 8001ca4:	32ff      	adds	r2, #255	; 0xff
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	6583      	str	r3, [r0, #88]	; 0x58
 8001caa:	e7d3      	b.n	8001c54 <ADC_DMAConvCplt+0x24>
 8001cac:	fffffefe 	.word	0xfffffefe

08001cb0 <HAL_ADC_IRQHandler>:
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cb0:	2202      	movs	r2, #2
{
 8001cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001cb4:	6803      	ldr	r3, [r0, #0]
{
 8001cb6:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001cb8:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cba:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cbc:	422a      	tst	r2, r5
 8001cbe:	d001      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x14>
 8001cc0:	4232      	tst	r2, r6
 8001cc2:	d14c      	bne.n	8001d5e <HAL_ADC_IRQHandler+0xae>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	422a      	tst	r2, r5
 8001cc8:	d043      	beq.n	8001d52 <HAL_ADC_IRQHandler+0xa2>
 8001cca:	4232      	tst	r2, r6
 8001ccc:	d041      	beq.n	8001d52 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cce:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001cd0:	06d2      	lsls	r2, r2, #27
 8001cd2:	d404      	bmi.n	8001cde <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001cde:	22c0      	movs	r2, #192	; 0xc0
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	4211      	tst	r1, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x5c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ce8:	7ea2      	ldrb	r2, [r4, #26]
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d10e      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x5c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	0712      	lsls	r2, r2, #28
 8001cf2:	d50b      	bpl.n	8001d0c <HAL_ADC_IRQHandler+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	0752      	lsls	r2, r2, #29
 8001cf8:	d400      	bmi.n	8001cfc <HAL_ADC_IRQHandler+0x4c>
 8001cfa:	e07c      	b.n	8001df6 <HAL_ADC_IRQHandler+0x146>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d00:	4313      	orrs	r3, r2
 8001d02:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d06:	3a1f      	subs	r2, #31
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001d0c:	0020      	movs	r0, r4
 8001d0e:	f7ff ff73 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d12:	220c      	movs	r2, #12
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d18:	2780      	movs	r7, #128	; 0x80
 8001d1a:	422f      	tst	r7, r5
 8001d1c:	d001      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x72>
 8001d1e:	4237      	tst	r7, r6
 8001d20:	d14d      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d22:	2780      	movs	r7, #128	; 0x80
 8001d24:	007f      	lsls	r7, r7, #1
 8001d26:	423d      	tst	r5, r7
 8001d28:	d001      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x7e>
 8001d2a:	423e      	tst	r6, r7
 8001d2c:	d152      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0x124>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d2e:	2780      	movs	r7, #128	; 0x80
 8001d30:	00bf      	lsls	r7, r7, #2
 8001d32:	423d      	tst	r5, r7
 8001d34:	d001      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x8a>
 8001d36:	423e      	tst	r6, r7
 8001d38:	d136      	bne.n	8001da8 <HAL_ADC_IRQHandler+0xf8>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	422a      	tst	r2, r5
 8001d3e:	d001      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x94>
 8001d40:	4232      	tst	r2, r6
 8001d42:	d11b      	bne.n	8001d7c <HAL_ADC_IRQHandler+0xcc>
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001d44:	2780      	movs	r7, #128	; 0x80
 8001d46:	01bf      	lsls	r7, r7, #6
 8001d48:	423d      	tst	r5, r7
 8001d4a:	d001      	beq.n	8001d50 <HAL_ADC_IRQHandler+0xa0>
 8001d4c:	423e      	tst	r6, r7
 8001d4e:	d14c      	bne.n	8001dea <HAL_ADC_IRQHandler+0x13a>
}
 8001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d52:	2208      	movs	r2, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d54:	422a      	tst	r2, r5
 8001d56:	d0df      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x68>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d58:	4232      	tst	r2, r6
 8001d5a:	d0dd      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x68>
 8001d5c:	e7b7      	b.n	8001cce <HAL_ADC_IRQHandler+0x1e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d60:	06db      	lsls	r3, r3, #27
 8001d62:	d404      	bmi.n	8001d6e <HAL_ADC_IRQHandler+0xbe>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f000 fb40 	bl	80023f4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d74:	2202      	movs	r2, #2
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e7a3      	b.n	8001cc4 <HAL_ADC_IRQHandler+0x14>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_ADC_IRQHandler+0xd8>
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001d82:	68da      	ldr	r2, [r3, #12]
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001d84:	0792      	lsls	r2, r2, #30
 8001d86:	d00c      	beq.n	8001da2 <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4313      	orrs	r3, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d90:	2202      	movs	r2, #2
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d92:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8001d96:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8001d9c:	f7ff ff38 	bl	8001c10 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e7cd      	b.n	8001d44 <HAL_ADC_IRQHandler+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001dac:	02db      	lsls	r3, r3, #11
 8001dae:	4313      	orrs	r3, r2
 8001db0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001db2:	0020      	movs	r0, r4
 8001db4:	f000 fb1c 	bl	80023f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	601f      	str	r7, [r3, #0]
 8001dbc:	e7bd      	b.n	8001d3a <HAL_ADC_IRQHandler+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dc8:	0020      	movs	r0, r4
 8001dca:	f7ff ff1f 	bl	8001c0c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	601f      	str	r7, [r3, #0]
 8001dd2:	e7a6      	b.n	8001d22 <HAL_ADC_IRQHandler+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dde:	0020      	movs	r0, r4
 8001de0:	f000 fb04 	bl	80023ec <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	601f      	str	r7, [r3, #0]
 8001de8:	e7a1      	b.n	8001d2e <HAL_ADC_IRQHandler+0x7e>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001dea:	0020      	movs	r0, r4
 8001dec:	f000 fb04 	bl	80023f8 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	601f      	str	r7, [r3, #0]
}
 8001df4:	e7ac      	b.n	8001d50 <HAL_ADC_IRQHandler+0xa0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001df6:	210c      	movs	r1, #12
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001dfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_ADC_IRQHandler+0x160>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	3204      	adds	r2, #4
 8001e06:	32ff      	adds	r2, #255	; 0xff
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e0c:	e77e      	b.n	8001d0c <HAL_ADC_IRQHandler+0x5c>
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	fffffefe 	.word	0xfffffefe

08001e14 <HAL_ADC_ConfigChannel>:
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	4645      	mov	r5, r8
 8001e18:	46de      	mov	lr, fp
 8001e1a:	4657      	mov	r7, sl
 8001e1c:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 8001e1e:	2300      	movs	r3, #0
{
 8001e20:	b5e0      	push	{r5, r6, r7, lr}
 8001e22:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8001e24:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001e26:	3354      	adds	r3, #84	; 0x54
 8001e28:	5cc2      	ldrb	r2, [r0, r3]
{
 8001e2a:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e2c:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d100      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x20>
 8001e32:	e091      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x144>
 8001e34:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e36:	2204      	movs	r2, #4
 8001e38:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	689e      	ldr	r6, [r3, #8]
 8001e3e:	4232      	tst	r2, r6
 8001e40:	d00d      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e44:	321c      	adds	r2, #28
 8001e46:	4313      	orrs	r3, r2
 8001e48:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8001e4a:	2354      	movs	r3, #84	; 0x54
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	54e2      	strb	r2, [r4, r3]
}
 8001e50:	b005      	add	sp, #20
 8001e52:	bcf0      	pop	{r4, r5, r6, r7}
 8001e54:	46bb      	mov	fp, r7
 8001e56:	46b2      	mov	sl, r6
 8001e58:	46a9      	mov	r9, r5
 8001e5a:	46a0      	mov	r8, r4
 8001e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e5e:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e60:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e62:	2e02      	cmp	r6, #2
 8001e64:	d05c      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e66:	2780      	movs	r7, #128	; 0x80
 8001e68:	063f      	lsls	r7, r7, #24
 8001e6a:	42bd      	cmp	r5, r7
 8001e6c:	d051      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001e6e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001e70:	270f      	movs	r7, #15
 8001e72:	46aa      	mov	sl, r5
 8001e74:	251f      	movs	r5, #31
 8001e76:	46ac      	mov	ip, r5
 8001e78:	4035      	ands	r5, r6
 8001e7a:	40af      	lsls	r7, r5
 8001e7c:	46a9      	mov	r9, r5
 8001e7e:	43fd      	mvns	r5, r7
 8001e80:	9500      	str	r5, [sp, #0]
 8001e82:	4655      	mov	r5, sl
 8001e84:	43bd      	bics	r5, r7
 8001e86:	46a8      	mov	r8, r5
 8001e88:	680d      	ldr	r5, [r1, #0]
 8001e8a:	9701      	str	r7, [sp, #4]
 8001e8c:	036f      	lsls	r7, r5, #13
 8001e8e:	d16c      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x156>
 8001e90:	4660      	mov	r0, ip
 8001e92:	0eaa      	lsrs	r2, r5, #26
 8001e94:	4010      	ands	r0, r2
 8001e96:	0002      	movs	r2, r0
 8001e98:	4648      	mov	r0, r9
 8001e9a:	4082      	lsls	r2, r0
 8001e9c:	4640      	mov	r0, r8
 8001e9e:	4310      	orrs	r0, r2
 8001ea0:	4680      	mov	r8, r0
 8001ea2:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ea4:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ea6:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ea8:	69e2      	ldr	r2, [r4, #28]
 8001eaa:	3601      	adds	r6, #1
 8001eac:	4296      	cmp	r6, r2
 8001eae:	d808      	bhi.n	8001ec2 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8001eb0:	464e      	mov	r6, r9
 8001eb2:	00aa      	lsls	r2, r5, #2
 8001eb4:	0f12      	lsrs	r2, r2, #28
 8001eb6:	40b2      	lsls	r2, r6
 8001eb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001eba:	9e00      	ldr	r6, [sp, #0]
 8001ebc:	4030      	ands	r0, r6
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8001ec2:	0228      	lsls	r0, r5, #8
 8001ec4:	688a      	ldr	r2, [r1, #8]
 8001ec6:	0001      	movs	r1, r0
 8001ec8:	695e      	ldr	r6, [r3, #20]
 8001eca:	4002      	ands	r2, r0
 8001ecc:	4866      	ldr	r0, [pc, #408]	; (8002068 <HAL_ADC_ConfigChannel+0x254>)
 8001ece:	438e      	bics	r6, r1
 8001ed0:	4002      	ands	r2, r0
 8001ed2:	4332      	orrs	r2, r6
 8001ed4:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ed6:	2d00      	cmp	r5, #0
 8001ed8:	db01      	blt.n	8001ede <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eda:	2000      	movs	r0, #0
}
 8001edc:	e7b5      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ede:	21e0      	movs	r1, #224	; 0xe0
 8001ee0:	4862      	ldr	r0, [pc, #392]	; (800206c <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ee2:	4a63      	ldr	r2, [pc, #396]	; (8002070 <HAL_ADC_ConfigChannel+0x25c>)
 8001ee4:	6803      	ldr	r3, [r0, #0]
 8001ee6:	0449      	lsls	r1, r1, #17
 8001ee8:	4019      	ands	r1, r3
 8001eea:	4295      	cmp	r5, r2
 8001eec:	d051      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eee:	4a61      	ldr	r2, [pc, #388]	; (8002074 <HAL_ADC_ConfigChannel+0x260>)
 8001ef0:	4295      	cmp	r5, r2
 8001ef2:	d045      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ef4:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_ADC_ConfigChannel+0x264>)
 8001ef6:	4295      	cmp	r5, r2
 8001ef8:	d1ef      	bne.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001efa:	2580      	movs	r5, #128	; 0x80
 8001efc:	03ed      	lsls	r5, r5, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001efe:	422b      	tst	r3, r5
 8001f00:	d1eb      	bne.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f02:	6802      	ldr	r2, [r0, #0]
 8001f04:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_ADC_ConfigChannel+0x268>)
 8001f06:	401a      	ands	r2, r3
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	4315      	orrs	r5, r2
 8001f0c:	6005      	str	r5, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0e:	2000      	movs	r0, #0
}
 8001f10:	e79b      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f12:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f14:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f16:	036a      	lsls	r2, r5, #13
 8001f18:	0b52      	lsrs	r2, r2, #13
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f1e:	e7d0      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0612      	lsls	r2, r2, #24
 8001f24:	4295      	cmp	r5, r2
 8001f26:	d019      	beq.n	8001f5c <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f28:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	dad5      	bge.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f2e:	494f      	ldr	r1, [pc, #316]	; (800206c <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f30:	484f      	ldr	r0, [pc, #316]	; (8002070 <HAL_ADC_ConfigChannel+0x25c>)
 8001f32:	680b      	ldr	r3, [r1, #0]
 8001f34:	4282      	cmp	r2, r0
 8001f36:	d029      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f38:	484e      	ldr	r0, [pc, #312]	; (8002074 <HAL_ADC_ConfigChannel+0x260>)
 8001f3a:	4282      	cmp	r2, r0
 8001f3c:	d04c      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f3e:	484e      	ldr	r0, [pc, #312]	; (8002078 <HAL_ADC_ConfigChannel+0x264>)
 8001f40:	4282      	cmp	r2, r0
 8001f42:	d1ca      	bne.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f44:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f46:	680a      	ldr	r2, [r1, #0]
 8001f48:	0440      	lsls	r0, r0, #17
 8001f4a:	4003      	ands	r3, r0
 8001f4c:	484b      	ldr	r0, [pc, #300]	; (800207c <HAL_ADC_ConfigChannel+0x268>)
 8001f4e:	4002      	ands	r2, r0
 8001f50:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2000      	movs	r0, #0
 8001f54:	600b      	str	r3, [r1, #0]
 8001f56:	e778      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8001f58:	2002      	movs	r0, #2
 8001f5a:	e779      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001f5c:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f60:	0350      	lsls	r0, r2, #13
 8001f62:	0b40      	lsrs	r0, r0, #13
 8001f64:	4381      	bics	r1, r0
 8001f66:	6299      	str	r1, [r3, #40]	; 0x28
}
 8001f68:	e7df      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f6a:	4228      	tst	r0, r5
 8001f6c:	d199      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x8e>
 8001f6e:	2702      	movs	r7, #2
 8001f70:	422f      	tst	r7, r5
 8001f72:	d02d      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x1bc>
 8001f74:	464a      	mov	r2, r9
 8001f76:	4090      	lsls	r0, r2
 8001f78:	4642      	mov	r2, r8
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	e790      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f80:	2580      	movs	r5, #128	; 0x80
 8001f82:	046d      	lsls	r5, r5, #17
 8001f84:	422b      	tst	r3, r5
 8001f86:	d0bc      	beq.n	8001f02 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2000      	movs	r0, #0
 8001f8a:	e75e      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8c:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f8e:	680a      	ldr	r2, [r1, #0]
 8001f90:	e7da      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f92:	2580      	movs	r5, #128	; 0x80
 8001f94:	042d      	lsls	r5, r5, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f96:	422b      	tst	r3, r5
 8001f98:	d19f      	bne.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
 8001f9a:	6802      	ldr	r2, [r0, #0]
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_ADC_ConfigChannel+0x268>)
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	430a      	orrs	r2, r1
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_ADC_ConfigChannel+0x26c>)
 8001fa4:	4315      	orrs	r5, r2
 8001fa6:	6005      	str	r5, [r0, #0]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	4936      	ldr	r1, [pc, #216]	; (8002084 <HAL_ADC_ConfigChannel+0x270>)
 8001fac:	f7fe f8a8 	bl	8000100 <__udivsi3>
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	0043      	lsls	r3, r0, #1
 8001fb4:	181b      	adds	r3, r3, r0
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8001fba:	9b03      	ldr	r3, [sp, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d08c      	beq.n	8001eda <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 8001fc0:	9b03      	ldr	r3, [sp, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8001fc6:	9b03      	ldr	r3, [sp, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f9      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2000      	movs	r0, #0
 8001fce:	e73c      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001fd0:	422a      	tst	r2, r5
 8001fd2:	d005      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x1cc>
 8001fd4:	003a      	movs	r2, r7
 8001fd6:	e75f      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd8:	20c0      	movs	r0, #192	; 0xc0
 8001fda:	680a      	ldr	r2, [r1, #0]
 8001fdc:	0400      	lsls	r0, r0, #16
 8001fde:	e7b4      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001fe0:	072a      	lsls	r2, r5, #28
 8001fe2:	d501      	bpl.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d4>
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	e757      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8001fe8:	06ea      	lsls	r2, r5, #27
 8001fea:	d501      	bpl.n	8001ff0 <HAL_ADC_ConfigChannel+0x1dc>
 8001fec:	2204      	movs	r2, #4
 8001fee:	e753      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8001ff0:	06aa      	lsls	r2, r5, #26
 8001ff2:	d501      	bpl.n	8001ff8 <HAL_ADC_ConfigChannel+0x1e4>
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	e74f      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8001ff8:	066a      	lsls	r2, r5, #25
 8001ffa:	d501      	bpl.n	8002000 <HAL_ADC_ConfigChannel+0x1ec>
 8001ffc:	2206      	movs	r2, #6
 8001ffe:	e74b      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002000:	062a      	lsls	r2, r5, #24
 8002002:	d501      	bpl.n	8002008 <HAL_ADC_ConfigChannel+0x1f4>
 8002004:	2207      	movs	r2, #7
 8002006:	e747      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002008:	05ea      	lsls	r2, r5, #23
 800200a:	d501      	bpl.n	8002010 <HAL_ADC_ConfigChannel+0x1fc>
 800200c:	2208      	movs	r2, #8
 800200e:	e743      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002010:	05aa      	lsls	r2, r5, #22
 8002012:	d501      	bpl.n	8002018 <HAL_ADC_ConfigChannel+0x204>
 8002014:	2209      	movs	r2, #9
 8002016:	e73f      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002018:	056a      	lsls	r2, r5, #21
 800201a:	d501      	bpl.n	8002020 <HAL_ADC_ConfigChannel+0x20c>
 800201c:	220a      	movs	r2, #10
 800201e:	e73b      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002020:	052a      	lsls	r2, r5, #20
 8002022:	d501      	bpl.n	8002028 <HAL_ADC_ConfigChannel+0x214>
 8002024:	220b      	movs	r2, #11
 8002026:	e737      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002028:	04ea      	lsls	r2, r5, #19
 800202a:	d501      	bpl.n	8002030 <HAL_ADC_ConfigChannel+0x21c>
 800202c:	220c      	movs	r2, #12
 800202e:	e733      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002030:	04aa      	lsls	r2, r5, #18
 8002032:	d501      	bpl.n	8002038 <HAL_ADC_ConfigChannel+0x224>
 8002034:	220d      	movs	r2, #13
 8002036:	e72f      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002038:	046a      	lsls	r2, r5, #17
 800203a:	d501      	bpl.n	8002040 <HAL_ADC_ConfigChannel+0x22c>
 800203c:	220e      	movs	r2, #14
 800203e:	e72b      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002040:	042a      	lsls	r2, r5, #16
 8002042:	d504      	bpl.n	800204e <HAL_ADC_ConfigChannel+0x23a>
 8002044:	4652      	mov	r2, sl
 8002046:	9801      	ldr	r0, [sp, #4]
 8002048:	4302      	orrs	r2, r0
 800204a:	4690      	mov	r8, r2
 800204c:	e729      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x8e>
 800204e:	03ea      	lsls	r2, r5, #15
 8002050:	d501      	bpl.n	8002056 <HAL_ADC_ConfigChannel+0x242>
 8002052:	2210      	movs	r2, #16
 8002054:	e720      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002056:	03aa      	lsls	r2, r5, #14
 8002058:	d501      	bpl.n	800205e <HAL_ADC_ConfigChannel+0x24a>
 800205a:	2211      	movs	r2, #17
 800205c:	e71c      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 800205e:	036a      	lsls	r2, r5, #13
 8002060:	d400      	bmi.n	8002064 <HAL_ADC_ConfigChannel+0x250>
 8002062:	e71e      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x8e>
 8002064:	2212      	movs	r2, #18
 8002066:	e717      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x84>
 8002068:	07ffff00 	.word	0x07ffff00
 800206c:	40012708 	.word	0x40012708
 8002070:	b0001000 	.word	0xb0001000
 8002074:	b8004000 	.word	0xb8004000
 8002078:	b4002000 	.word	0xb4002000
 800207c:	fe3fffff 	.word	0xfe3fffff
 8002080:	20000000 	.word	0x20000000
 8002084:	00030d40 	.word	0x00030d40

08002088 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800208a:	2201      	movs	r2, #1
{
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002092:	6803      	ldr	r3, [r0, #0]
{
 8002094:	0004      	movs	r4, r0
 8002096:	6899      	ldr	r1, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002098:	420a      	tst	r2, r1
 800209a:	d11f      	bne.n	80020dc <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800209c:	6898      	ldr	r0, [r3, #8]
 800209e:	4928      	ldr	r1, [pc, #160]	; (8002140 <ADC_Enable+0xb8>)
 80020a0:	4208      	tst	r0, r1
 80020a2:	d11e      	bne.n	80020e2 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	4827      	ldr	r0, [pc, #156]	; (8002144 <ADC_Enable+0xbc>)
 80020a8:	4001      	ands	r1, r0
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <ADC_Enable+0xc0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	d50f      	bpl.n	80020d6 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <ADC_Enable+0xc4>)
 80020b8:	4925      	ldr	r1, [pc, #148]	; (8002150 <ADC_Enable+0xc8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f7fe f820 	bl	8000100 <__udivsi3>
 80020c0:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80020c2:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80020c4:	9b01      	ldr	r3, [sp, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <ADC_Enable+0x4e>
        wait_loop_index--;
 80020ca:	9b01      	ldr	r3, [sp, #4]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80020d6:	7e63      	ldrb	r3, [r4, #25]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10b      	bne.n	80020f4 <ADC_Enable+0x6c>
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	b003      	add	sp, #12
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	2110      	movs	r1, #16
 80020e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e8:	430b      	orrs	r3, r1
 80020ea:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020ee:	431a      	orrs	r2, r3
 80020f0:	65e2      	str	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80020f2:	e7f4      	b.n	80020de <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80020f4:	f7ff fc46 	bl	8001984 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f8:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80020fa:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	07d2      	lsls	r2, r2, #31
 8002100:	d4ec      	bmi.n	80020dc <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002102:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8002104:	4f0f      	ldr	r7, [pc, #60]	; (8002144 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002106:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002108:	4215      	tst	r5, r2
 800210a:	d103      	bne.n	8002114 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	403a      	ands	r2, r7
 8002110:	432a      	orrs	r2, r5
 8002112:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002114:	f7ff fc36 	bl	8001984 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002118:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800211a:	1b80      	subs	r0, r0, r6
 800211c:	2802      	cmp	r0, #2
 800211e:	d902      	bls.n	8002126 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4215      	tst	r5, r2
 8002124:	d003      	beq.n	800212e <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4215      	tst	r5, r2
 800212a:	d0ec      	beq.n	8002106 <ADC_Enable+0x7e>
 800212c:	e7d6      	b.n	80020dc <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	2210      	movs	r2, #16
 8002130:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8002132:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	4313      	orrs	r3, r2
 8002136:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800213a:	431d      	orrs	r5, r3
 800213c:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800213e:	e7ce      	b.n	80020de <ADC_Enable+0x56>
 8002140:	80000017 	.word	0x80000017
 8002144:	7fffffe8 	.word	0x7fffffe8
 8002148:	40012708 	.word	0x40012708
 800214c:	20000000 	.word	0x20000000
 8002150:	00030d40 	.word	0x00030d40

08002154 <HAL_ADC_Start_DMA>:
{
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002158:	6805      	ldr	r5, [r0, #0]
{
 800215a:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215c:	68ae      	ldr	r6, [r5, #8]
 800215e:	4688      	mov	r8, r1
 8002160:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 8002162:	2002      	movs	r0, #2
{
 8002164:	b500      	push	{lr}
 8002166:	0773      	lsls	r3, r6, #29
 8002168:	d414      	bmi.n	8002194 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 800216a:	2254      	movs	r2, #84	; 0x54
 800216c:	5ca3      	ldrb	r3, [r4, r2]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d010      	beq.n	8002194 <HAL_ADC_Start_DMA+0x40>
 8002172:	2301      	movs	r3, #1
 8002174:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002176:	68ea      	ldr	r2, [r5, #12]
 8002178:	4213      	tst	r3, r2
 800217a:	d106      	bne.n	800218a <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800217c:	68aa      	ldr	r2, [r5, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800217e:	4213      	tst	r3, r2
 8002180:	d131      	bne.n	80021e6 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002182:	2201      	movs	r2, #1
 8002184:	68eb      	ldr	r3, [r5, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800218a:	0020      	movs	r0, r4
 800218c:	f7ff ff7c 	bl	8002088 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002190:	2800      	cmp	r0, #0
 8002192:	d002      	beq.n	800219a <HAL_ADC_Start_DMA+0x46>
}
 8002194:	bc80      	pop	{r7}
 8002196:	46b8      	mov	r8, r7
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800219a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800219e:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80021a0:	401a      	ands	r2, r3
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4313      	orrs	r3, r2
 80021a8:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ae:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021b2:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021b4:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b8:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ba:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021bc:	231c      	movs	r3, #28
 80021be:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80021c0:	3338      	adds	r3, #56	; 0x38
 80021c2:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c4:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021c6:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021cc:	4642      	mov	r2, r8
 80021ce:	003b      	movs	r3, r7
 80021d0:	3140      	adds	r1, #64	; 0x40
 80021d2:	f000 fa03 	bl	80025dc <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80021d6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80021d8:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_ADC_Start_DMA+0xb0>)
 80021da:	6893      	ldr	r3, [r2, #8]
 80021dc:	400b      	ands	r3, r1
 80021de:	2104      	movs	r1, #4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6093      	str	r3, [r2, #8]
}
 80021e4:	e7d6      	b.n	8002194 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80021e6:	68ab      	ldr	r3, [r5, #8]
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_ADC_Start_DMA+0xb0>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	4318      	orrs	r0, r3
 80021ee:	60a8      	str	r0, [r5, #8]
}
 80021f0:	e7c7      	b.n	8002182 <HAL_ADC_Start_DMA+0x2e>
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	fffff0fe 	.word	0xfffff0fe
 80021f8:	08001c31 	.word	0x08001c31
 80021fc:	08001c01 	.word	0x08001c01
 8002200:	08001c15 	.word	0x08001c15
 8002204:	7fffffe8 	.word	0x7fffffe8

08002208 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002208:	2202      	movs	r2, #2
{
 800220a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800220c:	6803      	ldr	r3, [r0, #0]
{
 800220e:	0004      	movs	r4, r0
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	420a      	tst	r2, r1
 8002214:	d002      	beq.n	800221c <ADC_Disable+0x14>
  return HAL_OK;
 8002216:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002218:	689b      	ldr	r3, [r3, #8]
}
 800221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800221c:	2101      	movs	r1, #1
 800221e:	6898      	ldr	r0, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002220:	4201      	tst	r1, r0
 8002222:	d028      	beq.n	8002276 <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002224:	2705      	movs	r7, #5
 8002226:	6898      	ldr	r0, [r3, #8]
 8002228:	4007      	ands	r7, r0
 800222a:	2f01      	cmp	r7, #1
 800222c:	d008      	beq.n	8002240 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222e:	2210      	movs	r2, #16
 8002230:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8002232:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	4313      	orrs	r3, r2
 8002236:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800223a:	4319      	orrs	r1, r3
 800223c:	65e1      	str	r1, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800223e:	e7ec      	b.n	800221a <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	4812      	ldr	r0, [pc, #72]	; (800228c <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002244:	2501      	movs	r5, #1
 8002246:	4001      	ands	r1, r0
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800224c:	2203      	movs	r2, #3
 800224e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002250:	f7ff fb98 	bl	8001984 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002254:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002256:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	421f      	tst	r7, r3
 800225c:	d00b      	beq.n	8002276 <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225e:	f7ff fb91 	bl	8001984 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002262:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002264:	1b80      	subs	r0, r0, r6
 8002266:	2802      	cmp	r0, #2
 8002268:	d902      	bls.n	8002270 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4215      	tst	r5, r2
 800226e:	d104      	bne.n	800227a <ADC_Disable+0x72>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	421d      	tst	r5, r3
 8002274:	d1f3      	bne.n	800225e <ADC_Disable+0x56>
  return HAL_OK;
 8002276:	2000      	movs	r0, #0
 8002278:	e7cf      	b.n	800221a <ADC_Disable+0x12>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	2210      	movs	r2, #16
 800227c:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	4313      	orrs	r3, r2
 8002282:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002286:	431d      	orrs	r5, r3
 8002288:	65e5      	str	r5, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800228a:	e7c6      	b.n	800221a <ADC_Disable+0x12>
 800228c:	7fffffe8 	.word	0x7fffffe8

08002290 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002292:	46de      	mov	lr, fp
 8002294:	4657      	mov	r7, sl
 8002296:	464e      	mov	r6, r9
 8002298:	4645      	mov	r5, r8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800229a:	2300      	movs	r3, #0
{
 800229c:	b5e0      	push	{r5, r6, r7, lr}
 800229e:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80022a0:	9303      	str	r3, [sp, #12]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80022a2:	3354      	adds	r3, #84	; 0x54
 80022a4:	5cc2      	ldrb	r2, [r0, r3]
{
 80022a6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80022a8:	2a01      	cmp	r2, #1
 80022aa:	d100      	bne.n	80022ae <HAL_ADCEx_Calibration_Start+0x1e>
 80022ac:	e086      	b.n	80023bc <HAL_ADCEx_Calibration_Start+0x12c>
 80022ae:	2701      	movs	r7, #1
 80022b0:	54c7      	strb	r7, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80022b2:	f7ff ffa9 	bl	8002208 <ADC_Disable>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b6:	003d      	movs	r5, r7

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b8:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 80022ba:	9001      	str	r0, [sp, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	4015      	ands	r5, r2
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	4217      	tst	r7, r2
 80022c2:	d137      	bne.n	8002334 <HAL_ADCEx_Calibration_Start+0xa4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80022c6:	4944      	ldr	r1, [pc, #272]	; (80023d8 <HAL_ADCEx_Calibration_Start+0x148>)
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80022c8:	20b4      	movs	r0, #180	; 0xb4
 80022ca:	400a      	ands	r2, r1
 80022cc:	3106      	adds	r1, #6
 80022ce:	31ff      	adds	r1, #255	; 0xff
 80022d0:	430a      	orrs	r2, r1
 80022d2:	65a2      	str	r2, [r4, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80022d4:	68da      	ldr	r2, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80022d6:	4941      	ldr	r1, [pc, #260]	; (80023dc <HAL_ADCEx_Calibration_Start+0x14c>)
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80022d8:	4693      	mov	fp, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	377e      	adds	r7, #126	; 0x7e
 80022de:	400a      	ands	r2, r1
 80022e0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CR,
 80022e2:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <HAL_ADCEx_Calibration_Start+0x150>)
 80022e4:	2108      	movs	r1, #8
 80022e6:	4691      	mov	r9, r2
 80022e8:	3218      	adds	r2, #24
 80022ea:	4690      	mov	r8, r2

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
      {
        wait_loop_index++;
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022ec:	4a3d      	ldr	r2, [pc, #244]	; (80023e4 <HAL_ADCEx_Calibration_Start+0x154>)
 80022ee:	4692      	mov	sl, r2
 80022f0:	e005      	b.n	80022fe <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80022f2:	581a      	ldr	r2, [r3, r0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80022f4:	3901      	subs	r1, #1
 80022f6:	403a      	ands	r2, r7

          return HAL_ERROR;
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80022f8:	18ad      	adds	r5, r5, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80022fa:	2900      	cmp	r1, #0
 80022fc:	d029      	beq.n	8002352 <HAL_ADCEx_Calibration_Start+0xc2>
  MODIFY_REG(ADCx->CR,
 80022fe:	464e      	mov	r6, r9
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	4032      	ands	r2, r6
 8002304:	4646      	mov	r6, r8
 8002306:	4332      	orrs	r2, r6
 8002308:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	2a00      	cmp	r2, #0
 800230e:	daf0      	bge.n	80022f2 <HAL_ADCEx_Calibration_Start+0x62>
        wait_loop_index++;
 8002310:	9a03      	ldr	r2, [sp, #12]
 8002312:	3201      	adds	r2, #1
 8002314:	9203      	str	r2, [sp, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002316:	9a03      	ldr	r2, [sp, #12]
 8002318:	4552      	cmp	r2, sl
 800231a:	d9f6      	bls.n	800230a <HAL_ADCEx_Calibration_Start+0x7a>
          ADC_STATE_CLR_SET(hadc->State,
 800231c:	2212      	movs	r2, #18
 800231e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002320:	4393      	bics	r3, r2
 8002322:	3a02      	subs	r2, #2
 8002324:	4313      	orrs	r3, r2
 8002326:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8002328:	2200      	movs	r2, #0
 800232a:	2354      	movs	r3, #84	; 0x54
 800232c:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 800232e:	3b53      	subs	r3, #83	; 0x53
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	e006      	b.n	8002342 <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002334:	2210      	movs	r2, #16
 8002336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002338:	4313      	orrs	r3, r2
 800233a:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800233c:	2354      	movs	r3, #84	; 0x54
 800233e:	2200      	movs	r2, #0
 8002340:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8002342:	9801      	ldr	r0, [sp, #4]
 8002344:	b005      	add	sp, #20
 8002346:	bcf0      	pop	{r4, r5, r6, r7}
 8002348:	46bb      	mov	fp, r7
 800234a:	46b2      	mov	sl, r6
 800234c:	46a9      	mov	r9, r5
 800234e:	46a0      	mov	r8, r4
 8002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_ADCEx_Calibration_Start+0x150>)
    calibration_factor_accumulated /= calibration_index;
 8002356:	08ed      	lsrs	r5, r5, #3
 8002358:	4691      	mov	r9, r2
 800235a:	4011      	ands	r1, r2
 800235c:	2201      	movs	r2, #1
 800235e:	4311      	orrs	r1, r2
 8002360:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8002362:	4649      	mov	r1, r9
  MODIFY_REG(ADCx->CR,
 8002364:	4690      	mov	r8, r2
  MODIFY_REG(ADCx->CALFACT,
 8002366:	581a      	ldr	r2, [r3, r0]
 8002368:	43ba      	bics	r2, r7
 800236a:	4315      	orrs	r5, r2
 800236c:	501d      	str	r5, [r3, r0]
  MODIFY_REG(ADCx->CR,
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	400a      	ands	r2, r1
 8002372:	2102      	movs	r1, #2
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002378:	f7ff fb04 	bl	8001984 <HAL_GetTick>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800237c:	4641      	mov	r1, r8
 800237e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002380:	0005      	movs	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002382:	689a      	ldr	r2, [r3, #8]
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002384:	4211      	tst	r1, r2
 8002386:	d00c      	beq.n	80023a2 <HAL_ADCEx_Calibration_Start+0x112>
 8002388:	2701      	movs	r7, #1
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800238a:	f7ff fafb 	bl	8001984 <HAL_GetTick>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800238e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002390:	1b40      	subs	r0, r0, r5
 8002392:	2802      	cmp	r0, #2
 8002394:	d902      	bls.n	800239c <HAL_ADCEx_Calibration_Start+0x10c>
 8002396:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002398:	4217      	tst	r7, r2
 800239a:	d112      	bne.n	80023c2 <HAL_ADCEx_Calibration_Start+0x132>
 800239c:	689a      	ldr	r2, [r3, #8]
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800239e:	4217      	tst	r7, r2
 80023a0:	d1f3      	bne.n	800238a <HAL_ADCEx_Calibration_Start+0xfa>
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80023a2:	465f      	mov	r7, fp
 80023a4:	4910      	ldr	r1, [pc, #64]	; (80023e8 <HAL_ADCEx_Calibration_Start+0x158>)
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80023a6:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80023a8:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80023aa:	4317      	orrs	r7, r2
    ADC_STATE_CLR_SET(hadc->State,
 80023ac:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80023ae:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80023b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023b2:	4393      	bics	r3, r2
 80023b4:	3a02      	subs	r2, #2
 80023b6:	4313      	orrs	r3, r2
 80023b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80023ba:	e7bf      	b.n	800233c <HAL_ADCEx_Calibration_Start+0xac>
  __HAL_LOCK(hadc);
 80023bc:	2302      	movs	r3, #2
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	e7bf      	b.n	8002342 <HAL_ADCEx_Calibration_Start+0xb2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	2210      	movs	r2, #16
 80023c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023c6:	4313      	orrs	r3, r2
 80023c8:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023cc:	433b      	orrs	r3, r7
 80023ce:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	e7b5      	b.n	8002342 <HAL_ADCEx_Calibration_Start+0xb2>
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	fffffefd 	.word	0xfffffefd
 80023dc:	ffff7ffc 	.word	0xffff7ffc
 80023e0:	7fffffe8 	.word	0x7fffffe8
 80023e4:	0002f1ff 	.word	0x0002f1ff
 80023e8:	00008003 	.word	0x00008003

080023ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80023ec:	4770      	bx	lr
 80023ee:	46c0      	nop			; (mov r8, r8)

080023f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80023f0:	4770      	bx	lr
 80023f2:	46c0      	nop			; (mov r8, r8)

080023f4 <HAL_ADCEx_EndOfSamplingCallback>:
 80023f4:	4770      	bx	lr
 80023f6:	46c0      	nop			; (mov r8, r8)

080023f8 <HAL_ADCEx_ChannelConfigReadyCallback>:
 80023f8:	4770      	bx	lr
 80023fa:	46c0      	nop			; (mov r8, r8)

080023fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80023fe:	2800      	cmp	r0, #0
 8002400:	db14      	blt.n	800242c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_NVIC_SetPriority+0x5c>)
 8002404:	2203      	movs	r2, #3
 8002406:	469c      	mov	ip, r3
 8002408:	23ff      	movs	r3, #255	; 0xff
 800240a:	0884      	lsrs	r4, r0, #2
 800240c:	4010      	ands	r0, r2
 800240e:	001a      	movs	r2, r3
 8002410:	26c0      	movs	r6, #192	; 0xc0
 8002412:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002414:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002416:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002418:	400b      	ands	r3, r1
 800241a:	4083      	lsls	r3, r0
 800241c:	00a4      	lsls	r4, r4, #2
 800241e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	00b6      	lsls	r6, r6, #2
 8002422:	59a5      	ldr	r5, [r4, r6]
 8002424:	4395      	bics	r5, r2
 8002426:	432b      	orrs	r3, r5
 8002428:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800242a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_NVIC_SetPriority+0x60>)
 800242e:	230f      	movs	r3, #15
 8002430:	4694      	mov	ip, r2
 8002432:	2203      	movs	r2, #3
 8002434:	4003      	ands	r3, r0
 8002436:	4010      	ands	r0, r2
 8002438:	32fc      	adds	r2, #252	; 0xfc
 800243a:	0015      	movs	r5, r2
 800243c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800243e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002440:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002442:	400a      	ands	r2, r1
 8002444:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002446:	3b08      	subs	r3, #8
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4463      	add	r3, ip
 800244e:	69dc      	ldr	r4, [r3, #28]
 8002450:	43ac      	bics	r4, r5
 8002452:	4322      	orrs	r2, r4
 8002454:	61da      	str	r2, [r3, #28]
 8002456:	e7e8      	b.n	800242a <HAL_NVIC_SetPriority+0x2e>
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002460:	2800      	cmp	r0, #0
 8002462:	db05      	blt.n	8002470 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002464:	231f      	movs	r3, #31
 8002466:	4018      	ands	r0, r3
 8002468:	3b1e      	subs	r3, #30
 800246a:	4083      	lsls	r3, r0
 800246c:	4a01      	ldr	r2, [pc, #4]	; (8002474 <HAL_NVIC_EnableIRQ+0x14>)
 800246e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002470:	4770      	bx	lr
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	e000e100 	.word	0xe000e100

08002478 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	1e43      	subs	r3, r0, #1
 800247c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	4293      	cmp	r3, r2
 8002482:	d20e      	bcs.n	80024a2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002484:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002488:	4807      	ldr	r0, [pc, #28]	; (80024a8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248c:	6a03      	ldr	r3, [r0, #32]
 800248e:	0609      	lsls	r1, r1, #24
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	430b      	orrs	r3, r1
 8002496:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	3307      	adds	r3, #7
 80024a0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80024a2:	4770      	bx	lr
 80024a4:	e000e010 	.word	0xe000e010
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ae:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80024b0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80024b2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024b4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80024b6:	2c00      	cmp	r4, #0
 80024b8:	d002      	beq.n	80024c0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ba:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80024bc:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80024be:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80024c0:	251c      	movs	r5, #28
 80024c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024c4:	4e08      	ldr	r6, [pc, #32]	; (80024e8 <DMA_SetConfig+0x3c>)
 80024c6:	4025      	ands	r5, r4
 80024c8:	2401      	movs	r4, #1
 80024ca:	40ac      	lsls	r4, r5
 80024cc:	6877      	ldr	r7, [r6, #4]
 80024ce:	433c      	orrs	r4, r7
 80024d0:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024d2:	6804      	ldr	r4, [r0, #0]
 80024d4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d6:	6883      	ldr	r3, [r0, #8]
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d002      	beq.n	80024e2 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80024dc:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80024de:	60e2      	str	r2, [r4, #12]
  }
}
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80024e2:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80024e4:	60e1      	str	r1, [r4, #12]
 80024e6:	e7fb      	b.n	80024e0 <DMA_SetConfig+0x34>
 80024e8:	40020000 	.word	0x40020000

080024ec <HAL_DMA_Init>:
{
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	46c6      	mov	lr, r8
 80024f0:	0004      	movs	r4, r0
 80024f2:	b500      	push	{lr}
  if (hdma == NULL)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d062      	beq.n	80025be <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f8:	6805      	ldr	r5, [r0, #0]
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_DMA_Init+0xd8>)
 80024fc:	2114      	movs	r1, #20
 80024fe:	18e8      	adds	r0, r5, r3
 8002500:	f7fd fdfe 	bl	8000100 <__udivsi3>
 8002504:	0083      	lsls	r3, r0, #2
 8002506:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	2202      	movs	r2, #2
 800250a:	2325      	movs	r3, #37	; 0x25
 800250c:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	4a2d      	ldr	r2, [pc, #180]	; (80025c8 <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002512:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002514:	4013      	ands	r3, r2
 8002516:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002518:	68e3      	ldr	r3, [r4, #12]
 800251a:	6921      	ldr	r1, [r4, #16]
 800251c:	4333      	orrs	r3, r6
 800251e:	430b      	orrs	r3, r1
 8002520:	6961      	ldr	r1, [r4, #20]
 8002522:	682a      	ldr	r2, [r5, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	69a1      	ldr	r1, [r4, #24]
 8002528:	430b      	orrs	r3, r1
 800252a:	69e1      	ldr	r1, [r4, #28]
 800252c:	430b      	orrs	r3, r1
 800252e:	6a21      	ldr	r1, [r4, #32]
 8002530:	430b      	orrs	r3, r1
 8002532:	4313      	orrs	r3, r2
 8002534:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002538:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800253a:	469c      	mov	ip, r3
 800253c:	4460      	add	r0, ip
 800253e:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002540:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002544:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002546:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002548:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800254a:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800254c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800254e:	f7fd fdd7 	bl	8000100 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002552:	231f      	movs	r3, #31
 8002554:	2201      	movs	r2, #1
 8002556:	4003      	ands	r3, r0
 8002558:	0010      	movs	r0, r2
 800255a:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800255c:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800255e:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002560:	01db      	lsls	r3, r3, #7
 8002562:	429e      	cmp	r6, r3
 8002564:	d021      	beq.n	80025aa <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002566:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002568:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800256a:	6861      	ldr	r1, [r4, #4]
 800256c:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800256e:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002570:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002572:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002574:	2903      	cmp	r1, #3
 8002576:	d81d      	bhi.n	80025b4 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002578:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800257a:	4916      	ldr	r1, [pc, #88]	; (80025d4 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800257c:	4d16      	ldr	r5, [pc, #88]	; (80025d8 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800257e:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002580:	3b01      	subs	r3, #1
 8002582:	4003      	ands	r3, r0
 8002584:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002586:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002588:	0089      	lsls	r1, r1, #2
 800258a:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800258c:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800258e:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002590:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002592:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002594:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002596:	2225      	movs	r2, #37	; 0x25
 8002598:	2101      	movs	r1, #1
  return HAL_OK;
 800259a:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800259e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80025a0:	3a01      	subs	r2, #1
 80025a2:	54a3      	strb	r3, [r4, r2]
}
 80025a4:	bc80      	pop	{r7}
 80025a6:	46b8      	mov	r8, r7
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025aa:	2300      	movs	r3, #0
 80025ac:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025ae:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b0:	4643      	mov	r3, r8
 80025b2:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80025b8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80025bc:	e7ea      	b.n	8002594 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 80025be:	2001      	movs	r0, #1
 80025c0:	e7f0      	b.n	80025a4 <HAL_DMA_Init+0xb8>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	bffdfff8 	.word	0xbffdfff8
 80025c8:	ffff800f 	.word	0xffff800f
 80025cc:	10008200 	.word	0x10008200
 80025d0:	40020880 	.word	0x40020880
 80025d4:	1000823f 	.word	0x1000823f
 80025d8:	40020940 	.word	0x40020940

080025dc <HAL_DMA_Start_IT>:
{
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80025e0:	2024      	movs	r0, #36	; 0x24
 80025e2:	5c25      	ldrb	r5, [r4, r0]
 80025e4:	2d01      	cmp	r5, #1
 80025e6:	d036      	beq.n	8002656 <HAL_DMA_Start_IT+0x7a>
 80025e8:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80025ea:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 80025ec:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80025ee:	5da5      	ldrb	r5, [r4, r6]
 80025f0:	b2ef      	uxtb	r7, r5
 80025f2:	2d01      	cmp	r5, #1
 80025f4:	d005      	beq.n	8002602 <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80025fa:	2300      	movs	r3, #0
 80025fc:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
}
 8002600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002602:	3822      	subs	r0, #34	; 0x22
 8002604:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002608:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800260c:	6828      	ldr	r0, [r5, #0]
 800260e:	43b8      	bics	r0, r7
 8002610:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002612:	0020      	movs	r0, r4
 8002614:	f7ff ff4a 	bl	80024ac <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002618:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01d      	beq.n	800265a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261e:	210e      	movs	r1, #14
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002628:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800262a:	6811      	ldr	r1, [r2, #0]
 800262c:	03c9      	lsls	r1, r1, #15
 800262e:	d504      	bpl.n	800263a <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	6810      	ldr	r0, [r2, #0]
 8002634:	0049      	lsls	r1, r1, #1
 8002636:	4301      	orrs	r1, r0
 8002638:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800263a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800263c:	2a00      	cmp	r2, #0
 800263e:	d004      	beq.n	800264a <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	6810      	ldr	r0, [r2, #0]
 8002644:	0049      	lsls	r1, r1, #1
 8002646:	4301      	orrs	r1, r0
 8002648:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800264a:	2101      	movs	r1, #1
 800264c:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e7d4      	b.n	8002600 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002656:	2002      	movs	r0, #2
 8002658:	e7d2      	b.n	8002600 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800265a:	2104      	movs	r1, #4
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	438a      	bics	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	3106      	adds	r1, #6
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e7dc      	b.n	8002628 <HAL_DMA_Start_IT+0x4c>
 800266e:	46c0      	nop			; (mov r8, r8)

08002670 <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002670:	2325      	movs	r3, #37	; 0x25
{
 8002672:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdma->State == HAL_DMA_STATE_READY)
 8002674:	5cc3      	ldrb	r3, [r0, r3]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d11a      	bne.n	80026b0 <HAL_DMAEx_ConfigMuxSync+0x40>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800267a:	2424      	movs	r4, #36	; 0x24
 800267c:	5d03      	ldrb	r3, [r0, r4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d01a      	beq.n	80026b8 <HAL_DMAEx_ConfigMuxSync+0x48>

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8002682:	68cb      	ldr	r3, [r1, #12]
 8002684:	680a      	ldr	r2, [r1, #0]
 8002686:	684f      	ldr	r7, [r1, #4]
 8002688:	3b01      	subs	r3, #1
 800268a:	433a      	orrs	r2, r7
 800268c:	04db      	lsls	r3, r3, #19
 800268e:	4313      	orrs	r3, r2
 8002690:	7a0a      	ldrb	r2, [r1, #8]
 8002692:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8002694:	0412      	lsls	r2, r2, #16
 8002696:	4313      	orrs	r3, r2
 8002698:	223f      	movs	r2, #63	; 0x3f
 800269a:	7a49      	ldrb	r1, [r1, #9]
 800269c:	682e      	ldr	r6, [r5, #0]
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	430b      	orrs	r3, r1
 80026a2:	4032      	ands	r2, r6
 80026a4:	4313      	orrs	r3, r2
 80026a6:	602b      	str	r3, [r5, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80026a8:	2300      	movs	r3, #0
 80026aa:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80026ac:	2000      	movs	r0, #0
 80026ae:	e002      	b.n	80026b6 <HAL_DMAEx_ConfigMuxSync+0x46>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
  }
}
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hdma);
 80026b8:	2002      	movs	r0, #2
 80026ba:	e7fc      	b.n	80026b6 <HAL_DMAEx_ConfigMuxSync+0x46>

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	46de      	mov	lr, fp
 80026c0:	4657      	mov	r7, sl
 80026c2:	464e      	mov	r6, r9
 80026c4:	4645      	mov	r5, r8
 80026c6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c8:	680c      	ldr	r4, [r1, #0]
{
 80026ca:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026cc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80026ce:	2300      	movs	r3, #0
{
 80026d0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d2:	2c00      	cmp	r4, #0
 80026d4:	d100      	bne.n	80026d8 <HAL_GPIO_Init+0x1c>
 80026d6:	e080      	b.n	80027da <HAL_GPIO_Init+0x11e>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d8:	497b      	ldr	r1, [pc, #492]	; (80028c8 <HAL_GPIO_Init+0x20c>)
 80026da:	468b      	mov	fp, r1
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026dc:	4661      	mov	r1, ip
 80026de:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026e0:	2601      	movs	r6, #1
 80026e2:	0021      	movs	r1, r4
 80026e4:	409e      	lsls	r6, r3
 80026e6:	4031      	ands	r1, r6
 80026e8:	468a      	mov	sl, r1
    if (iocurrent != 0x00u)
 80026ea:	4234      	tst	r4, r6
 80026ec:	d06f      	beq.n	80027ce <HAL_GPIO_Init+0x112>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ee:	9d01      	ldr	r5, [sp, #4]
 80026f0:	6869      	ldr	r1, [r5, #4]
 80026f2:	2503      	movs	r5, #3
 80026f4:	400d      	ands	r5, r1
 80026f6:	46ac      	mov	ip, r5
 80026f8:	3d01      	subs	r5, #1
 80026fa:	2d01      	cmp	r5, #1
 80026fc:	d800      	bhi.n	8002700 <HAL_GPIO_Init+0x44>
 80026fe:	e073      	b.n	80027e8 <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	4665      	mov	r5, ip
 8002702:	2d03      	cmp	r5, #3
 8002704:	d000      	beq.n	8002708 <HAL_GPIO_Init+0x4c>
 8002706:	e0b7      	b.n	8002878 <HAL_GPIO_Init+0x1bc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002708:	4666      	mov	r6, ip
 800270a:	4096      	lsls	r6, r2
 800270c:	43f5      	mvns	r5, r6
 800270e:	9500      	str	r5, [sp, #0]
      temp = GPIOx->MODER;
 8002710:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002712:	9d00      	ldr	r5, [sp, #0]
 8002714:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002716:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8002718:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800271a:	25c0      	movs	r5, #192	; 0xc0
 800271c:	02ad      	lsls	r5, r5, #10
 800271e:	4229      	tst	r1, r5
 8002720:	d055      	beq.n	80027ce <HAL_GPIO_Init+0x112>
        temp = EXTI->EXTICR[position >> 2u];
 8002722:	4e69      	ldr	r6, [pc, #420]	; (80028c8 <HAL_GPIO_Init+0x20c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002724:	2703      	movs	r7, #3
 8002726:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 8002728:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800272a:	401f      	ands	r7, r3
 800272c:	00ff      	lsls	r7, r7, #3
 800272e:	00ad      	lsls	r5, r5, #2
 8002730:	4465      	add	r5, ip
 8002732:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 8002734:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002736:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 8002738:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800273a:	4666      	mov	r6, ip
 800273c:	40b7      	lsls	r7, r6
 800273e:	003e      	movs	r6, r7
 8002740:	464f      	mov	r7, r9
 8002742:	43b7      	bics	r7, r6
 8002744:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002746:	27a0      	movs	r7, #160	; 0xa0
 8002748:	05ff      	lsls	r7, r7, #23
 800274a:	42b8      	cmp	r0, r7
 800274c:	d012      	beq.n	8002774 <HAL_GPIO_Init+0xb8>
 800274e:	4f5f      	ldr	r7, [pc, #380]	; (80028cc <HAL_GPIO_Init+0x210>)
 8002750:	42b8      	cmp	r0, r7
 8002752:	d100      	bne.n	8002756 <HAL_GPIO_Init+0x9a>
 8002754:	e0a8      	b.n	80028a8 <HAL_GPIO_Init+0x1ec>
 8002756:	4f5e      	ldr	r7, [pc, #376]	; (80028d0 <HAL_GPIO_Init+0x214>)
 8002758:	42b8      	cmp	r0, r7
 800275a:	d100      	bne.n	800275e <HAL_GPIO_Init+0xa2>
 800275c:	e0ac      	b.n	80028b8 <HAL_GPIO_Init+0x1fc>
 800275e:	4f5d      	ldr	r7, [pc, #372]	; (80028d4 <HAL_GPIO_Init+0x218>)
 8002760:	42b8      	cmp	r0, r7
 8002762:	d100      	bne.n	8002766 <HAL_GPIO_Init+0xaa>
 8002764:	e099      	b.n	800289a <HAL_GPIO_Init+0x1de>
 8002766:	4666      	mov	r6, ip
 8002768:	2705      	movs	r7, #5
 800276a:	40b7      	lsls	r7, r6
 800276c:	003e      	movs	r6, r7
 800276e:	464f      	mov	r7, r9
 8002770:	4337      	orrs	r7, r6
 8002772:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8002774:	464e      	mov	r6, r9
 8002776:	662e      	str	r6, [r5, #96]	; 0x60
        temp &= ~(iocurrent);
 8002778:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277a:	2780      	movs	r7, #128	; 0x80
        temp = EXTI->RTSR1;
 800277c:	465d      	mov	r5, fp
        temp &= ~(iocurrent);
 800277e:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002780:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8002782:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 8002784:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002786:	4239      	tst	r1, r7
 8002788:	d000      	beq.n	800278c <HAL_GPIO_Init+0xd0>
 800278a:	e083      	b.n	8002894 <HAL_GPIO_Init+0x1d8>
        temp &= ~(iocurrent);
 800278c:	4035      	ands	r5, r6
        EXTI->RTSR1 = temp;
 800278e:	465f      	mov	r7, fp
 8002790:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 8002792:	687d      	ldr	r5, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002794:	2780      	movs	r7, #128	; 0x80
 8002796:	03bf      	lsls	r7, r7, #14
 8002798:	4239      	tst	r1, r7
 800279a:	d000      	beq.n	800279e <HAL_GPIO_Init+0xe2>
 800279c:	e077      	b.n	800288e <HAL_GPIO_Init+0x1d2>
        temp &= ~(iocurrent);
 800279e:	4646      	mov	r6, r8
 80027a0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80027a2:	465f      	mov	r7, fp
 80027a4:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027a6:	2584      	movs	r5, #132	; 0x84
 80027a8:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027aa:	038e      	lsls	r6, r1, #14
 80027ac:	d46c      	bmi.n	8002888 <HAL_GPIO_Init+0x1cc>
        temp &= ~(iocurrent);
 80027ae:	4646      	mov	r6, r8
 80027b0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80027b2:	2784      	movs	r7, #132	; 0x84
 80027b4:	46bc      	mov	ip, r7
 80027b6:	465f      	mov	r7, fp
 80027b8:	4666      	mov	r6, ip
 80027ba:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 80027bc:	2580      	movs	r5, #128	; 0x80
 80027be:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c0:	03c9      	lsls	r1, r1, #15
 80027c2:	d45e      	bmi.n	8002882 <HAL_GPIO_Init+0x1c6>
        temp &= ~(iocurrent);
 80027c4:	4646      	mov	r6, r8
 80027c6:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80027c8:	2580      	movs	r5, #128	; 0x80
 80027ca:	4659      	mov	r1, fp
 80027cc:	514e      	str	r6, [r1, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ce:	0021      	movs	r1, r4
      }
    }

    position++;
 80027d0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	40d9      	lsrs	r1, r3
 80027d4:	3202      	adds	r2, #2
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d182      	bne.n	80026e0 <HAL_GPIO_Init+0x24>
  }
}
 80027da:	b003      	add	sp, #12
 80027dc:	bcf0      	pop	{r4, r5, r6, r7}
 80027de:	46bb      	mov	fp, r7
 80027e0:	46b2      	mov	sl, r6
 80027e2:	46a9      	mov	r9, r5
 80027e4:	46a0      	mov	r8, r4
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80027e8:	6885      	ldr	r5, [r0, #8]
 80027ea:	46a8      	mov	r8, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ec:	2503      	movs	r5, #3
 80027ee:	4095      	lsls	r5, r2
 80027f0:	43ef      	mvns	r7, r5
 80027f2:	9700      	str	r7, [sp, #0]
 80027f4:	4647      	mov	r7, r8
 80027f6:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027fa:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027fc:	68ef      	ldr	r7, [r5, #12]
 80027fe:	4097      	lsls	r7, r2
 8002800:	46b8      	mov	r8, r7
 8002802:	464f      	mov	r7, r9
 8002804:	4645      	mov	r5, r8
 8002806:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8002808:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800280a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800280c:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280e:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002810:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002812:	090e      	lsrs	r6, r1, #4
 8002814:	402e      	ands	r6, r5
 8002816:	409e      	lsls	r6, r3
 8002818:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800281a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800281c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800281e:	9d00      	ldr	r5, [sp, #0]
 8002820:	402e      	ands	r6, r5
 8002822:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002824:	9d01      	ldr	r5, [sp, #4]
 8002826:	4647      	mov	r7, r8
 8002828:	68ae      	ldr	r6, [r5, #8]
 800282a:	4096      	lsls	r6, r2
 800282c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800282e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	4667      	mov	r7, ip
 8002832:	4666      	mov	r6, ip
 8002834:	4096      	lsls	r6, r2
 8002836:	2f02      	cmp	r7, #2
 8002838:	d000      	beq.n	800283c <HAL_GPIO_Init+0x180>
 800283a:	e769      	b.n	8002710 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3u];
 800283c:	08dd      	lsrs	r5, r3, #3
 800283e:	00ad      	lsls	r5, r5, #2
 8002840:	46ac      	mov	ip, r5
 8002842:	4484      	add	ip, r0
 8002844:	4665      	mov	r5, ip
 8002846:	6a2d      	ldr	r5, [r5, #32]
 8002848:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800284a:	2507      	movs	r5, #7
 800284c:	002f      	movs	r7, r5
 800284e:	401f      	ands	r7, r3
 8002850:	00bd      	lsls	r5, r7, #2
 8002852:	270f      	movs	r7, #15
 8002854:	46a8      	mov	r8, r5
 8002856:	40af      	lsls	r7, r5
 8002858:	464d      	mov	r5, r9
 800285a:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285c:	4647      	mov	r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800285e:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002860:	9d01      	ldr	r5, [sp, #4]
 8002862:	692d      	ldr	r5, [r5, #16]
 8002864:	40bd      	lsls	r5, r7
 8002866:	46a8      	mov	r8, r5
 8002868:	464d      	mov	r5, r9
 800286a:	4647      	mov	r7, r8
 800286c:	433d      	orrs	r5, r7
 800286e:	46a9      	mov	r9, r5
        GPIOx->AFR[position >> 3u] = temp;
 8002870:	4665      	mov	r5, ip
 8002872:	464f      	mov	r7, r9
 8002874:	622f      	str	r7, [r5, #32]
 8002876:	e74b      	b.n	8002710 <HAL_GPIO_Init+0x54>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002878:	2503      	movs	r5, #3
 800287a:	4095      	lsls	r5, r2
 800287c:	43ed      	mvns	r5, r5
 800287e:	9500      	str	r5, [sp, #0]
 8002880:	e7cc      	b.n	800281c <HAL_GPIO_Init+0x160>
          temp |= iocurrent;
 8002882:	4656      	mov	r6, sl
 8002884:	432e      	orrs	r6, r5
 8002886:	e79f      	b.n	80027c8 <HAL_GPIO_Init+0x10c>
          temp |= iocurrent;
 8002888:	4656      	mov	r6, sl
 800288a:	4335      	orrs	r5, r6
 800288c:	e791      	b.n	80027b2 <HAL_GPIO_Init+0xf6>
          temp |= iocurrent;
 800288e:	4656      	mov	r6, sl
 8002890:	4335      	orrs	r5, r6
 8002892:	e786      	b.n	80027a2 <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8002894:	4656      	mov	r6, sl
 8002896:	4335      	orrs	r5, r6
 8002898:	e779      	b.n	800278e <HAL_GPIO_Init+0xd2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800289a:	4667      	mov	r7, ip
 800289c:	2603      	movs	r6, #3
 800289e:	40be      	lsls	r6, r7
 80028a0:	464f      	mov	r7, r9
 80028a2:	4337      	orrs	r7, r6
 80028a4:	46b9      	mov	r9, r7
 80028a6:	e765      	b.n	8002774 <HAL_GPIO_Init+0xb8>
 80028a8:	4666      	mov	r6, ip
 80028aa:	2701      	movs	r7, #1
 80028ac:	40b7      	lsls	r7, r6
 80028ae:	003e      	movs	r6, r7
 80028b0:	464f      	mov	r7, r9
 80028b2:	4337      	orrs	r7, r6
 80028b4:	46b9      	mov	r9, r7
 80028b6:	e75d      	b.n	8002774 <HAL_GPIO_Init+0xb8>
 80028b8:	4667      	mov	r7, ip
 80028ba:	2602      	movs	r6, #2
 80028bc:	40be      	lsls	r6, r7
 80028be:	464f      	mov	r7, r9
 80028c0:	4337      	orrs	r7, r6
 80028c2:	46b9      	mov	r9, r7
 80028c4:	e756      	b.n	8002774 <HAL_GPIO_Init+0xb8>
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40021800 	.word	0x40021800
 80028cc:	50000400 	.word	0x50000400
 80028d0:	50000800 	.word	0x50000800
 80028d4:	50000c00 	.word	0x50000c00

080028d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028da:	4c13      	ldr	r4, [pc, #76]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80028dc:	4a13      	ldr	r2, [pc, #76]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x54>)
 80028de:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80028e0:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028e2:	4013      	ands	r3, r2
 80028e4:	4303      	orrs	r3, r0
 80028e6:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4298      	cmp	r0, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80028f0:	0028      	movs	r0, r5
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80028f6:	490f      	ldr	r1, [pc, #60]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0058      	lsls	r0, r3, #1
 80028fc:	18c0      	adds	r0, r0, r3
 80028fe:	0040      	lsls	r0, r0, #1
 8002900:	f7fd fbfe 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	6963      	ldr	r3, [r4, #20]
 8002908:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800290a:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800290c:	4213      	tst	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8002910:	e7ee      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8002912:	2800      	cmp	r0, #0
 8002914:	d005      	beq.n	8002922 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002916:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8002918:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800291a:	4213      	tst	r3, r2
 800291c:	d1f9      	bne.n	8002912 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800291e:	2500      	movs	r5, #0
 8002920:	e7e6      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8002922:	2503      	movs	r5, #3
 8002924:	e7e4      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x18>
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40007000 	.word	0x40007000
 800292c:	fffff9ff 	.word	0xfffff9ff
 8002930:	20000000 	.word	0x20000000
 8002934:	000f4240 	.word	0x000f4240

08002938 <HAL_RCC_GetSysClockFreq.part.0>:
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002938:	2038      	movs	r0, #56	; 0x38
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800293c:	b510      	push	{r4, lr}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	4002      	ands	r2, r0
 8002942:	2a10      	cmp	r2, #16
 8002944:	d00d      	beq.n	8002962 <HAL_RCC_GetSysClockFreq.part.0+0x2a>
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4002      	ands	r2, r0
 800294a:	2a20      	cmp	r2, #32
 800294c:	d01f      	beq.n	800298e <HAL_RCC_GetSysClockFreq.part.0+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4018      	ands	r0, r3
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
  }
  else
  {
    sysclockfreq = 0U;
 8002952:	3818      	subs	r0, #24
 8002954:	4243      	negs	r3, r0
 8002956:	4158      	adcs	r0, r3
 8002958:	23fa      	movs	r3, #250	; 0xfa
 800295a:	4240      	negs	r0, r0
 800295c:	01db      	lsls	r3, r3, #7
 800295e:	4018      	ands	r0, r3
  }

  return sysclockfreq;
}
 8002960:	bd10      	pop	{r4, pc}
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002962:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002964:	68d9      	ldr	r1, [r3, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002966:	43d2      	mvns	r2, r2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002968:	68d8      	ldr	r0, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800296a:	0649      	lsls	r1, r1, #25
 800296c:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800296e:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002970:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002972:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 8002974:	0792      	lsls	r2, r2, #30
 8002976:	d00d      	beq.n	8002994 <HAL_RCC_GetSysClockFreq.part.0+0x5c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002978:	480a      	ldr	r0, [pc, #40]	; (80029a4 <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 800297a:	f7fd fbc1 	bl	8000100 <__udivsi3>
 800297e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 8002982:	68d9      	ldr	r1, [r3, #12]
 8002984:	0f49      	lsrs	r1, r1, #29
 8002986:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002988:	f7fd fbba 	bl	8000100 <__udivsi3>
 800298c:	e7e8      	b.n	8002960 <HAL_RCC_GetSysClockFreq.part.0+0x28>
    sysclockfreq = LSE_VALUE;
 800298e:	2080      	movs	r0, #128	; 0x80
 8002990:	0200      	lsls	r0, r0, #8
 8002992:	e7e5      	b.n	8002960 <HAL_RCC_GetSysClockFreq.part.0+0x28>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 8002996:	f7fd fbb3 	bl	8000100 <__udivsi3>
 800299a:	4360      	muls	r0, r4
        break;
 800299c:	e7f0      	b.n	8002980 <HAL_RCC_GetSysClockFreq.part.0+0x48>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	40021000 	.word	0x40021000
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_OscConfig>:
{
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	46ce      	mov	lr, r9
 80029b0:	4647      	mov	r7, r8
 80029b2:	b580      	push	{r7, lr}
 80029b4:	0004      	movs	r4, r0
 80029b6:	b083      	sub	sp, #12
  if (RCC_OscInitStruct == NULL)
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d100      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
 80029bc:	e0f5      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	6803      	ldr	r3, [r0, #0]
 80029c0:	07da      	lsls	r2, r3, #31
 80029c2:	d531      	bpl.n	8002a28 <HAL_RCC_OscConfig+0x7c>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c4:	2238      	movs	r2, #56	; 0x38
 80029c6:	49c8      	ldr	r1, [pc, #800]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 80029c8:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ca:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029cc:	4002      	ands	r2, r0
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029ce:	2a10      	cmp	r2, #16
 80029d0:	d100      	bne.n	80029d4 <HAL_RCC_OscConfig+0x28>
 80029d2:	e0f0      	b.n	8002bb6 <HAL_RCC_OscConfig+0x20a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80029d4:	2a08      	cmp	r2, #8
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x2e>
 80029d8:	e0f1      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	0252      	lsls	r2, r2, #9
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3a>
 80029e4:	e0fe      	b.n	8002be4 <HAL_RCC_OscConfig+0x238>
 80029e6:	21a0      	movs	r1, #160	; 0xa0
 80029e8:	02c9      	lsls	r1, r1, #11
 80029ea:	428b      	cmp	r3, r1
 80029ec:	d100      	bne.n	80029f0 <HAL_RCC_OscConfig+0x44>
 80029ee:	e1d2      	b.n	8002d96 <HAL_RCC_OscConfig+0x3ea>
 80029f0:	4dbd      	ldr	r5, [pc, #756]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 80029f2:	49be      	ldr	r1, [pc, #760]	; (8002cec <HAL_RCC_OscConfig+0x340>)
 80029f4:	682a      	ldr	r2, [r5, #0]
 80029f6:	400a      	ands	r2, r1
 80029f8:	602a      	str	r2, [r5, #0]
 80029fa:	682a      	ldr	r2, [r5, #0]
 80029fc:	49bc      	ldr	r1, [pc, #752]	; (8002cf0 <HAL_RCC_OscConfig+0x344>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d000      	beq.n	8002a08 <HAL_RCC_OscConfig+0x5c>
 8002a06:	e0f1      	b.n	8002bec <HAL_RCC_OscConfig+0x240>
        tickstart = HAL_GetTick();
 8002a08:	f7fe ffbc 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002a0e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a10:	02bf      	lsls	r7, r7, #10
 8002a12:	e005      	b.n	8002a20 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe ffb6 	bl	8001984 <HAL_GetTick>
 8002a18:	1b80      	subs	r0, r0, r6
 8002a1a:	2864      	cmp	r0, #100	; 0x64
 8002a1c:	d900      	bls.n	8002a20 <HAL_RCC_OscConfig+0x74>
 8002a1e:	e139      	b.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	423b      	tst	r3, r7
 8002a24:	d1f6      	bne.n	8002a14 <HAL_RCC_OscConfig+0x68>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	079a      	lsls	r2, r3, #30
 8002a2a:	d52c      	bpl.n	8002a86 <HAL_RCC_OscConfig+0xda>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2c:	2338      	movs	r3, #56	; 0x38
 8002a2e:	4aae      	ldr	r2, [pc, #696]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002a30:	6891      	ldr	r1, [r2, #8]
 8002a32:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a34:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d100      	bne.n	8002a3c <HAL_RCC_OscConfig+0x90>
 8002a3a:	e0e8      	b.n	8002c0e <HAL_RCC_OscConfig+0x262>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d000      	beq.n	8002a42 <HAL_RCC_OscConfig+0x96>
 8002a40:	e0ea      	b.n	8002c18 <HAL_RCC_OscConfig+0x26c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	055b      	lsls	r3, r3, #21
 8002a46:	d500      	bpl.n	8002a4a <HAL_RCC_OscConfig+0x9e>
 8002a48:	e0ab      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	6851      	ldr	r1, [r2, #4]
 8002a4c:	6963      	ldr	r3, [r4, #20]
 8002a4e:	48a9      	ldr	r0, [pc, #676]	; (8002cf4 <HAL_RCC_OscConfig+0x348>)
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	4001      	ands	r1, r0
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a58:	4aa3      	ldr	r2, [pc, #652]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002a5a:	49a7      	ldr	r1, [pc, #668]	; (8002cf8 <HAL_RCC_OscConfig+0x34c>)
 8002a5c:	6813      	ldr	r3, [r2, #0]
 8002a5e:	400b      	ands	r3, r1
 8002a60:	6921      	ldr	r1, [r4, #16]
 8002a62:	430b      	orrs	r3, r1
 8002a64:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	4aa4      	ldr	r2, [pc, #656]	; (8002cfc <HAL_RCC_OscConfig+0x350>)
 8002a6a:	049b      	lsls	r3, r3, #18
 8002a6c:	0f5b      	lsrs	r3, r3, #29
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	4aa3      	ldr	r2, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x354>)
 8002a74:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a76:	4ba3      	ldr	r3, [pc, #652]	; (8002d04 <HAL_RCC_OscConfig+0x358>)
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f7fe ff3d 	bl	80018f8 <HAL_InitTick>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d000      	beq.n	8002a84 <HAL_RCC_OscConfig+0xd8>
 8002a82:	e092      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	071a      	lsls	r2, r3, #28
 8002a88:	d46d      	bmi.n	8002b66 <HAL_RCC_OscConfig+0x1ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8a:	075b      	lsls	r3, r3, #29
 8002a8c:	d545      	bpl.n	8002b1a <HAL_RCC_OscConfig+0x16e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a8e:	2338      	movs	r3, #56	; 0x38
 8002a90:	4a95      	ldr	r2, [pc, #596]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002a92:	6891      	ldr	r1, [r2, #8]
 8002a94:	400b      	ands	r3, r1
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d100      	bne.n	8002a9c <HAL_RCC_OscConfig+0xf0>
 8002a9a:	e0e3      	b.n	8002c64 <HAL_RCC_OscConfig+0x2b8>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a9c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002aa2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002aa4:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa6:	4219      	tst	r1, r3
 8002aa8:	d108      	bne.n	8002abc <HAL_RCC_OscConfig+0x110>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002aac:	4319      	orrs	r1, r3
 8002aae:	63d1      	str	r1, [r2, #60]	; 0x3c
 8002ab0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	2780      	movs	r7, #128	; 0x80
 8002abe:	4e92      	ldr	r6, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x35c>)
 8002ac0:	007f      	lsls	r7, r7, #1
 8002ac2:	6833      	ldr	r3, [r6, #0]
 8002ac4:	423b      	tst	r3, r7
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x11e>
 8002ac8:	e0d5      	b.n	8002c76 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aca:	68a3      	ldr	r3, [r4, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d100      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x126>
 8002ad0:	e124      	b.n	8002d1c <HAL_RCC_OscConfig+0x370>
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d100      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
 8002ad6:	e1bb      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a4>
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4e83      	ldr	r6, [pc, #524]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002adc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8002ade:	438a      	bics	r2, r1
 8002ae0:	65f2      	str	r2, [r6, #92]	; 0x5c
 8002ae2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8002ae4:	3103      	adds	r1, #3
 8002ae6:	438a      	bics	r2, r1
 8002ae8:	65f2      	str	r2, [r6, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d000      	beq.n	8002af0 <HAL_RCC_OscConfig+0x144>
 8002aee:	e119      	b.n	8002d24 <HAL_RCC_OscConfig+0x378>
        tickstart = HAL_GetTick();
 8002af0:	f7fe ff48 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af4:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8002af6:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af8:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	4d84      	ldr	r5, [pc, #528]	; (8002d0c <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	e005      	b.n	8002b0a <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe ff41 	bl	8001984 <HAL_GetTick>
 8002b02:	1bc0      	subs	r0, r0, r7
 8002b04:	42a8      	cmp	r0, r5
 8002b06:	d900      	bls.n	8002b0a <HAL_RCC_OscConfig+0x15e>
 8002b08:	e0c4      	b.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b0a:	4642      	mov	r2, r8
 8002b0c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002b0e:	421a      	tst	r2, r3
 8002b10:	d1f5      	bne.n	8002afe <HAL_RCC_OscConfig+0x152>
      if (pwrclkchanged == SET)
 8002b12:	464b      	mov	r3, r9
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d100      	bne.n	8002b1a <HAL_RCC_OscConfig+0x16e>
 8002b18:	e156      	b.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b1a:	69e3      	ldr	r3, [r4, #28]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1b6>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b20:	2238      	movs	r2, #56	; 0x38
 8002b22:	4d71      	ldr	r5, [pc, #452]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002b24:	68a9      	ldr	r1, [r5, #8]
 8002b26:	400a      	ands	r2, r1
 8002b28:	2a10      	cmp	r2, #16
 8002b2a:	d100      	bne.n	8002b2e <HAL_RCC_OscConfig+0x182>
 8002b2c:	e10c      	b.n	8002d48 <HAL_RCC_OscConfig+0x39c>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d100      	bne.n	8002b34 <HAL_RCC_OscConfig+0x188>
 8002b32:	e14f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_DISABLE();
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	4a76      	ldr	r2, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x364>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b38:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b3e:	f7fe ff21 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b42:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002b44:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe ff1c 	bl	8001984 <HAL_GetTick>
 8002b4c:	1b00      	subs	r0, r0, r4
 8002b4e:	2802      	cmp	r0, #2
 8002b50:	d900      	bls.n	8002b54 <HAL_RCC_OscConfig+0x1a8>
 8002b52:	e09f      	b.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	4233      	tst	r3, r6
 8002b58:	d1f6      	bne.n	8002b48 <HAL_RCC_OscConfig+0x19c>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b5a:	68eb      	ldr	r3, [r5, #12]
 8002b5c:	4a6d      	ldr	r2, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x368>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8002b62:	2000      	movs	r0, #0
 8002b64:	e022      	b.n	8002bac <HAL_RCC_OscConfig+0x200>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b66:	2238      	movs	r2, #56	; 0x38
 8002b68:	4d5f      	ldr	r5, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002b6a:	68a9      	ldr	r1, [r5, #8]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	2a18      	cmp	r2, #24
 8002b70:	d02f      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x226>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b72:	69a3      	ldr	r3, [r4, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d100      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1ce>
 8002b78:	e08e      	b.n	8002c98 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_LSI_ENABLE();
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002b80:	4313      	orrs	r3, r2
 8002b82:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002b84:	f7fe fefe 	bl	8001984 <HAL_GetTick>
 8002b88:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fefa 	bl	8001984 <HAL_GetTick>
 8002b90:	1b80      	subs	r0, r0, r6
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d900      	bls.n	8002b98 <HAL_RCC_OscConfig+0x1ec>
 8002b96:	e07d      	b.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b98:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002b9a:	421f      	tst	r7, r3
 8002b9c:	d0f6      	beq.n	8002b8c <HAL_RCC_OscConfig+0x1e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	e773      	b.n	8002a8a <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d000      	beq.n	8002baa <HAL_RCC_OscConfig+0x1fe>
 8002ba8:	e74f      	b.n	8002a4a <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
}
 8002bac:	b003      	add	sp, #12
 8002bae:	bcc0      	pop	{r6, r7}
 8002bb0:	46b9      	mov	r9, r7
 8002bb2:	46b0      	mov	r8, r6
 8002bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb6:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002bb8:	078a      	lsls	r2, r1, #30
 8002bba:	d000      	beq.n	8002bbe <HAL_RCC_OscConfig+0x212>
 8002bbc:	e70d      	b.n	80029da <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	0392      	lsls	r2, r2, #14
 8002bc4:	d400      	bmi.n	8002bc8 <HAL_RCC_OscConfig+0x21c>
 8002bc6:	e72f      	b.n	8002a28 <HAL_RCC_OscConfig+0x7c>
 8002bc8:	6862      	ldr	r2, [r4, #4]
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d000      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x224>
 8002bce:	e72b      	b.n	8002a28 <HAL_RCC_OscConfig+0x7c>
 8002bd0:	e7eb      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002bd2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002bd4:	0792      	lsls	r2, r2, #30
 8002bd6:	d400      	bmi.n	8002bda <HAL_RCC_OscConfig+0x22e>
 8002bd8:	e757      	b.n	8002a8a <HAL_RCC_OscConfig+0xde>
 8002bda:	69a2      	ldr	r2, [r4, #24]
 8002bdc:	2a00      	cmp	r2, #0
 8002bde:	d000      	beq.n	8002be2 <HAL_RCC_OscConfig+0x236>
 8002be0:	e753      	b.n	8002a8a <HAL_RCC_OscConfig+0xde>
 8002be2:	e7e2      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be4:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002be6:	6811      	ldr	r1, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bec:	f7fe feca 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002bf2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf4:	4f3c      	ldr	r7, [pc, #240]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
 8002bf6:	02b6      	lsls	r6, r6, #10
 8002bf8:	e004      	b.n	8002c04 <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fec3 	bl	8001984 <HAL_GetTick>
 8002bfe:	1b40      	subs	r0, r0, r5
 8002c00:	2864      	cmp	r0, #100	; 0x64
 8002c02:	d847      	bhi.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4233      	tst	r3, r6
 8002c08:	d0f7      	beq.n	8002bfa <HAL_RCC_OscConfig+0x24e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	e70c      	b.n	8002a28 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c0e:	3b0d      	subs	r3, #13
 8002c10:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d100      	bne.n	8002c18 <HAL_RCC_OscConfig+0x26c>
 8002c16:	e0c8      	b.n	8002daa <HAL_RCC_OscConfig+0x3fe>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c18:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c1a:	4d33      	ldr	r5, [pc, #204]	; (8002ce8 <HAL_RCC_OscConfig+0x33c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d04e      	beq.n	8002cbe <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <HAL_RCC_OscConfig+0x34c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c26:	4013      	ands	r3, r2
 8002c28:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	682a      	ldr	r2, [r5, #0]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fea3 	bl	8001984 <HAL_GetTick>
 8002c3e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c40:	e004      	b.n	8002c4c <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe fe9f 	bl	8001984 <HAL_GetTick>
 8002c46:	1b80      	subs	r0, r0, r6
 8002c48:	2802      	cmp	r0, #2
 8002c4a:	d823      	bhi.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	423b      	tst	r3, r7
 8002c50:	d0f7      	beq.n	8002c42 <HAL_RCC_OscConfig+0x296>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	686a      	ldr	r2, [r5, #4]
 8002c54:	6963      	ldr	r3, [r4, #20]
 8002c56:	4927      	ldr	r1, [pc, #156]	; (8002cf4 <HAL_RCC_OscConfig+0x348>)
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	e710      	b.n	8002a86 <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c64:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002c66:	079b      	lsls	r3, r3, #30
 8002c68:	d400      	bmi.n	8002c6c <HAL_RCC_OscConfig+0x2c0>
 8002c6a:	e756      	b.n	8002b1a <HAL_RCC_OscConfig+0x16e>
 8002c6c:	68a3      	ldr	r3, [r4, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d000      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
 8002c72:	e752      	b.n	8002b1a <HAL_RCC_OscConfig+0x16e>
 8002c74:	e799      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c76:	6833      	ldr	r3, [r6, #0]
 8002c78:	433b      	orrs	r3, r7
 8002c7a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe82 	bl	8001984 <HAL_GetTick>
 8002c80:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c82:	6833      	ldr	r3, [r6, #0]
 8002c84:	423b      	tst	r3, r7
 8002c86:	d000      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2de>
 8002c88:	e71f      	b.n	8002aca <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe fe7b 	bl	8001984 <HAL_GetTick>
 8002c8e:	1b40      	subs	r0, r0, r5
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d9f6      	bls.n	8002c82 <HAL_RCC_OscConfig+0x2d6>
            return HAL_TIMEOUT;
 8002c94:	2003      	movs	r0, #3
 8002c96:	e789      	b.n	8002bac <HAL_RCC_OscConfig+0x200>
        __HAL_RCC_LSI_DISABLE();
 8002c98:	2201      	movs	r2, #1
 8002c9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fe6f 	bl	8001984 <HAL_GetTick>
 8002ca6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCC_OscConfig+0x308>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fe6b 	bl	8001984 <HAL_GetTick>
 8002cae:	1b80      	subs	r0, r0, r6
 8002cb0:	2802      	cmp	r0, #2
 8002cb2:	d8ef      	bhi.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002cb6:	421f      	tst	r7, r3
 8002cb8:	d1f7      	bne.n	8002caa <HAL_RCC_OscConfig+0x2fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	e6e5      	b.n	8002a8a <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_RCC_OscConfig+0x36c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fe5c 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ccc:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8002cce:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd0:	e004      	b.n	8002cdc <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fe57 	bl	8001984 <HAL_GetTick>
 8002cd6:	1b80      	subs	r0, r0, r6
 8002cd8:	2802      	cmp	r0, #2
 8002cda:	d8db      	bhi.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	423b      	tst	r3, r7
 8002ce0:	d1f7      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x326>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	e6cf      	b.n	8002a86 <HAL_RCC_OscConfig+0xda>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	fffeffff 	.word	0xfffeffff
 8002cf0:	fffbffff 	.word	0xfffbffff
 8002cf4:	ffff80ff 	.word	0xffff80ff
 8002cf8:	ffffc7ff 	.word	0xffffc7ff
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000008 	.word	0x20000008
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	00001388 	.word	0x00001388
 8002d10:	feffffff 	.word	0xfeffffff
 8002d14:	effefffc 	.word	0xeffefffc
 8002d18:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	4951      	ldr	r1, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x4b8>)
 8002d1e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8002d20:	4313      	orrs	r3, r2
 8002d22:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002d24:	f7fe fe2e 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d28:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8002d2a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2c:	4698      	mov	r8, r3
 8002d2e:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	4d4d      	ldr	r5, [pc, #308]	; (8002e68 <HAL_RCC_OscConfig+0x4bc>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d32:	e004      	b.n	8002d3e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fe26 	bl	8001984 <HAL_GetTick>
 8002d38:	1b80      	subs	r0, r0, r6
 8002d3a:	42a8      	cmp	r0, r5
 8002d3c:	d8aa      	bhi.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4643      	mov	r3, r8
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	421f      	tst	r7, r3
 8002d44:	d0f6      	beq.n	8002d34 <HAL_RCC_OscConfig+0x388>
 8002d46:	e6e4      	b.n	8002b12 <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d100      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
 8002d4c:	e72d      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002d50:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	6a21      	ldr	r1, [r4, #32]
 8002d54:	4013      	ands	r3, r2
 8002d56:	428b      	cmp	r3, r1
 8002d58:	d000      	beq.n	8002d5c <HAL_RCC_OscConfig+0x3b0>
 8002d5a:	e726      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5c:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d60:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	428b      	cmp	r3, r1
 8002d64:	d000      	beq.n	8002d68 <HAL_RCC_OscConfig+0x3bc>
 8002d66:	e720      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d68:	21fe      	movs	r1, #254	; 0xfe
 8002d6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d6c:	01c9      	lsls	r1, r1, #7
 8002d6e:	4011      	ands	r1, r2
 8002d70:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d72:	4299      	cmp	r1, r3
 8002d74:	d000      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3cc>
 8002d76:	e718      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d78:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d7c:	039b      	lsls	r3, r3, #14
 8002d7e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d000      	beq.n	8002d86 <HAL_RCC_OscConfig+0x3da>
 8002d84:	e711      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d88:	0f52      	lsrs	r2, r2, #29
 8002d8a:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d000      	beq.n	8002d92 <HAL_RCC_OscConfig+0x3e6>
 8002d90:	e70b      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
  return HAL_OK;
 8002d92:	2000      	movs	r0, #0
 8002d94:	e70a      	b.n	8002bac <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	02c9      	lsls	r1, r1, #11
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	4301      	orrs	r1, r0
 8002da0:	6019      	str	r1, [r3, #0]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	e720      	b.n	8002bec <HAL_RCC_OscConfig+0x240>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	055b      	lsls	r3, r3, #21
 8002dae:	d503      	bpl.n	8002db8 <HAL_RCC_OscConfig+0x40c>
 8002db0:	68e3      	ldr	r3, [r4, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d100      	bne.n	8002db8 <HAL_RCC_OscConfig+0x40c>
 8002db6:	e6f8      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	6851      	ldr	r1, [r2, #4]
 8002dba:	6963      	ldr	r3, [r4, #20]
 8002dbc:	482b      	ldr	r0, [pc, #172]	; (8002e6c <HAL_RCC_OscConfig+0x4c0>)
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	4001      	ands	r1, r0
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc6:	e656      	b.n	8002a76 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <HAL_RCC_OscConfig+0x4b8>)
 8002dca:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002dce:	400b      	ands	r3, r1
 8002dd0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002dd2:	e6a2      	b.n	8002b1a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4013      	ands	r3, r2
 8002ddc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dde:	f7fe fdd1 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002de4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_OscConfig+0x448>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fdcc 	bl	8001984 <HAL_GetTick>
 8002dec:	1b80      	subs	r0, r0, r6
 8002dee:	2802      	cmp	r0, #2
 8002df0:	d900      	bls.n	8002df4 <HAL_RCC_OscConfig+0x448>
 8002df2:	e74f      	b.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	423b      	tst	r3, r7
 8002df8:	d1f6      	bne.n	8002de8 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002dfc:	6a23      	ldr	r3, [r4, #32]
 8002dfe:	68ea      	ldr	r2, [r5, #12]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	491d      	ldr	r1, [pc, #116]	; (8002e78 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e04:	4e17      	ldr	r6, [pc, #92]	; (8002e64 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	400a      	ands	r2, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e10:	4313      	orrs	r3, r2
 8002e12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e14:	0212      	lsls	r2, r2, #8
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	682a      	ldr	r2, [r5, #0]
 8002e1e:	045b      	lsls	r3, r3, #17
 8002e20:	4313      	orrs	r3, r2
 8002e22:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	68ea      	ldr	r2, [r5, #12]
 8002e28:	055b      	lsls	r3, r3, #21
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fda9 	bl	8001984 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002e34:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	04ad      	lsls	r5, r5, #18
 8002e38:	e005      	b.n	8002e46 <HAL_RCC_OscConfig+0x49a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe fda3 	bl	8001984 <HAL_GetTick>
 8002e3e:	1b00      	subs	r0, r0, r4
 8002e40:	2802      	cmp	r0, #2
 8002e42:	d900      	bls.n	8002e46 <HAL_RCC_OscConfig+0x49a>
 8002e44:	e726      	b.n	8002c94 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	422b      	tst	r3, r5
 8002e4a:	d0f6      	beq.n	8002e3a <HAL_RCC_OscConfig+0x48e>
  return HAL_OK;
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	e6ad      	b.n	8002bac <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	2104      	movs	r1, #4
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <HAL_RCC_OscConfig+0x4b8>)
 8002e54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e56:	430a      	orrs	r2, r1
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e5c:	3903      	subs	r1, #3
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e62:	e75f      	b.n	8002d24 <HAL_RCC_OscConfig+0x378>
 8002e64:	40021000 	.word	0x40021000
 8002e68:	00001388 	.word	0x00001388
 8002e6c:	ffff80ff 	.word	0xffff80ff
 8002e70:	efffffff 	.word	0xefffffff
 8002e74:	feffffff 	.word	0xfeffffff
 8002e78:	1fc1808c 	.word	0x1fc1808c

08002e7c <HAL_RCC_ClockConfig>:
{
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	46ce      	mov	lr, r9
 8002e80:	4647      	mov	r7, r8
 8002e82:	0005      	movs	r5, r0
 8002e84:	000c      	movs	r4, r1
 8002e86:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d027      	beq.n	8002edc <HAL_RCC_ClockConfig+0x60>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	4e5e      	ldr	r6, [pc, #376]	; (8003008 <HAL_RCC_ClockConfig+0x18c>)
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	4013      	ands	r3, r2
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d200      	bcs.n	8002e9a <HAL_RCC_ClockConfig+0x1e>
 8002e98:	e06e      	b.n	8002f78 <HAL_RCC_ClockConfig+0xfc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	682b      	ldr	r3, [r5, #0]
 8002e9c:	079a      	lsls	r2, r3, #30
 8002e9e:	d50e      	bpl.n	8002ebe <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	075a      	lsls	r2, r3, #29
 8002ea2:	d505      	bpl.n	8002eb0 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ea4:	22e0      	movs	r2, #224	; 0xe0
 8002ea6:	4959      	ldr	r1, [pc, #356]	; (800300c <HAL_RCC_ClockConfig+0x190>)
 8002ea8:	01d2      	lsls	r2, r2, #7
 8002eaa:	6888      	ldr	r0, [r1, #8]
 8002eac:	4302      	orrs	r2, r0
 8002eae:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4956      	ldr	r1, [pc, #344]	; (800300c <HAL_RCC_ClockConfig+0x190>)
 8002eb2:	4857      	ldr	r0, [pc, #348]	; (8003010 <HAL_RCC_ClockConfig+0x194>)
 8002eb4:	688a      	ldr	r2, [r1, #8]
 8002eb6:	4002      	ands	r2, r0
 8002eb8:	68a8      	ldr	r0, [r5, #8]
 8002eba:	4302      	orrs	r2, r0
 8002ebc:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	07db      	lsls	r3, r3, #31
 8002ec0:	d52e      	bpl.n	8002f20 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec4:	4a51      	ldr	r2, [pc, #324]	; (800300c <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d100      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x50>
 8002eca:	e08a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x166>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x6a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d000      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x5a>
 8002ed4:	e089      	b.n	8002fea <HAL_RCC_ClockConfig+0x16e>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	0552      	lsls	r2, r2, #21
 8002eda:	d407      	bmi.n	8002eec <HAL_RCC_ClockConfig+0x70>
    return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
}
 8002ede:	bcc0      	pop	{r6, r7}
 8002ee0:	46b9      	mov	r9, r7
 8002ee2:	46b0      	mov	r8, r6
 8002ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	0192      	lsls	r2, r2, #6
 8002eea:	d5f7      	bpl.n	8002edc <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eec:	2107      	movs	r1, #7
 8002eee:	4e47      	ldr	r6, [pc, #284]	; (800300c <HAL_RCC_ClockConfig+0x190>)
 8002ef0:	68b2      	ldr	r2, [r6, #8]
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ef8:	f7fe fd44 	bl	8001984 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efc:	2338      	movs	r3, #56	; 0x38
 8002efe:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f00:	4b44      	ldr	r3, [pc, #272]	; (8003014 <HAL_RCC_ClockConfig+0x198>)
    tickstart = HAL_GetTick();
 8002f02:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	e004      	b.n	8002f12 <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f08:	f7fe fd3c 	bl	8001984 <HAL_GetTick>
 8002f0c:	1bc0      	subs	r0, r0, r7
 8002f0e:	4548      	cmp	r0, r9
 8002f10:	d848      	bhi.n	8002fa4 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4643      	mov	r3, r8
 8002f14:	68b2      	ldr	r2, [r6, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	686b      	ldr	r3, [r5, #4]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1f3      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	2207      	movs	r2, #7
 8002f22:	4e39      	ldr	r6, [pc, #228]	; (8003008 <HAL_RCC_ClockConfig+0x18c>)
 8002f24:	6833      	ldr	r3, [r6, #0]
 8002f26:	4013      	ands	r3, r2
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d843      	bhi.n	8002fb4 <HAL_RCC_ClockConfig+0x138>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	075b      	lsls	r3, r3, #29
 8002f30:	d506      	bpl.n	8002f40 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f32:	4a36      	ldr	r2, [pc, #216]	; (800300c <HAL_RCC_ClockConfig+0x190>)
 8002f34:	4938      	ldr	r1, [pc, #224]	; (8003018 <HAL_RCC_ClockConfig+0x19c>)
 8002f36:	6893      	ldr	r3, [r2, #8]
 8002f38:	400b      	ands	r3, r1
 8002f3a:	68e9      	ldr	r1, [r5, #12]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6093      	str	r3, [r2, #8]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f40:	2338      	movs	r3, #56	; 0x38
 8002f42:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_RCC_ClockConfig+0x190>)
 8002f44:	6891      	ldr	r1, [r2, #8]
 8002f46:	420b      	tst	r3, r1
 8002f48:	d02e      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x12c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d057      	beq.n	8003002 <HAL_RCC_ClockConfig+0x186>
 8002f52:	f7ff fcf1 	bl	8002938 <HAL_RCC_GetSysClockFreq.part.0>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_ClockConfig+0x190>)
 8002f58:	4a30      	ldr	r2, [pc, #192]	; (800301c <HAL_RCC_ClockConfig+0x1a0>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	051b      	lsls	r3, r3, #20
 8002f5e:	0f1b      	lsrs	r3, r3, #28
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	589b      	ldr	r3, [r3, r2]
 8002f64:	221f      	movs	r2, #31
 8002f66:	4013      	ands	r3, r2
 8002f68:	40d8      	lsrs	r0, r3
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_RCC_ClockConfig+0x1a4>)
 8002f6c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_ClockConfig+0x1a8>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	f7fe fcc1 	bl	80018f8 <HAL_InitTick>
 8002f76:	e7b2      	b.n	8002ede <HAL_RCC_ClockConfig+0x62>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f78:	6833      	ldr	r3, [r6, #0]
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002f80:	f7fe fd00 	bl	8001984 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f84:	2307      	movs	r3, #7
 8002f86:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x198>)
    tickstart = HAL_GetTick();
 8002f8a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f8e:	4642      	mov	r2, r8
 8002f90:	6833      	ldr	r3, [r6, #0]
 8002f92:	4013      	ands	r3, r2
 8002f94:	42a3      	cmp	r3, r4
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x11e>
 8002f98:	e77f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9a:	f7fe fcf3 	bl	8001984 <HAL_GetTick>
 8002f9e:	1bc0      	subs	r0, r0, r7
 8002fa0:	4548      	cmp	r0, r9
 8002fa2:	d9f4      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	e79a      	b.n	8002ede <HAL_RCC_ClockConfig+0x62>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002fa8:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002faa:	481f      	ldr	r0, [pc, #124]	; (8003028 <HAL_RCC_ClockConfig+0x1ac>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002fac:	049b      	lsls	r3, r3, #18
 8002fae:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002fb0:	40d8      	lsrs	r0, r3
 8002fb2:	e7d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	4393      	bics	r3, r2
 8002fb8:	4323      	orrs	r3, r4
 8002fba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fce2 	bl	8001984 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_RCC_ClockConfig+0x198>)
    tickstart = HAL_GetTick();
 8002fc6:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fca:	4642      	mov	r2, r8
 8002fcc:	6833      	ldr	r3, [r6, #0]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	d0ab      	beq.n	8002f2c <HAL_RCC_ClockConfig+0xb0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fe fcd6 	bl	8001984 <HAL_GetTick>
 8002fd8:	1bc0      	subs	r0, r0, r7
 8002fda:	4548      	cmp	r0, r9
 8002fdc:	d9f5      	bls.n	8002fca <HAL_RCC_ClockConfig+0x14e>
        return HAL_TIMEOUT;
 8002fde:	2003      	movs	r0, #3
 8002fe0:	e77d      	b.n	8002ede <HAL_RCC_ClockConfig+0x62>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	0392      	lsls	r2, r2, #14
 8002fe6:	d481      	bmi.n	8002eec <HAL_RCC_ClockConfig+0x70>
 8002fe8:	e778      	b.n	8002edc <HAL_RCC_ClockConfig+0x60>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d004      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x17c>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ff0:	0792      	lsls	r2, r2, #30
 8002ff2:	d500      	bpl.n	8002ff6 <HAL_RCC_ClockConfig+0x17a>
 8002ff4:	e77a      	b.n	8002eec <HAL_RCC_ClockConfig+0x70>
 8002ff6:	e771      	b.n	8002edc <HAL_RCC_ClockConfig+0x60>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002ffa:	0792      	lsls	r2, r2, #30
 8002ffc:	d500      	bpl.n	8003000 <HAL_RCC_ClockConfig+0x184>
 8002ffe:	e775      	b.n	8002eec <HAL_RCC_ClockConfig+0x70>
 8003000:	e76c      	b.n	8002edc <HAL_RCC_ClockConfig+0x60>
    sysclockfreq = HSE_VALUE;
 8003002:	480a      	ldr	r0, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8003004:	e7a7      	b.n	8002f56 <HAL_RCC_ClockConfig+0xda>
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40022000 	.word	0x40022000
 800300c:	40021000 	.word	0x40021000
 8003010:	fffff0ff 	.word	0xfffff0ff
 8003014:	00001388 	.word	0x00001388
 8003018:	ffff8fff 	.word	0xffff8fff
 800301c:	080039c8 	.word	0x080039c8
 8003020:	20000000 	.word	0x20000000
 8003024:	20000008 	.word	0x20000008
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	46ce      	mov	lr, r9
 8003034:	4647      	mov	r7, r8
 8003036:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003038:	6803      	ldr	r3, [r0, #0]
{
 800303a:	0004      	movs	r4, r0
 800303c:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800303e:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003040:	039a      	lsls	r2, r3, #14
 8003042:	d54f      	bpl.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003048:	0552      	lsls	r2, r2, #21
 800304a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800304c:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4211      	tst	r1, r2
 8003050:	d100      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003052:	e078      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003054:	2780      	movs	r7, #128	; 0x80
 8003056:	4d4e      	ldr	r5, [pc, #312]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003058:	007f      	lsls	r7, r7, #1
 800305a:	682b      	ldr	r3, [r5, #0]
 800305c:	433b      	orrs	r3, r7
 800305e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003060:	f7fe fc90 	bl	8001984 <HAL_GetTick>
 8003064:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003066:	e005      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7fe fc8c 	bl	8001984 <HAL_GetTick>
 800306c:	1b80      	subs	r0, r0, r6
 800306e:	2802      	cmp	r0, #2
 8003070:	d900      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003072:	e072      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	423b      	tst	r3, r7
 8003078:	d0f6      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800307a:	4d44      	ldr	r5, [pc, #272]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800307c:	23c0      	movs	r3, #192	; 0xc0
 800307e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	0011      	movs	r1, r2
 8003084:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003086:	421a      	tst	r2, r3
 8003088:	d020      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800308a:	6960      	ldr	r0, [r4, #20]
 800308c:	4288      	cmp	r0, r1
 800308e:	d01e      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003090:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003092:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8003094:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8003096:	0252      	lsls	r2, r2, #9
 8003098:	4332      	orrs	r2, r6
 800309a:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x164>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030a0:	4e3d      	ldr	r6, [pc, #244]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x168>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030a2:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030a4:	4032      	ands	r2, r6
 80030a6:	65ea      	str	r2, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030a8:	65eb      	str	r3, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030aa:	07cb      	lsls	r3, r1, #31
 80030ac:	d56c      	bpl.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe fc69 	bl	8001984 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
        tickstart = HAL_GetTick();
 80030b4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe fc62 	bl	8001984 <HAL_GetTick>
 80030c0:	1b80      	subs	r0, r0, r6
 80030c2:	4548      	cmp	r0, r9
 80030c4:	d849      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80030c8:	421f      	tst	r7, r3
 80030ca:	d0f7      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030cc:	6961      	ldr	r1, [r4, #20]
 80030ce:	4a2f      	ldr	r2, [pc, #188]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030d0:	4830      	ldr	r0, [pc, #192]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80030d4:	4003      	ands	r3, r0
 80030d6:	430b      	orrs	r3, r1
 80030d8:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030da:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030dc:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d03f      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	07da      	lsls	r2, r3, #31
 80030e6:	d506      	bpl.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e8:	2503      	movs	r5, #3
 80030ea:	4928      	ldr	r1, [pc, #160]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030ec:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80030ee:	43aa      	bics	r2, r5
 80030f0:	6865      	ldr	r5, [r4, #4]
 80030f2:	432a      	orrs	r2, r5
 80030f4:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f6:	069a      	lsls	r2, r3, #26
 80030f8:	d506      	bpl.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fa:	4924      	ldr	r1, [pc, #144]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030fc:	4d28      	ldr	r5, [pc, #160]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80030fe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003100:	402a      	ands	r2, r5
 8003102:	68a5      	ldr	r5, [r4, #8]
 8003104:	432a      	orrs	r2, r5
 8003106:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003108:	045a      	lsls	r2, r3, #17
 800310a:	d50a      	bpl.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800310c:	491f      	ldr	r1, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800310e:	6925      	ldr	r5, [r4, #16]
 8003110:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	0892      	lsrs	r2, r2, #2
 8003116:	432a      	orrs	r2, r5
 8003118:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	05d2      	lsls	r2, r2, #23
 800311e:	4295      	cmp	r5, r2
 8003120:	d026      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x140>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003122:	051b      	lsls	r3, r3, #20
 8003124:	d50a      	bpl.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003126:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003128:	68e1      	ldr	r1, [r4, #12]
 800312a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800312c:	4c1d      	ldr	r4, [pc, #116]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800312e:	4023      	ands	r3, r4
 8003130:	430b      	orrs	r3, r1
 8003132:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	4299      	cmp	r1, r3
 800313a:	d01f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800313c:	b003      	add	sp, #12
 800313e:	bcc0      	pop	{r6, r7}
 8003140:	46b9      	mov	r9, r7
 8003142:	46b0      	mov	r8, r6
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003148:	4311      	orrs	r1, r2
 800314a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	401a      	ands	r2, r3
 8003150:	9201      	str	r2, [sp, #4]
 8003152:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003154:	2301      	movs	r3, #1
 8003156:	4698      	mov	r8, r3
 8003158:	e77c      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 800315a:	4643      	mov	r3, r8
        ret = HAL_TIMEOUT;
 800315c:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 800315e:	2b01      	cmp	r3, #1
 8003160:	d1bf      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003164:	4910      	ldr	r1, [pc, #64]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003166:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003168:	400b      	ands	r3, r1
 800316a:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	e7b9      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	68cd      	ldr	r5, [r1, #12]
 8003174:	0252      	lsls	r2, r2, #9
 8003176:	432a      	orrs	r2, r5
 8003178:	60ca      	str	r2, [r1, #12]
 800317a:	e7d2      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	68d1      	ldr	r1, [r2, #12]
 8003180:	025b      	lsls	r3, r3, #9
 8003182:	430b      	orrs	r3, r1
 8003184:	60d3      	str	r3, [r2, #12]
  return status;
 8003186:	e7d9      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003188:	0001      	movs	r1, r0
 800318a:	e7a0      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	fffffcff 	.word	0xfffffcff
 8003198:	fffeffff 	.word	0xfffeffff
 800319c:	00001388 	.word	0x00001388
 80031a0:	ffffcfff 	.word	0xffffcfff
 80031a4:	ffff3fff 	.word	0xffff3fff
 80031a8:	efffffff 	.word	0xefffffff

080031ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ac:	2201      	movs	r2, #1
 80031ae:	6a03      	ldr	r3, [r0, #32]
{
 80031b0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b2:	4393      	bics	r3, r2
 80031b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b8:	4d12      	ldr	r5, [pc, #72]	; (8003204 <TIM_OC1_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80031ba:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80031bc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031be:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c0:	680d      	ldr	r5, [r1, #0]
 80031c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c4:	2502      	movs	r5, #2
 80031c6:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031c8:	688d      	ldr	r5, [r1, #8]
 80031ca:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031cc:	4d0e      	ldr	r5, [pc, #56]	; (8003208 <TIM_OC1_SetConfig+0x5c>)
 80031ce:	42a8      	cmp	r0, r5
 80031d0:	d005      	beq.n	80031de <TIM_OC1_SetConfig+0x32>
 80031d2:	4d0e      	ldr	r5, [pc, #56]	; (800320c <TIM_OC1_SetConfig+0x60>)
 80031d4:	42a8      	cmp	r0, r5
 80031d6:	d002      	beq.n	80031de <TIM_OC1_SetConfig+0x32>
 80031d8:	4d0d      	ldr	r5, [pc, #52]	; (8003210 <TIM_OC1_SetConfig+0x64>)
 80031da:	42a8      	cmp	r0, r5
 80031dc:	d10b      	bne.n	80031f6 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031de:	2508      	movs	r5, #8
 80031e0:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031e4:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80031e6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80031e8:	2504      	movs	r5, #4
 80031ea:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031ec:	4d09      	ldr	r5, [pc, #36]	; (8003214 <TIM_OC1_SetConfig+0x68>)
 80031ee:	402c      	ands	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80031f0:	694d      	ldr	r5, [r1, #20]
 80031f2:	4335      	orrs	r5, r6
 80031f4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031f8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031fa:	684a      	ldr	r2, [r1, #4]
 80031fc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fe:	6203      	str	r3, [r0, #32]
}
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	fffeff8c 	.word	0xfffeff8c
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40014400 	.word	0x40014400
 8003210:	40014800 	.word	0x40014800
 8003214:	fffffcff 	.word	0xfffffcff

08003218 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003218:	6a03      	ldr	r3, [r0, #32]
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <TIM_OC3_SetConfig+0x60>)
{
 800321c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800321e:	4013      	ands	r3, r2
 8003220:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003224:	4d15      	ldr	r5, [pc, #84]	; (800327c <TIM_OC3_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8003226:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003228:	69c2      	ldr	r2, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800322a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800322c:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800322e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <TIM_OC3_SetConfig+0x68>)
 8003232:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003234:	688a      	ldr	r2, [r1, #8]
 8003236:	0212      	lsls	r2, r2, #8
 8003238:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <TIM_OC3_SetConfig+0x6c>)
 800323c:	4290      	cmp	r0, r2
 800323e:	d012      	beq.n	8003266 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <TIM_OC3_SetConfig+0x70>)
 8003242:	4290      	cmp	r0, r2
 8003244:	d002      	beq.n	800324c <TIM_OC3_SetConfig+0x34>
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <TIM_OC3_SetConfig+0x74>)
 8003248:	4290      	cmp	r0, r2
 800324a:	d106      	bne.n	800325a <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324c:	4a10      	ldr	r2, [pc, #64]	; (8003290 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800324e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003250:	4022      	ands	r2, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003252:	698c      	ldr	r4, [r1, #24]
 8003254:	432c      	orrs	r4, r5
 8003256:	0124      	lsls	r4, r4, #4
 8003258:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800325a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800325c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800325e:	61c6      	str	r6, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003260:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	6203      	str	r3, [r0, #32]
}
 8003264:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <TIM_OC3_SetConfig+0x7c>)
 8003268:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326a:	68cb      	ldr	r3, [r1, #12]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <TIM_OC3_SetConfig+0x80>)
 8003272:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003274:	e7ea      	b.n	800324c <TIM_OC3_SetConfig+0x34>
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	fffffeff 	.word	0xfffffeff
 800327c:	fffeff8c 	.word	0xfffeff8c
 8003280:	fffffdff 	.word	0xfffffdff
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40014400 	.word	0x40014400
 800328c:	40014800 	.word	0x40014800
 8003290:	ffffcfff 	.word	0xffffcfff
 8003294:	fffff7ff 	.word	0xfffff7ff
 8003298:	fffffbff 	.word	0xfffffbff

0800329c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800329c:	6a03      	ldr	r3, [r0, #32]
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <TIM_OC4_SetConfig+0x4c>)
{
 80032a0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a2:	4013      	ands	r3, r2
 80032a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032a8:	4c10      	ldr	r4, [pc, #64]	; (80032ec <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80032aa:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80032ac:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032ae:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	680c      	ldr	r4, [r1, #0]
 80032b2:	0224      	lsls	r4, r4, #8
 80032b4:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032b6:	4c0e      	ldr	r4, [pc, #56]	; (80032f0 <TIM_OC4_SetConfig+0x54>)
 80032b8:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ba:	688b      	ldr	r3, [r1, #8]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c0:	4c0c      	ldr	r4, [pc, #48]	; (80032f4 <TIM_OC4_SetConfig+0x58>)
 80032c2:	42a0      	cmp	r0, r4
 80032c4:	d005      	beq.n	80032d2 <TIM_OC4_SetConfig+0x36>
 80032c6:	4c0c      	ldr	r4, [pc, #48]	; (80032f8 <TIM_OC4_SetConfig+0x5c>)
 80032c8:	42a0      	cmp	r0, r4
 80032ca:	d002      	beq.n	80032d2 <TIM_OC4_SetConfig+0x36>
 80032cc:	4c0b      	ldr	r4, [pc, #44]	; (80032fc <TIM_OC4_SetConfig+0x60>)
 80032ce:	42a0      	cmp	r0, r4
 80032d0:	d104      	bne.n	80032dc <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d2:	4c0b      	ldr	r4, [pc, #44]	; (8003300 <TIM_OC4_SetConfig+0x64>)
 80032d4:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032d6:	694c      	ldr	r4, [r1, #20]
 80032d8:	01a4      	lsls	r4, r4, #6
 80032da:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032dc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032de:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032e0:	684a      	ldr	r2, [r1, #4]
 80032e2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e4:	6203      	str	r3, [r0, #32]
}
 80032e6:	bd30      	pop	{r4, r5, pc}
 80032e8:	ffffefff 	.word	0xffffefff
 80032ec:	feff8cff 	.word	0xfeff8cff
 80032f0:	ffffdfff 	.word	0xffffdfff
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40014400 	.word	0x40014400
 80032fc:	40014800 	.word	0x40014800
 8003300:	ffffbfff 	.word	0xffffbfff

08003304 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003304:	6a03      	ldr	r3, [r0, #32]
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <TIM_OC5_SetConfig+0x4c>)
{
 8003308:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800330a:	4013      	ands	r3, r2
 800330c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003310:	4c10      	ldr	r4, [pc, #64]	; (8003354 <TIM_OC5_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003312:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003314:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003316:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	680c      	ldr	r4, [r1, #0]
 800331a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800331c:	4c0e      	ldr	r4, [pc, #56]	; (8003358 <TIM_OC5_SetConfig+0x54>)
 800331e:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003320:	688b      	ldr	r3, [r1, #8]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003326:	4c0d      	ldr	r4, [pc, #52]	; (800335c <TIM_OC5_SetConfig+0x58>)
 8003328:	42a0      	cmp	r0, r4
 800332a:	d005      	beq.n	8003338 <TIM_OC5_SetConfig+0x34>
 800332c:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <TIM_OC5_SetConfig+0x5c>)
 800332e:	42a0      	cmp	r0, r4
 8003330:	d002      	beq.n	8003338 <TIM_OC5_SetConfig+0x34>
 8003332:	4c0c      	ldr	r4, [pc, #48]	; (8003364 <TIM_OC5_SetConfig+0x60>)
 8003334:	42a0      	cmp	r0, r4
 8003336:	d104      	bne.n	8003342 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003338:	4c05      	ldr	r4, [pc, #20]	; (8003350 <TIM_OC5_SetConfig+0x4c>)
 800333a:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800333c:	694c      	ldr	r4, [r1, #20]
 800333e:	0224      	lsls	r4, r4, #8
 8003340:	4325      	orrs	r5, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003344:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003346:	684a      	ldr	r2, [r1, #4]
 8003348:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	6203      	str	r3, [r0, #32]
}
 800334c:	bd30      	pop	{r4, r5, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	fffeffff 	.word	0xfffeffff
 8003354:	fffeff8f 	.word	0xfffeff8f
 8003358:	fffdffff 	.word	0xfffdffff
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003368:	6a03      	ldr	r3, [r0, #32]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_OC6_SetConfig+0x4c>)
{
 800336c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800336e:	4013      	ands	r3, r2
 8003370:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003374:	4c10      	ldr	r4, [pc, #64]	; (80033b8 <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003376:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003378:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800337a:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	680c      	ldr	r4, [r1, #0]
 800337e:	0224      	lsls	r4, r4, #8
 8003380:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003382:	4c0e      	ldr	r4, [pc, #56]	; (80033bc <TIM_OC6_SetConfig+0x54>)
 8003384:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003386:	688b      	ldr	r3, [r1, #8]
 8003388:	051b      	lsls	r3, r3, #20
 800338a:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	4c0c      	ldr	r4, [pc, #48]	; (80033c0 <TIM_OC6_SetConfig+0x58>)
 800338e:	42a0      	cmp	r0, r4
 8003390:	d005      	beq.n	800339e <TIM_OC6_SetConfig+0x36>
 8003392:	4c0c      	ldr	r4, [pc, #48]	; (80033c4 <TIM_OC6_SetConfig+0x5c>)
 8003394:	42a0      	cmp	r0, r4
 8003396:	d002      	beq.n	800339e <TIM_OC6_SetConfig+0x36>
 8003398:	4c0b      	ldr	r4, [pc, #44]	; (80033c8 <TIM_OC6_SetConfig+0x60>)
 800339a:	42a0      	cmp	r0, r4
 800339c:	d104      	bne.n	80033a8 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800339e:	4c0b      	ldr	r4, [pc, #44]	; (80033cc <TIM_OC6_SetConfig+0x64>)
 80033a0:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033a2:	694c      	ldr	r4, [r1, #20]
 80033a4:	02a4      	lsls	r4, r4, #10
 80033a6:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033aa:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033ac:	684a      	ldr	r2, [r1, #4]
 80033ae:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b0:	6203      	str	r3, [r0, #32]
}
 80033b2:	bd30      	pop	{r4, r5, pc}
 80033b4:	ffefffff 	.word	0xffefffff
 80033b8:	feff8fff 	.word	0xfeff8fff
 80033bc:	ffdfffff 	.word	0xffdfffff
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40014400 	.word	0x40014400
 80033c8:	40014800 	.word	0x40014800
 80033cc:	fffbffff 	.word	0xfffbffff

080033d0 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033d0:	2900      	cmp	r1, #0
 80033d2:	d122      	bne.n	800341a <HAL_TIM_OC_Start+0x4a>
 80033d4:	233e      	movs	r3, #62	; 0x3e
 80033d6:	5cc2      	ldrb	r2, [r0, r3]
 80033d8:	2a01      	cmp	r2, #1
 80033da:	d128      	bne.n	800342e <HAL_TIM_OC_Start+0x5e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033dc:	2202      	movs	r2, #2
 80033de:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033e0:	221f      	movs	r2, #31
 80033e2:	4011      	ands	r1, r2
 80033e4:	3a1e      	subs	r2, #30
 80033e6:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e8:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ea:	6a19      	ldr	r1, [r3, #32]
 80033ec:	4391      	bics	r1, r2
 80033ee:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033f0:	6a19      	ldr	r1, [r3, #32]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f6:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <HAL_TIM_OC_Start+0xdc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01a      	beq.n	8003432 <HAL_TIM_OC_Start+0x62>
 80033fc:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <HAL_TIM_OC_Start+0xe0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d026      	beq.n	8003450 <HAL_TIM_OC_Start+0x80>
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_TIM_OC_Start+0xe4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d023      	beq.n	8003450 <HAL_TIM_OC_Start+0x80>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <HAL_TIM_OC_Start+0xe8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d016      	beq.n	800343c <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800340e:	2101      	movs	r1, #1
  return HAL_OK;
 8003410:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800341a:	2904      	cmp	r1, #4
 800341c:	d02e      	beq.n	800347c <HAL_TIM_OC_Start+0xac>
 800341e:	2908      	cmp	r1, #8
 8003420:	d032      	beq.n	8003488 <HAL_TIM_OC_Start+0xb8>
 8003422:	290c      	cmp	r1, #12
 8003424:	d11a      	bne.n	800345c <HAL_TIM_OC_Start+0x8c>
 8003426:	2341      	movs	r3, #65	; 0x41
 8003428:	5cc3      	ldrb	r3, [r0, r3]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d034      	beq.n	8003498 <HAL_TIM_OC_Start+0xc8>
    return HAL_ERROR;
 800342e:	2001      	movs	r0, #1
 8003430:	e7f2      	b.n	8003418 <HAL_TIM_OC_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003436:	0212      	lsls	r2, r2, #8
 8003438:	430a      	orrs	r2, r1
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	491f      	ldr	r1, [pc, #124]	; (80034bc <HAL_TIM_OC_Start+0xec>)
 8003440:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	2a06      	cmp	r2, #6
 8003444:	d002      	beq.n	800344c <HAL_TIM_OC_Start+0x7c>
 8003446:	3907      	subs	r1, #7
 8003448:	428a      	cmp	r2, r1
 800344a:	d1e0      	bne.n	800340e <HAL_TIM_OC_Start+0x3e>
  return HAL_OK;
 800344c:	2000      	movs	r0, #0
 800344e:	e7e3      	b.n	8003418 <HAL_TIM_OC_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003454:	0212      	lsls	r2, r2, #8
 8003456:	430a      	orrs	r2, r1
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	e7d5      	b.n	8003408 <HAL_TIM_OC_Start+0x38>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345c:	2910      	cmp	r1, #16
 800345e:	d01f      	beq.n	80034a0 <HAL_TIM_OC_Start+0xd0>
 8003460:	2343      	movs	r3, #67	; 0x43
 8003462:	5cc2      	ldrb	r2, [r0, r3]
 8003464:	2a01      	cmp	r2, #1
 8003466:	d1e2      	bne.n	800342e <HAL_TIM_OC_Start+0x5e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003468:	2908      	cmp	r1, #8
 800346a:	d011      	beq.n	8003490 <HAL_TIM_OC_Start+0xc0>
 800346c:	290c      	cmp	r1, #12
 800346e:	d013      	beq.n	8003498 <HAL_TIM_OC_Start+0xc8>
 8003470:	2910      	cmp	r1, #16
 8003472:	d1b3      	bne.n	80033dc <HAL_TIM_OC_Start+0xc>
 8003474:	2342      	movs	r3, #66	; 0x42
 8003476:	2202      	movs	r2, #2
 8003478:	54c2      	strb	r2, [r0, r3]
 800347a:	e7b1      	b.n	80033e0 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800347c:	233f      	movs	r3, #63	; 0x3f
 800347e:	5cc2      	ldrb	r2, [r0, r3]
 8003480:	2a01      	cmp	r2, #1
 8003482:	d0ab      	beq.n	80033dc <HAL_TIM_OC_Start+0xc>
    return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
 8003486:	e7c7      	b.n	8003418 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003488:	2340      	movs	r3, #64	; 0x40
 800348a:	5cc3      	ldrb	r3, [r0, r3]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d1ce      	bne.n	800342e <HAL_TIM_OC_Start+0x5e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	2340      	movs	r3, #64	; 0x40
 8003492:	2202      	movs	r2, #2
 8003494:	54c2      	strb	r2, [r0, r3]
 8003496:	e7a3      	b.n	80033e0 <HAL_TIM_OC_Start+0x10>
 8003498:	2341      	movs	r3, #65	; 0x41
 800349a:	2202      	movs	r2, #2
 800349c:	54c2      	strb	r2, [r0, r3]
 800349e:	e79f      	b.n	80033e0 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a0:	2342      	movs	r3, #66	; 0x42
 80034a2:	5cc3      	ldrb	r3, [r0, r3]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d0e5      	beq.n	8003474 <HAL_TIM_OC_Start+0xa4>
 80034a8:	e7c1      	b.n	800342e <HAL_TIM_OC_Start+0x5e>
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800
 80034b8:	40000400 	.word	0x40000400
 80034bc:	00010007 	.word	0x00010007

080034c0 <HAL_TIM_PWM_Start>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	f7ff ff85 	bl	80033d0 <HAL_TIM_OC_Start>
 80034c6:	bd10      	pop	{r4, pc}

080034c8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	4a1c      	ldr	r2, [pc, #112]	; (800353c <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 80034ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	4290      	cmp	r0, r2
 80034ce:	d020      	beq.n	8003512 <TIM_Base_SetConfig+0x4a>
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <TIM_Base_SetConfig+0x78>)
 80034d2:	4290      	cmp	r0, r2
 80034d4:	d014      	beq.n	8003500 <TIM_Base_SetConfig+0x38>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <TIM_Base_SetConfig+0x7c>)
 80034d8:	4290      	cmp	r0, r2
 80034da:	d015      	beq.n	8003508 <TIM_Base_SetConfig+0x40>
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <TIM_Base_SetConfig+0x80>)
 80034de:	4290      	cmp	r0, r2
 80034e0:	d01b      	beq.n	800351a <TIM_Base_SetConfig+0x52>
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <TIM_Base_SetConfig+0x84>)
 80034e4:	4290      	cmp	r0, r2
 80034e6:	d018      	beq.n	800351a <TIM_Base_SetConfig+0x52>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	4393      	bics	r3, r2
 80034ec:	694a      	ldr	r2, [r1, #20]
 80034ee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80034f0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f2:	688b      	ldr	r3, [r1, #8]
 80034f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034f6:	680b      	ldr	r3, [r1, #0]
 80034f8:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80034fa:	2301      	movs	r3, #1
 80034fc:	6143      	str	r3, [r0, #20]
}
 80034fe:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003500:	2270      	movs	r2, #112	; 0x70
 8003502:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003504:	684a      	ldr	r2, [r1, #4]
 8003506:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <TIM_Base_SetConfig+0x88>)
 800350a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350c:	68ca      	ldr	r2, [r1, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	e7ea      	b.n	80034e8 <TIM_Base_SetConfig+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003512:	2270      	movs	r2, #112	; 0x70
 8003514:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003516:	684a      	ldr	r2, [r1, #4]
 8003518:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <TIM_Base_SetConfig+0x88>)
 800351c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	68ca      	ldr	r2, [r1, #12]
 8003520:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	4393      	bics	r3, r2
 8003526:	694a      	ldr	r2, [r1, #20]
 8003528:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800352a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352c:	688b      	ldr	r3, [r1, #8]
 800352e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003530:	680b      	ldr	r3, [r1, #0]
 8003532:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	690b      	ldr	r3, [r1, #16]
 8003536:	6303      	str	r3, [r0, #48]	; 0x30
 8003538:	e7df      	b.n	80034fa <TIM_Base_SetConfig+0x32>
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40002000 	.word	0x40002000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800
 8003550:	fffffcff 	.word	0xfffffcff

08003554 <HAL_TIM_PWM_Init>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003558:	d02a      	beq.n	80035b0 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	233d      	movs	r3, #61	; 0x3d
 800355c:	5cc3      	ldrb	r3, [r0, r3]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800356a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	c901      	ldmia	r1!, {r0}
 800356e:	f7ff ffab 	bl	80034c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003572:	2301      	movs	r3, #1
 8003574:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8003576:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357a:	3a0a      	subs	r2, #10
 800357c:	54a3      	strb	r3, [r4, r2]
 800357e:	3201      	adds	r2, #1
 8003580:	54a3      	strb	r3, [r4, r2]
 8003582:	3201      	adds	r2, #1
 8003584:	54a3      	strb	r3, [r4, r2]
 8003586:	3201      	adds	r2, #1
 8003588:	54a3      	strb	r3, [r4, r2]
 800358a:	3201      	adds	r2, #1
 800358c:	54a3      	strb	r3, [r4, r2]
 800358e:	3201      	adds	r2, #1
 8003590:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	3201      	adds	r2, #1
 8003594:	54a3      	strb	r3, [r4, r2]
 8003596:	3201      	adds	r2, #1
 8003598:	54a3      	strb	r3, [r4, r2]
 800359a:	3201      	adds	r2, #1
 800359c:	54a3      	strb	r3, [r4, r2]
 800359e:	3201      	adds	r2, #1
 80035a0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	5563      	strb	r3, [r4, r5]
}
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80035a6:	333c      	adds	r3, #60	; 0x3c
 80035a8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80035aa:	f7fe f90f 	bl	80017cc <HAL_TIM_PWM_MspInit>
 80035ae:	e7d9      	b.n	8003564 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80035b0:	2001      	movs	r0, #1
 80035b2:	e7f7      	b.n	80035a4 <HAL_TIM_PWM_Init+0x50>

080035b4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b4:	2210      	movs	r2, #16
 80035b6:	6a03      	ldr	r3, [r0, #32]
{
 80035b8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ba:	4393      	bics	r3, r2
 80035bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80035be:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035c0:	4c15      	ldr	r4, [pc, #84]	; (8003618 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80035c2:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80035c4:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035c6:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c8:	680c      	ldr	r4, [r1, #0]
 80035ca:	0224      	lsls	r4, r4, #8
 80035cc:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80035ce:	2420      	movs	r4, #32
 80035d0:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035d2:	688c      	ldr	r4, [r1, #8]
 80035d4:	0124      	lsls	r4, r4, #4
 80035d6:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035d8:	4c10      	ldr	r4, [pc, #64]	; (800361c <TIM_OC2_SetConfig+0x68>)
 80035da:	42a0      	cmp	r0, r4
 80035dc:	d012      	beq.n	8003604 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	4c10      	ldr	r4, [pc, #64]	; (8003620 <TIM_OC2_SetConfig+0x6c>)
 80035e0:	42a0      	cmp	r0, r4
 80035e2:	d002      	beq.n	80035ea <TIM_OC2_SetConfig+0x36>
 80035e4:	4c0f      	ldr	r4, [pc, #60]	; (8003624 <TIM_OC2_SetConfig+0x70>)
 80035e6:	42a0      	cmp	r0, r4
 80035e8:	d106      	bne.n	80035f8 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ea:	4e0f      	ldr	r6, [pc, #60]	; (8003628 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ec:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ee:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f0:	698b      	ldr	r3, [r1, #24]
 80035f2:	4323      	orrs	r3, r4
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4333      	orrs	r3, r6
  TIMx->CR2 = tmpcr2;
 80035f8:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80035fa:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80035fc:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80035fe:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003600:	6202      	str	r2, [r0, #32]
}
 8003602:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8003604:	2480      	movs	r4, #128	; 0x80
 8003606:	43a2      	bics	r2, r4
 8003608:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800360a:	68ca      	ldr	r2, [r1, #12]
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003610:	2440      	movs	r4, #64	; 0x40
 8003612:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003614:	e7e9      	b.n	80035ea <TIM_OC2_SetConfig+0x36>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	feff8cff 	.word	0xfeff8cff
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	fffff3ff 	.word	0xfffff3ff

0800362c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800362c:	233c      	movs	r3, #60	; 0x3c
{
 800362e:	b570      	push	{r4, r5, r6, lr}
 8003630:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003632:	5cc1      	ldrb	r1, [r0, r3]
{
 8003634:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003636:	2901      	cmp	r1, #1
 8003638:	d100      	bne.n	800363c <HAL_TIM_PWM_ConfigChannel+0x10>
 800363a:	e084      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x11a>
 800363c:	2101      	movs	r1, #1
 800363e:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8003640:	2a14      	cmp	r2, #20
 8003642:	d803      	bhi.n	800364c <HAL_TIM_PWM_ConfigChannel+0x20>
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_TIM_PWM_ConfigChannel+0x120>)
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	589b      	ldr	r3, [r3, r2]
 800364a:	469f      	mov	pc, r3
 800364c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800364e:	233c      	movs	r3, #60	; 0x3c
 8003650:	2200      	movs	r2, #0
 8003652:	54e2      	strb	r2, [r4, r3]
}
 8003654:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003656:	0029      	movs	r1, r5
 8003658:	6800      	ldr	r0, [r0, #0]
 800365a:	f7ff fe85 	bl	8003368 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	6d59      	ldr	r1, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003668:	430a      	orrs	r2, r1
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800366c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366e:	4938      	ldr	r1, [pc, #224]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x124>)
 8003670:	400a      	ands	r2, r1
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003674:	692a      	ldr	r2, [r5, #16]
 8003676:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003678:	0212      	lsls	r2, r2, #8
 800367a:	430a      	orrs	r2, r1
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800367e:	e7e6      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003680:	0029      	movs	r1, r5
 8003682:	6800      	ldr	r0, [r0, #0]
 8003684:	f7ff fd92 	bl	80031ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003688:	2108      	movs	r1, #8
 800368a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	430a      	orrs	r2, r1
 8003692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	3904      	subs	r1, #4
 8003698:	438a      	bics	r2, r1
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	6929      	ldr	r1, [r5, #16]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	619a      	str	r2, [r3, #24]
      break;
 80036a4:	e7d3      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a6:	0029      	movs	r1, r5
 80036a8:	6800      	ldr	r0, [r0, #0]
 80036aa:	f7ff ff83 	bl	80035b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	430a      	orrs	r2, r1
 80036ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	4924      	ldr	r1, [pc, #144]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x124>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c4:	692a      	ldr	r2, [r5, #16]
 80036c6:	6999      	ldr	r1, [r3, #24]
 80036c8:	0212      	lsls	r2, r2, #8
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
      break;
 80036ce:	e7be      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036d0:	0029      	movs	r1, r5
 80036d2:	6800      	ldr	r0, [r0, #0]
 80036d4:	f7ff fda0 	bl	8003218 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d8:	2108      	movs	r1, #8
 80036da:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	3904      	subs	r1, #4
 80036e8:	438a      	bics	r2, r1
 80036ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	6929      	ldr	r1, [r5, #16]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	61da      	str	r2, [r3, #28]
      break;
 80036f4:	e7ab      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f6:	0029      	movs	r1, r5
 80036f8:	6800      	ldr	r0, [r0, #0]
 80036fa:	f7ff fdcf 	bl	800329c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	69d9      	ldr	r1, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	4910      	ldr	r1, [pc, #64]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x124>)
 8003710:	400a      	ands	r2, r1
 8003712:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003714:	692a      	ldr	r2, [r5, #16]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	0212      	lsls	r2, r2, #8
 800371a:	430a      	orrs	r2, r1
 800371c:	61da      	str	r2, [r3, #28]
      break;
 800371e:	e796      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003720:	0029      	movs	r1, r5
 8003722:	6800      	ldr	r0, [r0, #0]
 8003724:	f7ff fdee 	bl	8003304 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003728:	2108      	movs	r1, #8
 800372a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800372e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003730:	430a      	orrs	r2, r1
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003736:	3904      	subs	r1, #4
 8003738:	438a      	bics	r2, r1
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800373c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800373e:	6929      	ldr	r1, [r5, #16]
 8003740:	430a      	orrs	r2, r1
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003744:	e783      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 8003746:	2002      	movs	r0, #2
 8003748:	e784      	b.n	8003654 <HAL_TIM_PWM_ConfigChannel+0x28>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	08003a08 	.word	0x08003a08
 8003750:	fffffbff 	.word	0xfffffbff

08003754 <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003754:	2900      	cmp	r1, #0
 8003756:	d12b      	bne.n	80037b0 <HAL_TIMEx_OCN_Start+0x5c>
 8003758:	2344      	movs	r3, #68	; 0x44
 800375a:	5cc2      	ldrb	r2, [r0, r3]
 800375c:	2a01      	cmp	r2, #1
 800375e:	d12f      	bne.n	80037c0 <HAL_TIMEx_OCN_Start+0x6c>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003760:	2202      	movs	r2, #2
 8003762:	54c2      	strb	r2, [r0, r3]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003764:	221f      	movs	r2, #31
 8003766:	4011      	ands	r1, r2
 8003768:	3a1b      	subs	r2, #27
 800376a:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800376c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800376e:	6a19      	ldr	r1, [r3, #32]
 8003770:	4391      	bics	r1, r2
 8003772:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003774:	6a19      	ldr	r1, [r3, #32]
 8003776:	430a      	orrs	r2, r1
 8003778:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800377e:	0212      	lsls	r2, r2, #8
 8003780:	430a      	orrs	r2, r1
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_TIMEx_OCN_Start+0x84>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d008      	beq.n	800379c <HAL_TIMEx_OCN_Start+0x48>
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_TIMEx_OCN_Start+0x88>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d005      	beq.n	800379c <HAL_TIMEx_OCN_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 8003790:	2101      	movs	r1, #1
  return HAL_OK;
 8003792:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
}
 800379a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	4910      	ldr	r1, [pc, #64]	; (80037e0 <HAL_TIMEx_OCN_Start+0x8c>)
 80037a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	2a06      	cmp	r2, #6
 80037a4:	d002      	beq.n	80037ac <HAL_TIMEx_OCN_Start+0x58>
 80037a6:	3907      	subs	r1, #7
 80037a8:	428a      	cmp	r2, r1
 80037aa:	d1f1      	bne.n	8003790 <HAL_TIMEx_OCN_Start+0x3c>
  return HAL_OK;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e7f4      	b.n	800379a <HAL_TIMEx_OCN_Start+0x46>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037b0:	2904      	cmp	r1, #4
 80037b2:	d007      	beq.n	80037c4 <HAL_TIMEx_OCN_Start+0x70>
 80037b4:	2908      	cmp	r1, #8
 80037b6:	d00a      	beq.n	80037ce <HAL_TIMEx_OCN_Start+0x7a>
 80037b8:	2347      	movs	r3, #71	; 0x47
 80037ba:	5cc2      	ldrb	r2, [r0, r3]
 80037bc:	2a01      	cmp	r2, #1
 80037be:	d0cf      	beq.n	8003760 <HAL_TIMEx_OCN_Start+0xc>
    return HAL_ERROR;
 80037c0:	2001      	movs	r0, #1
 80037c2:	e7ea      	b.n	800379a <HAL_TIMEx_OCN_Start+0x46>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037c4:	2345      	movs	r3, #69	; 0x45
 80037c6:	5cc2      	ldrb	r2, [r0, r3]
 80037c8:	2a01      	cmp	r2, #1
 80037ca:	d0c9      	beq.n	8003760 <HAL_TIMEx_OCN_Start+0xc>
 80037cc:	e7f8      	b.n	80037c0 <HAL_TIMEx_OCN_Start+0x6c>
 80037ce:	2346      	movs	r3, #70	; 0x46
 80037d0:	5cc2      	ldrb	r2, [r0, r3]
 80037d2:	2a01      	cmp	r2, #1
 80037d4:	d0c4      	beq.n	8003760 <HAL_TIMEx_OCN_Start+0xc>
 80037d6:	e7f3      	b.n	80037c0 <HAL_TIMEx_OCN_Start+0x6c>
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40000400 	.word	0x40000400
 80037e0:	00010007 	.word	0x00010007

080037e4 <HAL_TIMEx_PWMN_Start>:
 80037e4:	b510      	push	{r4, lr}
 80037e6:	f7ff ffb5 	bl	8003754 <HAL_TIMEx_OCN_Start>
 80037ea:	bd10      	pop	{r4, pc}

080037ec <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80037ec:	233c      	movs	r3, #60	; 0x3c
{
 80037ee:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80037f0:	5cc3      	ldrb	r3, [r0, r3]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d027      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	233d      	movs	r3, #61	; 0x3d
 80037f8:	2202      	movs	r2, #2
 80037fa:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80037fc:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037fe:	4d13      	ldr	r5, [pc, #76]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 = htim->Instance->CR2;
 8003800:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003802:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003804:	42aa      	cmp	r2, r5
 8003806:	d00f      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 8003808:	2570      	movs	r5, #112	; 0x70
 800380a:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380c:	680d      	ldr	r5, [r1, #0]
 800380e:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8003810:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d010      	beq.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003818:	233d      	movs	r3, #61	; 0x3d
 800381a:	2201      	movs	r2, #1
 800381c:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 800381e:	2200      	movs	r2, #0
 8003820:	3b01      	subs	r3, #1
 8003822:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003824:	2000      	movs	r0, #0
}
 8003826:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003828:	4d0a      	ldr	r5, [pc, #40]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800382a:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800382c:	684d      	ldr	r5, [r1, #4]
 800382e:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8003830:	2570      	movs	r5, #112	; 0x70
 8003832:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003834:	680d      	ldr	r5, [r1, #0]
 8003836:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8003838:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383e:	688b      	ldr	r3, [r1, #8]
 8003840:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8003842:	6094      	str	r4, [r2, #8]
 8003844:	e7e8      	b.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8003846:	2002      	movs	r0, #2
 8003848:	e7ed      	b.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40000400 	.word	0x40000400
 8003854:	ff0fffff 	.word	0xff0fffff

08003858 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003858:	233c      	movs	r3, #60	; 0x3c
{
 800385a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800385c:	5cc3      	ldrb	r3, [r0, r3]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d03d      	beq.n	80038de <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003862:	68ca      	ldr	r2, [r1, #12]
 8003864:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003866:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003868:	4013      	ands	r3, r2
 800386a:	688a      	ldr	r2, [r1, #8]
 800386c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8003870:	4013      	ands	r3, r2
 8003872:	684a      	ldr	r2, [r1, #4]
 8003874:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8003878:	4013      	ands	r3, r2
 800387a:	680a      	ldr	r2, [r1, #0]
 800387c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8003880:	4013      	ands	r3, r2
 8003882:	690a      	ldr	r2, [r1, #16]
 8003884:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8003888:	4013      	ands	r3, r2
 800388a:	694a      	ldr	r2, [r1, #20]
 800388c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8003890:	4013      	ands	r3, r2
 8003892:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003894:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003896:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003898:	4013      	ands	r3, r2
 800389a:	698a      	ldr	r2, [r1, #24]
 800389c:	0412      	lsls	r2, r2, #16
 800389e:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80038a2:	4294      	cmp	r4, r2
 80038a4:	d005      	beq.n	80038b2 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  htim->Instance->BDTR = tmpbdtr;
 80038a6:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80038a8:	2200      	movs	r2, #0
 80038aa:	233c      	movs	r3, #60	; 0x3c
 80038ac:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80038ae:	2000      	movs	r0, #0
}
 80038b0:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80038b2:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	69ca      	ldr	r2, [r1, #28]
 80038b8:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80038bc:	4013      	ands	r3, r2
 80038be:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80038c0:	0512      	lsls	r2, r2, #20
 80038c2:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038c4:	4a11      	ldr	r2, [pc, #68]	; (800390c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	6a0a      	ldr	r2, [r1, #32]
 80038ca:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038cc:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80038d2:	4313      	orrs	r3, r2
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80038d4:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80038d6:	401a      	ands	r2, r3
 80038d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80038da:	4313      	orrs	r3, r2
 80038dc:	e7e3      	b.n	80038a6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
  __HAL_LOCK(htim);
 80038de:	2002      	movs	r0, #2
 80038e0:	e7e6      	b.n	80038b0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	fffffcff 	.word	0xfffffcff
 80038e8:	fffffbff 	.word	0xfffffbff
 80038ec:	fffff7ff 	.word	0xfffff7ff
 80038f0:	ffffefff 	.word	0xffffefff
 80038f4:	ffffdfff 	.word	0xffffdfff
 80038f8:	ffffbfff 	.word	0xffffbfff
 80038fc:	fff0ffff 	.word	0xfff0ffff
 8003900:	40012c00 	.word	0x40012c00
 8003904:	efffffff 	.word	0xefffffff
 8003908:	ff0fffff 	.word	0xff0fffff
 800390c:	feffffff 	.word	0xfeffffff
 8003910:	fdffffff 	.word	0xfdffffff
 8003914:	dfffffff 	.word	0xdfffffff

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	2600      	movs	r6, #0
 800391c:	4d0c      	ldr	r5, [pc, #48]	; (8003950 <__libc_init_array+0x38>)
 800391e:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	2600      	movs	r6, #0
 800392a:	f000 f821 	bl	8003970 <_init>
 800392e:	4d0a      	ldr	r5, [pc, #40]	; (8003958 <__libc_init_array+0x40>)
 8003930:	4c0a      	ldr	r4, [pc, #40]	; (800395c <__libc_init_array+0x44>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	00b3      	lsls	r3, r6, #2
 800393e:	58eb      	ldr	r3, [r5, r3]
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	00b3      	lsls	r3, r6, #2
 8003948:	58eb      	ldr	r3, [r5, r3]
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	08003a5c 	.word	0x08003a5c
 8003954:	08003a5c 	.word	0x08003a5c
 8003958:	08003a5c 	.word	0x08003a5c
 800395c:	08003a60 	.word	0x08003a60

08003960 <memset>:
 8003960:	0003      	movs	r3, r0
 8003962:	1882      	adds	r2, r0, r2
 8003964:	4293      	cmp	r3, r2
 8003966:	d100      	bne.n	800396a <memset+0xa>
 8003968:	4770      	bx	lr
 800396a:	7019      	strb	r1, [r3, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	e7f9      	b.n	8003964 <memset+0x4>

08003970 <_init>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr

0800397c <_fini>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr
